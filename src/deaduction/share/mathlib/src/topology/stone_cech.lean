/-
Copyright (c) 2018 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton
-/
import topology.bases
import topology.dense_embedding

/-! # Stone-ƒåech compactification

Construction of the Stone-ƒåech compactification using ultrafilters.

Parts of the formalization are based on "Ultrafilters and Topology"
by Marius Stekelenburg, particularly section 5.
-/

noncomputable theory

open filter set
open_locale topological_space

universes u v

section ultrafilter
/- The set of ultrafilters on Œ± carries a natural topology which makes
  it the Stone-ƒåech compactification of Œ± (viewed as a discrete space). -/

/-- Basis for the topology on `ultrafilter Œ±`. -/
def ultrafilter_basis (Œ± : Type u) : set (set (ultrafilter Œ±)) :=
{t | ‚àÉ (s : set Œ±), t = {u | s ‚àà u.val}}

variables {Œ± : Type u}

instance : topological_space (ultrafilter Œ±) :=
topological_space.generate_from (ultrafilter_basis Œ±)

lemma ultrafilter_basis_is_basis :
  topological_space.is_topological_basis (ultrafilter_basis Œ±) :=
‚ü®begin
   rintros _ ‚ü®a, rfl‚ü© _ ‚ü®b, rfl‚ü© u ‚ü®ua, ub‚ü©,
   refine ‚ü®_, ‚ü®a ‚à© b, rfl‚ü©, u.val.inter_sets ua ub, assume v hv, ‚ü®_, _‚ü©‚ü©;
   apply v.val.sets_of_superset hv; simp
 end,
 eq_univ_of_univ_subset $ subset_sUnion_of_mem $
   ‚ü®univ, eq.symm (eq_univ_of_forall (Œª u, u.val.univ_sets))‚ü©,
 rfl‚ü©

/-- The basic open sets for the topology on ultrafilters are open. -/
lemma ultrafilter_is_open_basic (s : set Œ±) :
  is_open {u : ultrafilter Œ± | s ‚àà u.val} :=
topological_space.is_open_of_is_topological_basis ultrafilter_basis_is_basis ‚ü®s, rfl‚ü©

/-- The basic open sets for the topology on ultrafilters are also closed. -/
lemma ultrafilter_is_closed_basic (s : set Œ±) :
  is_closed {u : ultrafilter Œ± | s ‚àà u.val} :=
begin
  change is_open (- _),
  convert ultrafilter_is_open_basic (-s),
  ext u,
  exact (ultrafilter_iff_compl_mem_iff_not_mem.mp u.property s).symm
end

/-- Every ultrafilter `u` on `ultrafilter Œ±` converges to a unique
  point of `ultrafilter Œ±`, namely `mjoin u`. -/
lemma ultrafilter_converges_iff {u : ultrafilter (ultrafilter Œ±)} {x : ultrafilter Œ±} :
  u.val ‚â§ ùìù x ‚Üî x = mjoin u :=
begin
  rw [eq_comm, ultrafilter.eq_iff_val_le_val],
  change u.val ‚â§ ùìù x ‚Üî x.val.sets ‚äÜ {a | {v : ultrafilter Œ± | a ‚àà v.val} ‚àà u.val},
  simp only [topological_space.nhds_generate_from, le_infi_iff, ultrafilter_basis,
    le_principal_iff],
  split; intro h,
  { intros a ha, exact h _ ‚ü®ha, a, rfl‚ü© },
  { rintros _ ‚ü®xi, a, rfl‚ü©, exact h xi }
end

instance ultrafilter_compact : compact_space (ultrafilter Œ±) :=
‚ü®compact_iff_ultrafilter_le_nhds.mpr $ assume f uf _,
   ‚ü®mjoin ‚ü®f, uf‚ü©, trivial, ultrafilter_converges_iff.mpr rfl‚ü©‚ü©

instance ultrafilter.t2_space : t2_space (ultrafilter Œ±) :=
t2_iff_ultrafilter.mpr $ assume f x y u fx fy,
  have hx : x = mjoin ‚ü®f, u‚ü©, from ultrafilter_converges_iff.mp fx,
  have hy : y = mjoin ‚ü®f, u‚ü©, from ultrafilter_converges_iff.mp fy,
  hx.trans hy.symm

lemma ultrafilter_comap_pure_nhds (b : ultrafilter Œ±) : comap pure (ùìù b) ‚â§ b.val :=
begin
  rw topological_space.nhds_generate_from,
  simp only [comap_infi, comap_principal],
  intros s hs,
  rw ‚Üêle_principal_iff,
  refine infi_le_of_le {u | s ‚àà u.val} _,
  refine infi_le_of_le ‚ü®hs, ‚ü®s, rfl‚ü©‚ü© _,
  exact principal_mono.2 (Œª a, id)
end

section embedding

lemma ultrafilter_pure_injective : function.injective (pure : Œ± ‚Üí ultrafilter Œ±) :=
begin
  intros x y h,
  have : {x} ‚àà (pure x : ultrafilter Œ±).val := singleton_mem_pure_sets,
  rw h at this,
  exact (mem_singleton_iff.mp (mem_pure_sets.mp this)).symm
end

open topological_space

/-- `pure : Œ± ‚Üí ultrafilter Œ±` defines a dense inducing of `Œ±` in `ultrafilter Œ±`. -/
lemma dense_inducing_pure : @dense_inducing _ _ ‚ä• _ (pure : Œ± ‚Üí ultrafilter Œ±) :=
by letI : topological_space Œ± := ‚ä•; exact
dense_inducing.mk' pure continuous_bot
  (assume x, mem_closure_iff_ultrafilter.mpr
     ‚ü®x.map ultrafilter.pure, range_mem_map,
      ultrafilter_converges_iff.mpr (bind_pure x).symm‚ü©)
  (assume a s as,
     ‚ü®{u | s ‚àà u.val},
      mem_nhds_sets (ultrafilter_is_open_basic s) (mem_of_nhds as : a ‚àà s),
      assume b hb, mem_pure_sets.mp hb‚ü©)

-- The following refined version will never be used

/-- `pure : Œ± ‚Üí ultrafilter Œ±` defines a dense embedding of `Œ±` in `ultrafilter Œ±`. -/
lemma dense_embedding_pure : @dense_embedding _ _ ‚ä• _ (pure : Œ± ‚Üí ultrafilter Œ±) :=
by letI : topological_space Œ± := ‚ä• ;
exact { inj := ultrafilter_pure_injective, ..dense_inducing_pure }
end embedding

section extension
/- Goal: Any function `Œ± ‚Üí Œ≥` to a compact Hausdorff space `Œ≥` has a
  unique extension to a continuous function `ultrafilter Œ± ‚Üí Œ≥`. We
  already know it must be unique because `Œ± ‚Üí ultrafilter Œ±` is a
  dense embedding and `Œ≥` is Hausdorff. For existence, we will invoke
  `dense_embedding.continuous_extend`. -/

variables {Œ≥ : Type*} [topological_space Œ≥]

/-- The extension of a function `Œ± ‚Üí Œ≥` to a function `ultrafilter Œ± ‚Üí Œ≥`.
  When `Œ≥` is a compact Hausdorff space it will be continuous. -/
def ultrafilter.extend (f : Œ± ‚Üí Œ≥) : ultrafilter Œ± ‚Üí Œ≥ :=
by letI : topological_space Œ± := ‚ä•; exact dense_inducing_pure.extend f

variables [t2_space Œ≥]

lemma ultrafilter_extend_extends (f : Œ± ‚Üí Œ≥) : ultrafilter.extend f ‚àò pure = f :=
begin
  letI : topological_space Œ± := ‚ä•,
  letI : discrete_topology Œ± := ‚ü®rfl‚ü©,
  exact funext (dense_inducing_pure.extend_eq_of_cont continuous_of_discrete_topology)
end

variables  [compact_space Œ≥]

lemma continuous_ultrafilter_extend (f : Œ± ‚Üí Œ≥) : continuous (ultrafilter.extend f) :=
have ‚àÄ (b : ultrafilter Œ±), ‚àÉ c, tendsto f (comap ultrafilter.pure (ùìù b)) (ùìù c) := assume b,
  -- b.map f is an ultrafilter on Œ≥, which is compact, so it converges to some c in Œ≥.
  let ‚ü®c, _, h‚ü© := compact_iff_ultrafilter_le_nhds.mp compact_univ (b.map f).val (b.map f).property
    (by rw [le_principal_iff]; exact univ_mem_sets) in
  ‚ü®c, le_trans (map_mono (ultrafilter_comap_pure_nhds _)) h‚ü©,
begin
  letI : topological_space Œ± := ‚ä•,
  letI : normal_space Œ≥ := normal_of_compact_t2,
  exact dense_inducing_pure.continuous_extend this
end

/-- The value of `ultrafilter.extend f` on an ultrafilter `b` is the
  unique limit of the ultrafilter `b.map f` in `Œ≥`. -/
lemma ultrafilter_extend_eq_iff {f : Œ± ‚Üí Œ≥} {b : ultrafilter Œ±} {c : Œ≥} :
  ultrafilter.extend f b = c ‚Üî b.val.map f ‚â§ ùìù c :=
‚ü®assume h, begin
   -- Write b as an ultrafilter limit of pure ultrafilters, and use
   -- the facts that ultrafilter.extend is a continuous extension of f.
   let b' : ultrafilter (ultrafilter Œ±) := b.map pure,
   have t : b'.val ‚â§ ùìù b,
     from ultrafilter_converges_iff.mpr (bind_pure _).symm,
   rw ‚Üêh,
   have := (continuous_ultrafilter_extend f).tendsto b,
   refine le_trans _ (le_trans (map_mono t) this),
   change _ ‚â§ map (ultrafilter.extend f ‚àò pure) b.val,
   rw ultrafilter_extend_extends,
   exact le_refl _
 end,
 assume h, by letI : topological_space Œ± := ‚ä•; exact
   dense_inducing_pure.extend_eq (le_trans (map_mono (ultrafilter_comap_pure_nhds _)) h)‚ü©

end extension

end ultrafilter


section stone_cech
/- Now, we start with a (not necessarily discrete) topological space Œ±
  and we want to construct its Stone-ƒåech compactification. We can
  build it as a quotient of `ultrafilter Œ±` by the relation which
  identifies two points if the extension of every continuous function
  Œ± ‚Üí Œ≥ to a compact Hausdorff space sends the two points to the same
  point of Œ≥. -/

variables (Œ± : Type u) [topological_space Œ±]

instance stone_cech_setoid : setoid (ultrafilter Œ±) :=
{ r := Œª x y, ‚àÄ (Œ≥ : Type u) [topological_space Œ≥], by exactI
    ‚àÄ [t2_space Œ≥] [compact_space Œ≥] (f : Œ± ‚Üí Œ≥) (hf : continuous f),
    ultrafilter.extend f x = ultrafilter.extend f y,
  iseqv :=
    ‚ü®assume x Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf, rfl,
     assume x y xy Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf, by exactI (xy Œ≥ f hf).symm,
     assume x y z xy yz Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf, by exactI (xy Œ≥ f hf).trans (yz Œ≥ f hf)‚ü© }

/-- The Stone-ƒåech compactification of a topological space. -/
def stone_cech : Type u := quotient (stone_cech_setoid Œ±)

variables {Œ±}
instance : topological_space (stone_cech Œ±) := by unfold stone_cech; apply_instance
instance [inhabited Œ±] : inhabited (stone_cech Œ±) := by unfold stone_cech; apply_instance

/-- The natural map from Œ± to its Stone-ƒåech compactification. -/
def stone_cech_unit (x : Œ±) : stone_cech Œ± := ‚ü¶pure x‚üß

/-- The image of stone_cech_unit is dense. (But stone_cech_unit need
  not be an embedding, for example if Œ± is not Hausdorff.) -/
lemma stone_cech_unit_dense : closure (range (@stone_cech_unit Œ± _)) = univ :=
begin
  convert quotient_dense_of_dense (eq_univ_iff_forall.mp dense_inducing_pure.closure_range),
  rw [‚Üêrange_comp], refl
end

section extension

variables {Œ≥ : Type u} [topological_space Œ≥] [t2_space Œ≥] [compact_space Œ≥]
variables {f : Œ± ‚Üí Œ≥} (hf : continuous f)

local attribute [elab_with_expected_type] quotient.lift

/-- The extension of a continuous function from Œ± to a compact
  Hausdorff space Œ≥ to the Stone-ƒåech compactification of Œ±. -/
def stone_cech_extend : stone_cech Œ± ‚Üí Œ≥ :=
quotient.lift (ultrafilter.extend f) (Œª x y xy, xy Œ≥ f hf)

lemma stone_cech_extend_extends : stone_cech_extend hf ‚àò stone_cech_unit = f :=
ultrafilter_extend_extends f

lemma continuous_stone_cech_extend : continuous (stone_cech_extend hf) :=
continuous_quot_lift _ (continuous_ultrafilter_extend f)

end extension

lemma convergent_eqv_pure {u : ultrafilter Œ±} {x : Œ±} (ux : u.val ‚â§ ùìù x) : u ‚âà pure x :=
assume Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf, begin
  resetI,
  transitivity f x, swap, symmetry,
  all_goals { refine ultrafilter_extend_eq_iff.mpr (le_trans (map_mono _) (hf.tendsto _)) },
  { apply pure_le_nhds }, { exact ux }
end

lemma continuous_stone_cech_unit : continuous (stone_cech_unit : Œ± ‚Üí stone_cech Œ±) :=
continuous_iff_ultrafilter.mpr $ Œª x g u gx,
  let g' : ultrafilter Œ± := ‚ü®g, u‚ü© in
  have (g'.map ultrafilter.pure).val ‚â§ ùìù g',
    by rw ultrafilter_converges_iff; exact (bind_pure _).symm,
  have (g'.map stone_cech_unit).val ‚â§ ùìù ‚ü¶g'‚üß, from
    (continuous_at_iff_ultrafilter g').mp
      (continuous_quotient_mk.tendsto g') _ (ultrafilter_map u) this,
  by rwa (show ‚ü¶g'‚üß = ‚ü¶pure x‚üß, from quotient.sound $ convergent_eqv_pure gx) at this

instance stone_cech.t2_space : t2_space (stone_cech Œ±) :=
begin
  rw t2_iff_ultrafilter,
  rintros g ‚ü®x‚ü© ‚ü®y‚ü© u gx gy,
  apply quotient.sound,
  intros Œ≥ tŒ≥ h‚ÇÅ h‚ÇÇ f hf,
  resetI,
  let ff := stone_cech_extend hf,
  change ff ‚ü¶x‚üß = ff ‚ü¶y‚üß,
  have lim : ‚àÄ z : ultrafilter Œ±, g ‚â§ ùìù ‚ü¶z‚üß ‚Üí tendsto ff g (ùìù (ff ‚ü¶z‚üß)) :=
  assume z gz,
    calc map ff g ‚â§ map ff (ùìù ‚ü¶z‚üß) : map_mono gz
              ... ‚â§ ùìù (ff ‚ü¶z‚üß) : (continuous_stone_cech_extend hf).tendsto _,
  exact tendsto_nhds_unique u.1 (lim x gx) (lim y gy)
end

instance stone_cech.compact_space : compact_space (stone_cech Œ±) :=
quotient.compact_space

end stone_cech
