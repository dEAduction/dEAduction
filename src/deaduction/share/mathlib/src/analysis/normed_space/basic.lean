/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import topology.instances.nnreal
import topology.instances.complex
import topology.algebra.module
import topology.metric_space.antilipschitz

/-!
# Normed spaces
-/

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Type*}

noncomputable theory
open filter metric
open_locale topological_space big_operators
localized "notation f `‚Üí_{`:50 a `}`:0 b := filter.tendsto f (_root_.nhds a) (_root_.nhds b)" in filter

/-- Auxiliary class, endowing a type `Œ±` with a function `norm : Œ± ‚Üí ‚Ñù`. This class is designed to
be extended in more interesting classes specifying the properties of the norm. -/
class has_norm (Œ± : Type*) := (norm : Œ± ‚Üí ‚Ñù)

export has_norm (norm)

notation `‚à•`:1024 e:1 `‚à•`:1 := norm e

section prio
set_option default_priority 100 -- see Note [default priority]
/-- A normed group is an additive group endowed with a norm for which `dist x y = ‚à•x - y‚à•` defines
a metric space structure. -/
class normed_group (Œ± : Type*) extends has_norm Œ±, add_comm_group Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
end prio

/-- Construct a normed group from a translation invariant distance -/
def normed_group.of_add_dist [has_norm Œ±] [add_comm_group Œ±] [metric_space Œ±]
  (H1 : ‚àÄ x:Œ±, ‚à•x‚à• = dist x 0)
  (H2 : ‚àÄ x y z : Œ±, dist x y ‚â§ dist (x + z) (y + z)) : normed_group Œ± :=
{ dist_eq := Œª x y, begin
    rw H1, apply le_antisymm,
    { rw [sub_eq_add_neg, ‚Üê add_right_neg y], apply H2 },
    { have := H2 (x-y) 0 y, rwa [sub_add_cancel, zero_add] at this }
  end }

/-- Construct a normed group from a translation invariant distance -/
def normed_group.of_add_dist' [has_norm Œ±] [add_comm_group Œ±] [metric_space Œ±]
  (H1 : ‚àÄ x:Œ±, ‚à•x‚à• = dist x 0)
  (H2 : ‚àÄ x y z : Œ±, dist (x + z) (y + z) ‚â§ dist x y) : normed_group Œ± :=
{ dist_eq := Œª x y, begin
    rw H1, apply le_antisymm,
    { have := H2 (x-y) 0 y, rwa [sub_add_cancel, zero_add] at this },
    { rw [sub_eq_add_neg, ‚Üê add_right_neg y], apply H2 }
  end }

/-- A normed group can be built from a norm that satisfies algebraic properties. This is
formalised in this structure. -/
structure normed_group.core (Œ± : Type*) [add_comm_group Œ±] [has_norm Œ±] : Prop :=
(norm_eq_zero_iff : ‚àÄ x : Œ±, ‚à•x‚à• = 0 ‚Üî x = 0)
(triangle : ‚àÄ x y : Œ±, ‚à•x + y‚à• ‚â§ ‚à•x‚à• + ‚à•y‚à•)
(norm_neg : ‚àÄ x : Œ±, ‚à•-x‚à• = ‚à•x‚à•)

/-- Constructing a normed group from core properties of a norm, i.e., registering the distance and
the metric space structure from the norm properties. -/
noncomputable def normed_group.of_core (Œ± : Type*) [add_comm_group Œ±] [has_norm Œ±]
  (C : normed_group.core Œ±) : normed_group Œ± :=
{ dist := Œª x y, ‚à•x - y‚à•,
  dist_eq := assume x y, by refl,
  dist_self := assume x, (C.norm_eq_zero_iff (x - x)).mpr (show x - x = 0, by simp),
  eq_of_dist_eq_zero := assume x y h, show (x = y), from sub_eq_zero.mp $ (C.norm_eq_zero_iff (x - y)).mp h,
  dist_triangle := assume x y z,
    calc ‚à•x - z‚à• = ‚à•x - y + (y - z)‚à• : by rw sub_add_sub_cancel
            ... ‚â§ ‚à•x - y‚à• + ‚à•y - z‚à•  : C.triangle _ _,
  dist_comm := assume x y,
    calc ‚à•x - y‚à• = ‚à• -(y - x)‚à• : by simp
             ... = ‚à•y - x‚à• : by { rw [C.norm_neg] } }

section normed_group
variables [normed_group Œ±] [normed_group Œ≤]

lemma dist_eq_norm (g h : Œ±) : dist g h = ‚à•g - h‚à• :=
normed_group.dist_eq _ _

@[simp] lemma dist_zero_right (g : Œ±) : dist g 0 = ‚à•g‚à• :=
by rw [dist_eq_norm, sub_zero]

lemma norm_sub_rev (g h : Œ±) : ‚à•g - h‚à• = ‚à•h - g‚à• :=
by simpa only [dist_eq_norm] using dist_comm g h

@[simp] lemma norm_neg (g : Œ±) : ‚à•-g‚à• = ‚à•g‚à• :=
by simpa using norm_sub_rev 0 g

@[simp] lemma dist_add_left (g h‚ÇÅ h‚ÇÇ : Œ±) : dist (g + h‚ÇÅ) (g + h‚ÇÇ) = dist h‚ÇÅ h‚ÇÇ :=
by simp [dist_eq_norm]

@[simp] lemma dist_add_right (g‚ÇÅ g‚ÇÇ h : Œ±) : dist (g‚ÇÅ + h) (g‚ÇÇ + h) = dist g‚ÇÅ g‚ÇÇ :=
by simp [dist_eq_norm]

@[simp] lemma dist_neg_neg (g h : Œ±) : dist (-g) (-h) = dist g h :=
by simp only [dist_eq_norm, neg_sub_neg, norm_sub_rev]

@[simp] lemma dist_sub_left (g h‚ÇÅ h‚ÇÇ : Œ±) : dist (g - h‚ÇÅ) (g - h‚ÇÇ) = dist h‚ÇÅ h‚ÇÇ :=
by simp only [sub_eq_add_neg, dist_add_left, dist_neg_neg]

@[simp] lemma dist_sub_right (g‚ÇÅ g‚ÇÇ h : Œ±) : dist (g‚ÇÅ - h) (g‚ÇÇ - h) = dist g‚ÇÅ g‚ÇÇ :=
dist_add_right _ _ _

/-- Triangle inequality for the norm. -/
lemma norm_add_le (g h : Œ±) : ‚à•g + h‚à• ‚â§ ‚à•g‚à• + ‚à•h‚à• :=
by simpa [dist_eq_norm] using dist_triangle g 0 (-h)

lemma norm_add_le_of_le {g‚ÇÅ g‚ÇÇ : Œ±} {n‚ÇÅ n‚ÇÇ : ‚Ñù} (H‚ÇÅ : ‚à•g‚ÇÅ‚à• ‚â§ n‚ÇÅ) (H‚ÇÇ : ‚à•g‚ÇÇ‚à• ‚â§ n‚ÇÇ) :
  ‚à•g‚ÇÅ + g‚ÇÇ‚à• ‚â§ n‚ÇÅ + n‚ÇÇ :=
le_trans (norm_add_le g‚ÇÅ g‚ÇÇ) (add_le_add H‚ÇÅ H‚ÇÇ)

lemma dist_add_add_le (g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ : Œ±) :
  dist (g‚ÇÅ + g‚ÇÇ) (h‚ÇÅ + h‚ÇÇ) ‚â§ dist g‚ÇÅ h‚ÇÅ + dist g‚ÇÇ h‚ÇÇ :=
by simpa only [dist_add_left, dist_add_right] using dist_triangle (g‚ÇÅ + g‚ÇÇ) (h‚ÇÅ + g‚ÇÇ) (h‚ÇÅ + h‚ÇÇ)

lemma dist_add_add_le_of_le {g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ : Œ±} {d‚ÇÅ d‚ÇÇ : ‚Ñù}
  (H‚ÇÅ : dist g‚ÇÅ h‚ÇÅ ‚â§ d‚ÇÅ) (H‚ÇÇ : dist g‚ÇÇ h‚ÇÇ ‚â§ d‚ÇÇ) :
  dist (g‚ÇÅ + g‚ÇÇ) (h‚ÇÅ + h‚ÇÇ) ‚â§ d‚ÇÅ + d‚ÇÇ :=
le_trans (dist_add_add_le g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ) (add_le_add H‚ÇÅ H‚ÇÇ)

lemma dist_sub_sub_le (g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ : Œ±) :
  dist (g‚ÇÅ - g‚ÇÇ) (h‚ÇÅ - h‚ÇÇ) ‚â§ dist g‚ÇÅ h‚ÇÅ + dist g‚ÇÇ h‚ÇÇ :=
dist_neg_neg g‚ÇÇ h‚ÇÇ ‚ñ∏ dist_add_add_le _ _ _ _

lemma dist_sub_sub_le_of_le {g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ : Œ±} {d‚ÇÅ d‚ÇÇ : ‚Ñù}
  (H‚ÇÅ : dist g‚ÇÅ h‚ÇÅ ‚â§ d‚ÇÅ) (H‚ÇÇ : dist g‚ÇÇ h‚ÇÇ ‚â§ d‚ÇÇ) :
  dist (g‚ÇÅ - g‚ÇÇ) (h‚ÇÅ - h‚ÇÇ) ‚â§ d‚ÇÅ + d‚ÇÇ :=
le_trans (dist_sub_sub_le g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ) (add_le_add H‚ÇÅ H‚ÇÇ)

lemma abs_dist_sub_le_dist_add_add (g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ : Œ±) :
  abs (dist g‚ÇÅ h‚ÇÅ - dist g‚ÇÇ h‚ÇÇ) ‚â§ dist (g‚ÇÅ + g‚ÇÇ) (h‚ÇÅ + h‚ÇÇ) :=
by simpa only [dist_add_left, dist_add_right, dist_comm h‚ÇÇ]
  using abs_dist_sub_le (g‚ÇÅ + g‚ÇÇ) (h‚ÇÅ + h‚ÇÇ) (h‚ÇÅ + g‚ÇÇ)

@[simp] lemma norm_nonneg (g : Œ±) : 0 ‚â§ ‚à•g‚à• :=
by { rw[‚Üêdist_zero_right], exact dist_nonneg }

@[simp] lemma norm_eq_zero {g : Œ±} : ‚à•g‚à• = 0 ‚Üî g = 0 :=
dist_zero_right g ‚ñ∏ dist_eq_zero

@[simp] lemma norm_zero : ‚à•(0:Œ±)‚à• = 0 := norm_eq_zero.2 rfl

lemma norm_sum_le {Œ≤} : ‚àÄ(s : finset Œ≤) (f : Œ≤ ‚Üí Œ±), ‚à•‚àë a in s, f a‚à• ‚â§ ‚àë a in s, ‚à• f a ‚à• :=
finset.le_sum_of_subadditive norm norm_zero norm_add_le

lemma norm_sum_le_of_le {Œ≤} (s : finset Œ≤) {f : Œ≤ ‚Üí Œ±} {n : Œ≤ ‚Üí ‚Ñù} (h : ‚àÄ b ‚àà s, ‚à•f b‚à• ‚â§ n b) :
  ‚à•‚àë b in s, f b‚à• ‚â§ ‚àë b in s, n b :=
le_trans (norm_sum_le s f) (finset.sum_le_sum h)

lemma norm_pos_iff {g : Œ±} : 0 < ‚à• g ‚à• ‚Üî g ‚â† 0 :=
dist_zero_right g ‚ñ∏ dist_pos

lemma norm_le_zero_iff {g : Œ±} : ‚à•g‚à• ‚â§ 0 ‚Üî g = 0 :=
by { rw[‚Üêdist_zero_right], exact dist_le_zero }

lemma norm_sub_le (g h : Œ±) : ‚à•g - h‚à• ‚â§ ‚à•g‚à• + ‚à•h‚à• :=
by simpa [dist_eq_norm] using dist_triangle g 0 h

lemma norm_sub_le_of_le {g‚ÇÅ g‚ÇÇ : Œ±} {n‚ÇÅ n‚ÇÇ : ‚Ñù} (H‚ÇÅ : ‚à•g‚ÇÅ‚à• ‚â§ n‚ÇÅ) (H‚ÇÇ : ‚à•g‚ÇÇ‚à• ‚â§ n‚ÇÇ) :
  ‚à•g‚ÇÅ - g‚ÇÇ‚à• ‚â§ n‚ÇÅ + n‚ÇÇ :=
le_trans (norm_sub_le g‚ÇÅ g‚ÇÇ) (add_le_add H‚ÇÅ H‚ÇÇ)

lemma dist_le_norm_add_norm (g h : Œ±) : dist g h ‚â§ ‚à•g‚à• + ‚à•h‚à• :=
by { rw dist_eq_norm, apply norm_sub_le }

lemma abs_norm_sub_norm_le (g h : Œ±) : abs(‚à•g‚à• - ‚à•h‚à•) ‚â§ ‚à•g - h‚à• :=
by simpa [dist_eq_norm] using abs_dist_sub_le g h 0

lemma norm_sub_norm_le (g h : Œ±) : ‚à•g‚à• - ‚à•h‚à• ‚â§ ‚à•g - h‚à• :=
le_trans (le_abs_self _) (abs_norm_sub_norm_le g h)

lemma dist_norm_norm_le (g h : Œ±) : dist ‚à•g‚à• ‚à•h‚à• ‚â§ ‚à•g - h‚à• :=
abs_norm_sub_norm_le g h

lemma ball_0_eq (Œµ : ‚Ñù) : ball (0:Œ±) Œµ = {x | ‚à•x‚à• < Œµ} :=
set.ext $ assume a, by simp

lemma norm_le_of_mem_closed_ball {g h : Œ±} {r : ‚Ñù} (H : h ‚àà closed_ball g r) :
  ‚à•h‚à• ‚â§ ‚à•g‚à• + r :=
calc
  ‚à•h‚à• = ‚à•g + (h - g)‚à• : by rw [add_sub_cancel'_right]
  ... ‚â§ ‚à•g‚à• + ‚à•h - g‚à•  : norm_add_le _ _
  ... ‚â§ ‚à•g‚à• + r : by { apply add_le_add_left, rw ‚Üê dist_eq_norm, exact H }

lemma norm_lt_of_mem_ball {g h : Œ±} {r : ‚Ñù} (H : h ‚àà ball g r) :
  ‚à•h‚à• < ‚à•g‚à• + r :=
calc
  ‚à•h‚à• = ‚à•g + (h - g)‚à• : by rw [add_sub_cancel'_right]
  ... ‚â§ ‚à•g‚à• + ‚à•h - g‚à•  : norm_add_le _ _
  ... < ‚à•g‚à• + r : by { apply add_lt_add_left, rw ‚Üê dist_eq_norm, exact H }

@[nolint ge_or_gt] -- see Note [nolint_ge]
theorem normed_group.tendsto_nhds_zero {f : Œ≥ ‚Üí Œ±} {l : filter Œ≥} :
  tendsto f l (ùìù 0) ‚Üî ‚àÄ Œµ > 0, ‚àÄ·∂† x in l, ‚à• f x ‚à• < Œµ :=
metric.tendsto_nhds.trans $ by simp only [dist_zero_right]

section nnnorm

/-- Version of the norm taking values in nonnegative reals. -/
def nnnorm (a : Œ±) : nnreal := ‚ü®norm a, norm_nonneg a‚ü©

@[simp] lemma coe_nnnorm (a : Œ±) : (nnnorm a : ‚Ñù) = norm a := rfl

lemma nndist_eq_nnnorm (a b : Œ±) : nndist a b = nnnorm (a - b) := nnreal.eq $ dist_eq_norm _ _

@[simp] lemma nnnorm_eq_zero {a : Œ±} : nnnorm a = 0 ‚Üî a = 0 :=
by simp only [nnreal.eq_iff.symm, nnreal.coe_zero, coe_nnnorm, norm_eq_zero]

@[simp] lemma nnnorm_zero : nnnorm (0 : Œ±) = 0 :=
nnreal.eq norm_zero

lemma nnnorm_add_le (g h : Œ±) : nnnorm (g + h) ‚â§ nnnorm g + nnnorm h :=
nnreal.coe_le_coe.2 $ norm_add_le g h

@[simp] lemma nnnorm_neg (g : Œ±) : nnnorm (-g) = nnnorm g :=
nnreal.eq $ norm_neg g

lemma nndist_nnnorm_nnnorm_le (g h : Œ±) : nndist (nnnorm g) (nnnorm h) ‚â§ nnnorm (g - h) :=
nnreal.coe_le_coe.2 $ dist_norm_norm_le g h

lemma of_real_norm_eq_coe_nnnorm (x : Œ≤) : ennreal.of_real ‚à•x‚à• = (nnnorm x : ennreal) :=
ennreal.of_real_eq_coe_nnreal _

lemma edist_eq_coe_nnnorm_sub (x y : Œ≤) : edist x y = (nnnorm (x - y) : ennreal) :=
by rw [edist_dist, dist_eq_norm, of_real_norm_eq_coe_nnnorm]

lemma edist_eq_coe_nnnorm (x : Œ≤) : edist x 0 = (nnnorm x : ennreal) :=
by rw [edist_eq_coe_nnnorm_sub, _root_.sub_zero]

lemma nndist_add_add_le (g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ : Œ±) :
  nndist (g‚ÇÅ + g‚ÇÇ) (h‚ÇÅ + h‚ÇÇ) ‚â§ nndist g‚ÇÅ h‚ÇÅ + nndist g‚ÇÇ h‚ÇÇ :=
nnreal.coe_le_coe.2 $ dist_add_add_le g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ

lemma edist_add_add_le (g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ : Œ±) :
  edist (g‚ÇÅ + g‚ÇÇ) (h‚ÇÅ + h‚ÇÇ) ‚â§ edist g‚ÇÅ h‚ÇÅ + edist g‚ÇÇ h‚ÇÇ :=
by { simp only [edist_nndist], norm_cast, apply nndist_add_add_le }

lemma nnnorm_sum_le {Œ≤} : ‚àÄ(s : finset Œ≤) (f : Œ≤ ‚Üí Œ±), nnnorm (‚àë a in s, f a) ‚â§ ‚àë a in s, nnnorm (f a) :=
finset.le_sum_of_subadditive nnnorm nnnorm_zero nnnorm_add_le

end nnnorm

lemma lipschitz_with.neg {Œ± : Type*} [emetric_space Œ±] {K : nnreal} {f : Œ± ‚Üí Œ≤}
  (hf : lipschitz_with K f) : lipschitz_with K (Œª x, -f x) :=
Œª x y, by simpa only [edist_dist, dist_neg_neg] using hf x y

lemma lipschitz_with.add {Œ± : Type*} [emetric_space Œ±] {Kf : nnreal} {f : Œ± ‚Üí Œ≤}
  (hf : lipschitz_with Kf f) {Kg : nnreal} {g : Œ± ‚Üí Œ≤} (hg : lipschitz_with Kg g) :
  lipschitz_with (Kf + Kg) (Œª x, f x + g x) :=
Œª x y,
calc edist (f x + g x) (f y + g y) ‚â§ edist (f x) (f y) + edist (g x) (g y) :
  edist_add_add_le _ _ _ _
... ‚â§ Kf * edist x y + Kg * edist x y :
  add_le_add (hf x y) (hg x y)
... = (Kf + Kg) * edist x y :
  (add_mul _ _ _).symm

lemma lipschitz_with.sub {Œ± : Type*} [emetric_space Œ±] {Kf : nnreal} {f : Œ± ‚Üí Œ≤}
  (hf : lipschitz_with Kf f) {Kg : nnreal} {g : Œ± ‚Üí Œ≤} (hg : lipschitz_with Kg g) :
  lipschitz_with (Kf + Kg) (Œª x, f x - g x) :=
hf.add hg.neg

lemma antilipschitz_with.add_lipschitz_with {Œ± : Type*} [metric_space Œ±] {Kf : nnreal} {f : Œ± ‚Üí Œ≤}
  (hf : antilipschitz_with Kf f) {Kg : nnreal} {g : Œ± ‚Üí Œ≤} (hg : lipschitz_with Kg g)
  (hK : Kg < Kf‚Åª¬π) :
  antilipschitz_with (Kf‚Åª¬π - Kg)‚Åª¬π (Œª x, f x + g x) :=
begin
  refine antilipschitz_with.of_le_mul_dist (Œª x y, _),
  rw [nnreal.coe_inv, ‚Üê div_eq_inv_mul],
  apply le_div_of_mul_le (nnreal.coe_pos.2 $ nnreal.sub_pos.2 hK),
  rw [mul_comm, nnreal.coe_sub (le_of_lt hK), sub_mul],
  calc ‚ÜëKf‚Åª¬π * dist x y - Kg * dist x y ‚â§ dist (f x) (f y) - dist (g x) (g y) :
    sub_le_sub (hf.mul_le_dist x y) (hg.dist_le_mul x y)
  ... ‚â§ _ : le_trans (le_abs_self _) (abs_dist_sub_le_dist_add_add _ _ _ _)
end

/-- A submodule of a normed group is also a normed group, with the restriction of the norm.
As all instances can be inferred from the submodule `s`, they are put as implicit instead of
typeclasses. -/
instance submodule.normed_group {ùïú : Type*} {_ : ring ùïú}
  {E : Type*} [normed_group E] {_ : module ùïú E} (s : submodule ùïú E) : normed_group s :=
{ norm := Œªx, norm (x : E),
  dist_eq := Œªx y, dist_eq_norm (x : E) (y : E) }

/-- normed group instance on the product of two normed groups, using the sup norm. -/
instance prod.normed_group : normed_group (Œ± √ó Œ≤) :=
{ norm := Œªx, max ‚à•x.1‚à• ‚à•x.2‚à•,
  dist_eq := assume (x y : Œ± √ó Œ≤),
    show max (dist x.1 y.1) (dist x.2 y.2) = (max ‚à•(x - y).1‚à• ‚à•(x - y).2‚à•), by simp [dist_eq_norm] }

lemma prod.norm_def (x : Œ± √ó Œ≤) : ‚à•x‚à• = (max ‚à•x.1‚à• ‚à•x.2‚à•) := rfl

lemma norm_fst_le (x : Œ± √ó Œ≤) : ‚à•x.1‚à• ‚â§ ‚à•x‚à• :=
le_max_left _ _

lemma norm_snd_le (x : Œ± √ó Œ≤) : ‚à•x.2‚à• ‚â§ ‚à•x‚à• :=
le_max_right _ _

lemma norm_prod_le_iff {x : Œ± √ó Œ≤} {r : ‚Ñù} :
  ‚à•x‚à• ‚â§ r ‚Üî ‚à•x.1‚à• ‚â§ r ‚àß ‚à•x.2‚à• ‚â§ r :=
max_le_iff

/-- normed group instance on the product of finitely many normed groups, using the sup norm. -/
instance pi.normed_group {œÄ : Œπ ‚Üí Type*} [fintype Œπ] [‚àÄi, normed_group (œÄ i)] :
  normed_group (Œ†i, œÄ i) :=
{ norm := Œªf, ((finset.sup finset.univ (Œª b, nnnorm (f b)) : nnreal) : ‚Ñù),
  dist_eq := assume x y,
    congr_arg (coe : nnreal ‚Üí ‚Ñù) $ congr_arg (finset.sup finset.univ) $ funext $ assume a,
    show nndist (x a) (y a) = nnnorm (x a - y a), from nndist_eq_nnnorm _ _ }

/-- The norm of an element in a product space is `‚â§ r` if and only if the norm of each
component is. -/
lemma pi_norm_le_iff {œÄ : Œπ ‚Üí Type*} [fintype Œπ] [‚àÄi, normed_group (œÄ i)] {r : ‚Ñù} (hr : 0 ‚â§ r)
  {x : Œ†i, œÄ i} : ‚à•x‚à• ‚â§ r ‚Üî ‚àÄi, ‚à•x i‚à• ‚â§ r :=
by { simp only [(dist_zero_right _).symm, dist_pi_le_iff hr], refl }

lemma norm_le_pi_norm {œÄ : Œπ ‚Üí Type*} [fintype Œπ] [‚àÄi, normed_group (œÄ i)] (x : Œ†i, œÄ i) (i : Œπ) :
  ‚à•x i‚à• ‚â§ ‚à•x‚à• :=
(pi_norm_le_iff (norm_nonneg x)).1 (le_refl _) i

lemma tendsto_iff_norm_tendsto_zero {f : Œπ ‚Üí Œ≤} {a : filter Œπ} {b : Œ≤} :
  tendsto f a (ùìù b) ‚Üî tendsto (Œª e, ‚à• f e - b ‚à•) a (ùìù 0) :=
by rw tendsto_iff_dist_tendsto_zero ; simp only [(dist_eq_norm _ _).symm]

lemma tendsto_zero_iff_norm_tendsto_zero {f : Œ≥ ‚Üí Œ≤} {a : filter Œ≥} :
  tendsto f a (ùìù 0) ‚Üî tendsto (Œª e, ‚à• f e ‚à•) a (ùìù 0) :=
have tendsto f a (ùìù 0) ‚Üî tendsto (Œª e, ‚à• f e - 0 ‚à•) a (ùìù 0) :=
  tendsto_iff_norm_tendsto_zero,
by simpa

lemma lim_norm (x : Œ±) : (Œªg:Œ±, ‚à•g - x‚à•) ‚Üí_{x} 0 :=
tendsto_iff_norm_tendsto_zero.1 (continuous_iff_continuous_at.1 continuous_id x)

lemma lim_norm_zero : (Œªg:Œ±, ‚à•g‚à•) ‚Üí_{0} 0 :=
by simpa using lim_norm (0:Œ±)

lemma continuous_norm : continuous (Œªg:Œ±, ‚à•g‚à•) :=
begin
  rw continuous_iff_continuous_at,
  intro x,
  rw [continuous_at, tendsto_iff_dist_tendsto_zero],
  exact squeeze_zero (Œª t, abs_nonneg _) (Œª t, abs_norm_sub_norm_le _ _) (lim_norm x)
end

lemma filter.tendsto.norm {Œ≤ : Type*} {l : filter Œ≤} {f : Œ≤ ‚Üí Œ±} {a : Œ±} (h : tendsto f l (ùìù a)) :
  tendsto (Œª x, ‚à•f x‚à•) l (ùìù ‚à•a‚à•) :=
tendsto.comp continuous_norm.continuous_at h

lemma continuous_nnnorm : continuous (nnnorm : Œ± ‚Üí nnreal) :=
continuous_subtype_mk _ continuous_norm

lemma filter.tendsto.nnnorm {Œ≤ : Type*} {l : filter Œ≤} {f : Œ≤ ‚Üí Œ±} {a : Œ±} (h : tendsto f l (ùìù a)) :
  tendsto (Œª x, nnnorm (f x)) l (ùìù (nnnorm a)) :=
tendsto.comp continuous_nnnorm.continuous_at h

/-- If `‚à•y‚à•‚Üí‚àû`, then we can assume `y‚â†x` for any fixed `x`. -/
lemma eventually_ne_of_tendsto_norm_at_top {l : filter Œ≥} {f : Œ≥ ‚Üí Œ±}
  (h : tendsto (Œª y, ‚à•f y‚à•) l at_top) (x : Œ±) :
  ‚àÄ·∂† y in l, f y ‚â† x :=
begin
  have : ‚àÄ·∂† y in l, 1 + ‚à•x‚à• ‚â§ ‚à•f y‚à• := h (mem_at_top (1 + ‚à•x‚à•)),
  refine this.mono (Œª y hy hxy, _),
  subst x,
  exact not_le_of_lt zero_lt_one (add_le_iff_nonpos_left.1 hy)
end

/-- A normed group is a uniform additive group, i.e., addition and subtraction are uniformly
continuous. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_uniform_group : uniform_add_group Œ± :=
begin
  refine ‚ü®metric.uniform_continuous_iff.2 $ assume Œµ hŒµ, ‚ü®Œµ / 2, half_pos hŒµ, assume a b h, _‚ü©‚ü©,
  rw [prod.dist_eq, max_lt_iff, dist_eq_norm, dist_eq_norm] at h,
  calc dist (a.1 - a.2) (b.1 - b.2) = ‚à•(a.1 - b.1) - (a.2 - b.2)‚à• :
      by simp [dist_eq_norm, sub_eq_add_neg]; abel
    ... ‚â§ ‚à•a.1 - b.1‚à• + ‚à•a.2 - b.2‚à• : norm_sub_le _ _
    ... < Œµ / 2 + Œµ / 2 : add_lt_add h.1 h.2
    ... = Œµ : add_halves _
end

@[priority 100] -- see Note [lower instance priority]
instance normed_top_monoid : topological_add_monoid Œ± := by apply_instance -- short-circuit type class inference
@[priority 100] -- see Note [lower instance priority]
instance normed_top_group : topological_add_group Œ± := by apply_instance -- short-circuit type class inference

end normed_group

section normed_ring

section prio
set_option default_priority 100 -- see Note [default priority]
/-- A normed ring is a ring endowed with a norm which satisfies the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class normed_ring (Œ± : Type*) extends has_norm Œ±, ring Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b)
end prio

@[priority 100] -- see Note [lower instance priority]
instance normed_ring.to_normed_group [Œ≤ : normed_ring Œ±] : normed_group Œ± := { ..Œ≤ }

lemma norm_mul_le {Œ± : Type*} [normed_ring Œ±] (a b : Œ±) : (‚à•a*b‚à•) ‚â§ (‚à•a‚à•) * (‚à•b‚à•) :=
normed_ring.norm_mul _ _

lemma norm_pow_le {Œ± : Type*} [normed_ring Œ±] (a : Œ±) : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí ‚à•a^n‚à• ‚â§ ‚à•a‚à•^n
| 1 h := by simp
| (n+2) h :=
  le_trans (norm_mul_le a (a^(n+1)))
           (mul_le_mul (le_refl _)
                       (norm_pow_le (nat.succ_pos _)) (norm_nonneg _) (norm_nonneg _))

/-- Normed ring structure on the product of two normed rings, using the sup norm. -/
instance prod.normed_ring [normed_ring Œ±] [normed_ring Œ≤] : normed_ring (Œ± √ó Œ≤) :=
{ norm_mul := assume x y,
  calc
    ‚à•x * y‚à• = ‚à•(x.1*y.1, x.2*y.2)‚à• : rfl
        ... = (max ‚à•x.1*y.1‚à•  ‚à•x.2*y.2‚à•) : rfl
        ... ‚â§ (max (‚à•x.1‚à•*‚à•y.1‚à•) (‚à•x.2‚à•*‚à•y.2‚à•)) :
          max_le_max (norm_mul_le (x.1) (y.1)) (norm_mul_le (x.2) (y.2))
        ... = (max (‚à•x.1‚à•*‚à•y.1‚à•) (‚à•y.2‚à•*‚à•x.2‚à•)) : by simp[mul_comm]
        ... ‚â§ (max (‚à•x.1‚à•) (‚à•x.2‚à•)) * (max (‚à•y.2‚à•) (‚à•y.1‚à•)) : by { apply max_mul_mul_le_max_mul_max; simp [norm_nonneg] }
        ... = (max (‚à•x.1‚à•) (‚à•x.2‚à•)) * (max (‚à•y.1‚à•) (‚à•y.2‚à•)) : by simp[max_comm]
        ... = (‚à•x‚à•*‚à•y‚à•) : rfl,
  ..prod.normed_group }
end normed_ring

@[priority 100] -- see Note [lower instance priority]
instance normed_ring_top_monoid [normed_ring Œ±] : topological_monoid Œ± :=
‚ü® continuous_iff_continuous_at.2 $ Œª x, tendsto_iff_norm_tendsto_zero.2 $
    have ‚àÄ e : Œ± √ó Œ±, e.fst * e.snd - x.fst * x.snd =
      e.fst * e.snd - e.fst * x.snd + (e.fst * x.snd - x.fst * x.snd), by intro; rw sub_add_sub_cancel,
    begin
      apply squeeze_zero,
      { intro, apply norm_nonneg },
      { simp only [this], intro, apply norm_add_le },
      { rw ‚Üêzero_add (0 : ‚Ñù), apply tendsto.add,
        { apply squeeze_zero,
          { intro, apply norm_nonneg },
          { intro t, show ‚à•t.fst * t.snd - t.fst * x.snd‚à• ‚â§ ‚à•t.fst‚à• * ‚à•t.snd - x.snd‚à•,
            rw ‚Üêmul_sub, apply norm_mul_le },
          { rw ‚Üêmul_zero (‚à•x.fst‚à•), apply tendsto.mul,
            { apply continuous_iff_continuous_at.1,
              apply continuous_norm.comp continuous_fst },
            { apply tendsto_iff_norm_tendsto_zero.1,
              apply continuous_iff_continuous_at.1,
              apply continuous_snd }}},
        { apply squeeze_zero,
          { intro, apply norm_nonneg },
          { intro t, show ‚à•t.fst * x.snd - x.fst * x.snd‚à• ‚â§ ‚à•t.fst - x.fst‚à• * ‚à•x.snd‚à•,
            rw ‚Üêsub_mul, apply norm_mul_le },
          { rw ‚Üêzero_mul (‚à•x.snd‚à•), apply tendsto.mul,
            { apply tendsto_iff_norm_tendsto_zero.1,
              apply continuous_iff_continuous_at.1,
              apply continuous_fst },
            { apply tendsto_const_nhds }}}}
    end ‚ü©

/-- A normed ring is a topological ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_top_ring [normed_ring Œ±] : topological_ring Œ± :=
‚ü® continuous_iff_continuous_at.2 $ Œª x, tendsto_iff_norm_tendsto_zero.2 $
    have ‚àÄ e : Œ±, -e - -x = -(e - x), by intro; simp,
    by simp only [this, norm_neg]; apply lim_norm ‚ü©

section prio
set_option default_priority 100 -- see Note [default priority]
/-- A normed field is a field with a norm satisfying ‚à•x y‚à• = ‚à•x‚à• ‚à•y‚à•. -/
class normed_field (Œ± : Type*) extends has_norm Œ±, field Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul' : ‚àÄ a b, norm (a * b) = norm a * norm b)

/-- A nondiscrete normed field is a normed field in which there is an element of norm different from
`0` and `1`. This makes it possible to bring any element arbitrarily close to `0` by multiplication
by the powers of any element, and thus to relate algebra and topology. -/
class nondiscrete_normed_field (Œ± : Type*) extends normed_field Œ± :=
(non_trivial : ‚àÉx:Œ±, 1<‚à•x‚à•)
end prio

@[priority 100] -- see Note [lower instance priority]
instance normed_field.to_normed_ring [i : normed_field Œ±] : normed_ring Œ± :=
{ norm_mul := by finish [i.norm_mul'], ..i }

namespace normed_field
@[simp] lemma norm_one {Œ± : Type*} [normed_field Œ±] : ‚à•(1 : Œ±)‚à• = 1 :=
have  ‚à•(1 : Œ±)‚à• * ‚à•(1 : Œ±)‚à• = ‚à•(1 : Œ±)‚à• * 1, by calc
 ‚à•(1 : Œ±)‚à• * ‚à•(1 : Œ±)‚à• = ‚à•(1 : Œ±) * (1 : Œ±)‚à• : by rw normed_field.norm_mul'
                  ... = ‚à•(1 : Œ±)‚à• * 1 : by simp,
eq_of_mul_eq_mul_left (ne_of_gt (norm_pos_iff.2 (by simp))) this

@[simp] lemma norm_mul [normed_field Œ±] (a b : Œ±) : ‚à•a * b‚à• = ‚à•a‚à• * ‚à•b‚à• :=
normed_field.norm_mul' a b

@[simp] lemma nnnorm_one [normed_field Œ±] : nnnorm (1:Œ±) = 1 := nnreal.eq $ by simp

instance normed_field.is_monoid_hom_norm [normed_field Œ±] : is_monoid_hom (norm : Œ± ‚Üí ‚Ñù) :=
{ map_one := norm_one, map_mul := norm_mul }

@[simp] lemma norm_pow [normed_field Œ±] (a : Œ±) : ‚àÄ (n : ‚Ñï), ‚à•a^n‚à• = ‚à•a‚à•^n :=
is_monoid_hom.map_pow norm a

@[simp] lemma norm_prod {Œ≤ : Type*} [normed_field Œ±] (s : finset Œ≤) (f : Œ≤ ‚Üí Œ±) :
  ‚à•‚àè b in s, f b‚à• = ‚àè b in s, ‚à•f b‚à• :=
eq.symm (s.prod_hom norm)

@[simp] lemma norm_div {Œ± : Type*} [normed_field Œ±] (a b : Œ±) : ‚à•a/b‚à• = ‚à•a‚à•/‚à•b‚à• :=
begin
  classical,
  by_cases hb : b = 0, {simp [hb]},
  apply eq_div_of_mul_eq,
  { apply ne_of_gt, apply norm_pos_iff.mpr hb },
  { rw [‚Üênormed_field.norm_mul, div_mul_cancel _ hb] }
end

@[simp] lemma norm_inv {Œ± : Type*} [normed_field Œ±] (a : Œ±) : ‚à•a‚Åª¬π‚à• = ‚à•a‚à•‚Åª¬π :=
by simp only [inv_eq_one_div, norm_div, norm_one]

@[simp] lemma nnnorm_inv {Œ± : Type*} [normed_field Œ±] (a : Œ±) : nnnorm (a‚Åª¬π) = (nnnorm a)‚Åª¬π :=
nnreal.eq $ by simp

@[simp] lemma norm_fpow {Œ± : Type*} [normed_field Œ±] (a : Œ±) : ‚àÄn : ‚Ñ§,
  ‚à•a^n‚à• = ‚à•a‚à•^n
| (n : ‚Ñï) := norm_pow a n
| -[1+ n] := by simp [fpow_neg_succ_of_nat]

lemma exists_one_lt_norm (Œ± : Type*) [i : nondiscrete_normed_field Œ±] : ‚àÉx : Œ±, 1 < ‚à•x‚à• :=
i.non_trivial

lemma exists_norm_lt_one (Œ± : Type*) [nondiscrete_normed_field Œ±] : ‚àÉx : Œ±, 0 < ‚à•x‚à• ‚àß ‚à•x‚à• < 1 :=
begin
  rcases exists_one_lt_norm Œ± with ‚ü®y, hy‚ü©,
  refine ‚ü®y‚Åª¬π, _, _‚ü©,
  { simp only [inv_eq_zero, ne.def, norm_pos_iff],
    assume h,
    rw ‚Üê norm_eq_zero at h,
    rw h at hy,
    exact lt_irrefl _ (lt_trans zero_lt_one hy) },
  { simp [inv_lt_one hy] }
end

lemma exists_lt_norm (Œ± : Type*) [nondiscrete_normed_field Œ±]
  (r : ‚Ñù) : ‚àÉ x : Œ±, r < ‚à•x‚à• :=
let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ± in
let ‚ü®n, hn‚ü© := pow_unbounded_of_one_lt r hw in
‚ü®w^n, by rwa norm_pow‚ü©

lemma exists_norm_lt (Œ± : Type*) [nondiscrete_normed_field Œ±]
  {r : ‚Ñù} (hr : 0 < r) : ‚àÉ x : Œ±, 0 < ‚à•x‚à• ‚àß ‚à•x‚à• < r :=
let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ± in
let ‚ü®n, hle, hlt‚ü© := exists_int_pow_near' hr hw in
‚ü®w^n, by { rw norm_fpow; exact fpow_pos_of_pos (lt_trans zero_lt_one hw) _},
by rwa norm_fpow‚ü©

lemma punctured_nhds_ne_bot {Œ± : Type*} [nondiscrete_normed_field Œ±] (x : Œ±) :
  nhds_within x (-{x}) ‚â† ‚ä• :=
begin
  rw [‚Üê mem_closure_iff_nhds_within_ne_bot, metric.mem_closure_iff],
  rintros Œµ Œµ0,
  rcases normed_field.exists_norm_lt Œ± Œµ0 with ‚ü®b, hb0, hbŒµ‚ü©,
  refine ‚ü®x + b, mt (set.mem_singleton_iff.trans add_right_eq_self).1 $ norm_pos_iff.1 hb0, _‚ü©,
  rwa [dist_comm, dist_eq_norm, add_sub_cancel'],
end

lemma tendsto_inv [normed_field Œ±] {r : Œ±} (r0 : r ‚â† 0) : tendsto (Œªq, q‚Åª¬π) (ùìù r) (ùìù r‚Åª¬π) :=
begin
  refine (nhds_basis_closed_ball.tendsto_iff nhds_basis_closed_ball).2 (ŒªŒµ Œµpos, _),
  let Œ¥ := min (Œµ/2 * ‚à•r‚à•^2) (‚à•r‚à•/2),
  have norm_r_pos : 0 < ‚à•r‚à• := norm_pos_iff.mpr r0,
  have A : 0 < Œµ / 2 * ‚à•r‚à• ^ 2 := mul_pos (half_pos Œµpos) (pow_pos norm_r_pos 2),
  have Œ¥pos : 0 < Œ¥, by simp [half_pos norm_r_pos, A],
  refine ‚ü®Œ¥, Œ¥pos, Œª x hx, _‚ü©,
  have rx : ‚à•r‚à•/2 ‚â§ ‚à•x‚à• := calc
    ‚à•r‚à•/2 = ‚à•r‚à• - ‚à•r‚à•/2 : by ring
    ... ‚â§ ‚à•r‚à• - ‚à•r - x‚à• :
    begin
      apply sub_le_sub (le_refl _),
      rw [‚Üê dist_eq_norm, dist_comm],
      exact le_trans hx (min_le_right _ _)
    end
    ... ‚â§ ‚à•r - (r - x)‚à• : norm_sub_norm_le r (r - x)
    ... = ‚à•x‚à• : by simp [sub_sub_cancel],
  have norm_x_pos : 0 < ‚à•x‚à• := lt_of_lt_of_le (half_pos norm_r_pos) rx,
  have : x‚Åª¬π - r‚Åª¬π = (r - x) * x‚Åª¬π * r‚Åª¬π,
    by rw [sub_mul, sub_mul, mul_inv_cancel (norm_pos_iff.mp norm_x_pos), one_mul, mul_comm,
           ‚Üê mul_assoc, inv_mul_cancel r0, one_mul],
  calc dist x‚Åª¬π r‚Åª¬π = ‚à•x‚Åª¬π - r‚Åª¬π‚à• : dist_eq_norm _ _
  ... ‚â§ ‚à•r-x‚à• * ‚à•x‚à•‚Åª¬π * ‚à•r‚à•‚Åª¬π : by rw [this, norm_mul, norm_mul, norm_inv, norm_inv]
  ... ‚â§ (Œµ/2 * ‚à•r‚à•^2) * (2 * ‚à•r‚à•‚Åª¬π) * (‚à•r‚à•‚Åª¬π) : begin
    apply_rules [mul_le_mul, inv_nonneg.2, le_of_lt A, norm_nonneg, inv_nonneg.2, mul_nonneg,
                 (inv_le_inv norm_x_pos norm_r_pos).2, le_refl],
    show ‚à•r - x‚à• ‚â§ Œµ / 2 * ‚à•r‚à• ^ 2,
      by { rw [‚Üê dist_eq_norm, dist_comm], exact le_trans hx (min_le_left _ _) },
    show ‚à•x‚à•‚Åª¬π ‚â§ 2 * ‚à•r‚à•‚Åª¬π,
    { convert (inv_le_inv norm_x_pos (half_pos norm_r_pos)).2 rx,
      rw [inv_div, div_eq_inv_mul, mul_comm] },
    show (0 : ‚Ñù) ‚â§ 2, by norm_num
  end
  ... = Œµ * (‚à•r‚à• * ‚à•r‚à•‚Åª¬π)^2 : by { generalize : ‚à•r‚à•‚Åª¬π = u, ring }
  ... = Œµ : by { rw [mul_inv_cancel (ne.symm (ne_of_lt norm_r_pos))], simp }
end

lemma continuous_on_inv [normed_field Œ±] : continuous_on (Œª(x:Œ±), x‚Åª¬π) {x | x ‚â† 0} :=
begin
  assume x hx,
  apply continuous_at.continuous_within_at,
  exact (tendsto_inv hx)
end

end normed_field

instance : normed_field ‚Ñù :=
{ norm := Œª x, abs x,
  dist_eq := assume x y, rfl,
  norm_mul' := abs_mul }

instance : nondiscrete_normed_field ‚Ñù :=
{ non_trivial := ‚ü®2, by { unfold norm, rw abs_of_nonneg; norm_num }‚ü© }

/-- If a function converges to a nonzero value, its inverse converges to the inverse of this value.
We use the name `tendsto.inv'` as `tendsto.inv` is already used in multiplicative topological
groups. -/
lemma filter.tendsto.inv' [normed_field Œ±] {l : filter Œ≤} {f : Œ≤ ‚Üí Œ±} {y : Œ±}
  (hy : y ‚â† 0) (h : tendsto f l (ùìù y)) :
  tendsto (Œªx, (f x)‚Åª¬π) l (ùìù y‚Åª¬π) :=
(normed_field.tendsto_inv hy).comp h

lemma filter.tendsto.div [normed_field Œ±] {l : filter Œ≤} {f g : Œ≤ ‚Üí Œ±} {x y : Œ±}
  (hf : tendsto f l (ùìù x)) (hg : tendsto g l (ùìù y)) (hy : y ‚â† 0) :
  tendsto (Œªa, f a / g a) l (ùìù (x / y)) :=
hf.mul (hg.inv' hy)

lemma filter.tendsto.div_const [normed_field Œ±] {l : filter Œ≤} {f : Œ≤ ‚Üí Œ±} {x y : Œ±}
  (hf : tendsto f l (ùìù x)) : tendsto (Œªa, f a / y) l (ùìù (x / y)) :=
by { simp only [div_eq_inv_mul], exact tendsto_const_nhds.mul hf }

/-- Continuity at a point of the result of dividing two functions
continuous at that point, where the denominator is nonzero. -/
lemma continuous_at.div [topological_space Œ±] [normed_field Œ≤] {f : Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} {x : Œ±}
    (hf : continuous_at f x) (hg : continuous_at g x) (hnz : g x ‚â† 0) :
  continuous_at (Œª x, f x / g x) x :=
hf.div hg hnz

namespace real

lemma norm_eq_abs (r : ‚Ñù) : ‚à•r‚à• = abs r := rfl

@[simp] lemma norm_coe_nat (n : ‚Ñï) : ‚à•(n : ‚Ñù)‚à• = n := abs_of_nonneg n.cast_nonneg

@[simp] lemma nnnorm_coe_nat (n : ‚Ñï) : nnnorm (n : ‚Ñù) = n := nnreal.eq $ by simp

@[simp] lemma norm_two : ‚à•(2:‚Ñù)‚à• = 2 := abs_of_pos (@two_pos ‚Ñù _)

@[simp] lemma nnnorm_two : nnnorm (2:‚Ñù) = 2 := nnreal.eq $ by simp

end real

@[simp] lemma norm_norm [normed_group Œ±] (x : Œ±) : ‚à•‚à•x‚à•‚à• = ‚à•x‚à• :=
by rw [real.norm_eq_abs, abs_of_nonneg (norm_nonneg _)]

@[simp] lemma nnnorm_norm [normed_group Œ±] (a : Œ±) : nnnorm ‚à•a‚à• = nnnorm a :=
by simp only [nnnorm, norm_norm]

instance : normed_ring ‚Ñ§ :=
{ norm := Œª n, ‚à•(n : ‚Ñù)‚à•,
  norm_mul := Œª m n, le_of_eq $ by simp only [norm, int.cast_mul, abs_mul],
  dist_eq := Œª m n, by simp only [int.dist_eq, norm, int.cast_sub] }

@[norm_cast] lemma int.norm_cast_real (m : ‚Ñ§) : ‚à•(m : ‚Ñù)‚à• = ‚à•m‚à• := rfl

instance : normed_field ‚Ñö :=
{ norm := Œª r, ‚à•(r : ‚Ñù)‚à•,
  norm_mul' := Œª r‚ÇÅ r‚ÇÇ, by simp only [norm, rat.cast_mul, abs_mul],
  dist_eq := Œª r‚ÇÅ r‚ÇÇ, by simp only [rat.dist_eq, norm, rat.cast_sub] }

instance : nondiscrete_normed_field ‚Ñö :=
{ non_trivial := ‚ü®2, by { unfold norm, rw abs_of_nonneg; norm_num }‚ü© }

@[norm_cast, simp] lemma rat.norm_cast_real (r : ‚Ñö) : ‚à•(r : ‚Ñù)‚à• = ‚à•r‚à• := rfl

@[norm_cast, simp] lemma int.norm_cast_rat (m : ‚Ñ§) : ‚à•(m : ‚Ñö)‚à• = ‚à•m‚à• :=
by rw [‚Üê rat.norm_cast_real, ‚Üê int.norm_cast_real]; congr' 1; norm_cast

section normed_space

section prio
set_option default_priority 920 -- see Note [default priority]. Here, we set a rather high priority,
-- to take precedence over `semiring.to_semimodule` as this leads to instance paths with better
-- unification properties.
-- see Note[vector space definition] for why we extend `semimodule`.
/-- A normed space over a normed field is a vector space endowed with a norm which satisfies the
equality `‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•`. We require only `‚à•c ‚Ä¢ x‚à• ‚â§ ‚à•c‚à• ‚à•x‚à•` in the definition, then prove
`‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•` in `norm_smul`. -/
class normed_space (Œ± : Type*) (Œ≤ : Type*) [normed_field Œ±] [normed_group Œ≤]
  extends semimodule Œ± Œ≤ :=
(norm_smul_le : ‚àÄ (a:Œ±) (b:Œ≤), ‚à•a ‚Ä¢ b‚à• ‚â§ ‚à•a‚à• * ‚à•b‚à•)
end prio

variables [normed_field Œ±] [normed_group Œ≤]

instance normed_field.to_normed_space : normed_space Œ± Œ± :=
{ norm_smul_le := Œª a b, le_of_eq (normed_field.norm_mul a b) }

lemma norm_smul [normed_space Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚à•s ‚Ä¢ x‚à• = ‚à•s‚à• * ‚à•x‚à• :=
begin
  classical,
  by_cases h : s = 0,
  { simp [h] },
  { refine le_antisymm (normed_space.norm_smul_le s x) _,
    calc ‚à•s‚à• * ‚à•x‚à• = ‚à•s‚à• * ‚à•s‚Åª¬π ‚Ä¢ s ‚Ä¢ x‚à•     : by rw [inv_smul_smul' h]
               ... ‚â§ ‚à•s‚à• * (‚à•s‚Åª¬π‚à• * ‚à•s ‚Ä¢ x‚à•) : _
               ... = ‚à•s ‚Ä¢ x‚à•                 : _,
    exact mul_le_mul_of_nonneg_left (normed_space.norm_smul_le _ _) (norm_nonneg _),
    rw [normed_field.norm_inv, ‚Üê mul_assoc, mul_inv_cancel, one_mul],
    rwa [ne.def, norm_eq_zero] }
end

lemma dist_smul [normed_space Œ± Œ≤] (s : Œ±) (x y : Œ≤) : dist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚à•s‚à• * dist x y :=
by simp only [dist_eq_norm, (norm_smul _ _).symm, smul_sub]

lemma nnnorm_smul [normed_space Œ± Œ≤] (s : Œ±) (x : Œ≤) : nnnorm (s ‚Ä¢ x) = nnnorm s * nnnorm x :=
nnreal.eq $ norm_smul s x

lemma nndist_smul [normed_space Œ± Œ≤] (s : Œ±) (x y : Œ≤) :
  nndist (s ‚Ä¢ x) (s ‚Ä¢ y) = nnnorm s * nndist x y :=
nnreal.eq $ dist_smul s x y

variables {E : Type*} {F : Type*}
[normed_group E] [normed_space Œ± E] [normed_group F] [normed_space Œ± F]

@[priority 100] -- see Note [lower instance priority]
instance normed_space.topological_vector_space : topological_vector_space Œ± E :=
begin
  refine { continuous_smul := continuous_iff_continuous_at.2 $
    Œª p, tendsto_iff_norm_tendsto_zero.2 _ },
  refine squeeze_zero (Œª _, norm_nonneg _) _ _,
  { exact Œª q, ‚à•q.1 - p.1‚à• * ‚à•q.2‚à• + ‚à•p.1‚à• * ‚à•q.2 - p.2‚à• },
  { intro q,
    rw [‚Üê sub_add_sub_cancel, ‚Üê norm_smul, ‚Üê norm_smul, smul_sub, sub_smul],
    exact norm_add_le _ _ },
  { conv { congr, skip, skip, congr, rw [‚Üê zero_add (0:‚Ñù)], congr,
      rw [‚Üê zero_mul ‚à•p.2‚à•], skip, rw [‚Üê mul_zero ‚à•p.1‚à•] },
    exact ((tendsto_iff_norm_tendsto_zero.1 (continuous_fst.tendsto p)).mul
      (continuous_snd.tendsto p).norm).add
        (tendsto_const_nhds.mul (tendsto_iff_norm_tendsto_zero.1 (continuous_snd.tendsto p))) }
end

/-- In a normed space over a nondiscrete normed field, only `‚ä§` submodule has a nonempty interior.
See also `submodule.eq_top_of_nonempty_interior'` for a `topological_module` version.  -/
lemma submodule.eq_top_of_nonempty_interior {Œ± E : Type*} [nondiscrete_normed_field Œ±]
  [normed_group E] [normed_space Œ± E] (s : submodule Œ± E) (hs : (interior (s:set E)).nonempty) :
  s = ‚ä§ :=
begin
  refine s.eq_top_of_nonempty_interior' _ hs,
  simp only [is_unit_iff_ne_zero, @ne.def Œ±, set.mem_singleton_iff.symm],
  exact normed_field.punctured_nhds_ne_bot _
end

theorem closure_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : 0 < r) :
  closure (ball x r) = closed_ball x r :=
begin
  refine set.subset.antisymm closure_ball_subset_closed_ball (Œª y hy, _),
  have : continuous_within_at (Œª c : ‚Ñù, c ‚Ä¢ (y - x) + x) (set.Ico 0 1) 1 :=
    ((continuous_id.smul continuous_const).add continuous_const).continuous_within_at,
  convert this.mem_closure _ _,
  { rw [one_smul, sub_add_cancel] },
  { simp [closure_Ico (@zero_lt_one ‚Ñù _), zero_le_one] },
  { rintros c ‚ü®hc0, hc1‚ü©,
    rw [set.mem_preimage, mem_ball, dist_eq_norm, add_sub_cancel, norm_smul, real.norm_eq_abs,
      abs_of_nonneg hc0, mul_comm, ‚Üê mul_one r],
    rw [mem_closed_ball, dist_eq_norm] at hy,
    apply mul_lt_mul'; assumption }
end

theorem frontier_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : 0 < r) :
  frontier (ball x r) = sphere x r :=
begin
  rw [frontier, closure_ball x hr, interior_eq_of_open is_open_ball],
  ext x, exact (@eq_iff_le_not_lt ‚Ñù _ _ _).symm
end

theorem interior_closed_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : 0 < r) :
  interior (closed_ball x r) = ball x r :=
begin
  refine set.subset.antisymm _ ball_subset_interior_closed_ball,
  intros y hy,
  rcases le_iff_lt_or_eq.1 (mem_closed_ball.1 $ interior_subset hy) with hr|rfl, { exact hr },
  set f : ‚Ñù ‚Üí E := Œª c : ‚Ñù, c ‚Ä¢ (y - x) + x,
  suffices : f ‚Åª¬π' closed_ball x (dist y x) ‚äÜ set.Icc (-1) 1,
  { have hfc : continuous f := (continuous_id.smul continuous_const).add continuous_const,
    have hf1 : (1:‚Ñù) ‚àà f ‚Åª¬π' (interior (closed_ball x $ dist y x)), by simpa [f],
    have h1 : (1:‚Ñù) ‚àà interior (set.Icc (-1:‚Ñù) 1) :=
      interior_mono this (preimage_interior_subset_interior_preimage hfc hf1),
    contrapose h1,
    simp },
  intros c hc,
  rw [set.mem_Icc, ‚Üê abs_le, ‚Üê real.norm_eq_abs, ‚Üê mul_le_mul_right hr],
  simpa [f, dist_eq_norm, norm_smul] using hc
end

theorem interior_closed_ball' [normed_space ‚Ñù E] (x : E) (r : ‚Ñù) (hE : ‚àÉ z : E, z ‚â† 0) :
  interior (closed_ball x r) = ball x r :=
begin
  rcases lt_trichotomy r 0 with hr|rfl|hr,
  { simp [closed_ball_eq_empty_iff_neg.2 hr, ball_eq_empty_iff_nonpos.2 (le_of_lt hr)] },
  { suffices : x ‚àâ interior {x},
    { rw [ball_zero, closed_ball_zero, ‚Üê set.subset_empty_iff],
      intros y hy,
      obtain rfl : y = x := set.mem_singleton_iff.1 (interior_subset hy),
      exact this hy },
    rw [‚Üê set.mem_compl_iff, ‚Üê closure_compl],
    rcases hE with ‚ü®z, hz‚ü©,
    suffices : (Œª c : ‚Ñù, x + c ‚Ä¢ z) 0 ‚àà closure (-{x} : set E),
      by simpa only [zero_smul, add_zero] using this,
    have : (0:‚Ñù) ‚àà closure (set.Ioi (0:‚Ñù)), by simp [closure_Ioi],
    refine (continuous_const.add (continuous_id.smul
      continuous_const)).continuous_within_at.mem_closure this _,
    intros c hc,
    simp [smul_eq_zero, hz, ne_of_gt hc] },
  { exact interior_closed_ball x hr }
end

theorem frontier_closed_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : 0 < r) :
  frontier (closed_ball x r) = sphere x r :=
by rw [frontier, closure_eq_of_is_closed is_closed_ball, interior_closed_ball x hr,
  closed_ball_diff_ball]

theorem frontier_closed_ball' [normed_space ‚Ñù E] (x : E) (r : ‚Ñù) (hE : ‚àÉ z : E, z ‚â† 0) :
  frontier (closed_ball x r) = sphere x r :=
by rw [frontier, closure_eq_of_is_closed is_closed_ball, interior_closed_ball' x r hE,
  closed_ball_diff_ball]

open normed_field

/-- If there is a scalar `c` with `‚à•c‚à•>1`, then any element can be moved by scalar multiplication to
any shell of width `‚à•c‚à•`. Also recap information on the norm of the rescaling element that shows
up in applications. -/
lemma rescale_to_shell {c : Œ±} (hc : 1 < ‚à•c‚à•) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E} (hx : x ‚â† 0) :
  ‚àÉd:Œ±, d ‚â† 0 ‚àß ‚à•d ‚Ä¢ x‚à• ‚â§ Œµ ‚àß (Œµ/‚à•c‚à• ‚â§ ‚à•d ‚Ä¢ x‚à•) ‚àß (‚à•d‚à•‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à•) :=
begin
  have xŒµpos : 0 < ‚à•x‚à•/Œµ := div_pos_of_pos_of_pos (norm_pos_iff.2 hx) Œµpos,
  rcases exists_int_pow_near xŒµpos hc with ‚ü®n, hn‚ü©,
  have cpos : 0 < ‚à•c‚à• := lt_trans (zero_lt_one : (0 :‚Ñù) < 1) hc,
  have cnpos : 0 < ‚à•c^(n+1)‚à• := by { rw norm_fpow, exact lt_trans xŒµpos hn.2 },
  refine ‚ü®(c^(n+1))‚Åª¬π, _, _, _, _‚ü©,
  show (c ^ (n + 1))‚Åª¬π  ‚â† 0,
    by rwa [ne.def, inv_eq_zero, ‚Üê ne.def, ‚Üê norm_pos_iff],
  show ‚à•(c ^ (n + 1))‚Åª¬π ‚Ä¢ x‚à• ‚â§ Œµ,
  { rw [norm_smul, norm_inv, ‚Üê div_eq_inv_mul, div_le_iff cnpos, mul_comm, norm_fpow],
    exact (div_le_iff Œµpos).1 (le_of_lt (hn.2)) },
  show Œµ / ‚à•c‚à• ‚â§ ‚à•(c ^ (n + 1))‚Åª¬π ‚Ä¢ x‚à•,
  { rw [div_le_iff cpos, norm_smul, norm_inv, norm_fpow, fpow_add (ne_of_gt cpos),
        fpow_one, mul_inv', mul_comm, ‚Üê mul_assoc, ‚Üê mul_assoc, mul_inv_cancel (ne_of_gt cpos),
        one_mul, ‚Üê div_eq_inv_mul, le_div_iff (fpow_pos_of_pos cpos _), mul_comm],
    exact (le_div_iff Œµpos).1 hn.1 },
  show ‚à•(c ^ (n + 1))‚Åª¬π‚à•‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à•,
  { have : Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à• = Œµ‚Åª¬π * ‚à•x‚à• * ‚à•c‚à•, by ring,
    rw [norm_inv, inv_inv', norm_fpow, fpow_add (ne_of_gt cpos), fpow_one, this, ‚Üê div_eq_inv_mul],
    exact mul_le_mul_of_nonneg_right hn.1 (norm_nonneg _) }
end

/-- The product of two normed spaces is a normed space, with the sup norm. -/
instance : normed_space Œ± (E √ó F) :=
{ norm_smul_le := Œª s x, le_of_eq $ by simp [prod.norm_def, norm_smul, mul_max_of_nonneg],
  -- TODO: without the next two lines Lean unfolds `‚â§` to `real.le`
  add_smul := Œª r x y, prod.ext (add_smul _ _ _) (add_smul _ _ _),
  smul_add := Œª r x y, prod.ext (smul_add _ _ _) (smul_add _ _ _),
  ..prod.normed_group,
  ..prod.semimodule }

/-- The product of finitely many normed spaces is a normed space, with the sup norm. -/
instance pi.normed_space {E : Œπ ‚Üí Type*} [fintype Œπ] [‚àÄi, normed_group (E i)]
  [‚àÄi, normed_space Œ± (E i)] : normed_space Œ± (Œ†i, E i) :=
{ norm_smul_le := Œª a f, le_of_eq $
    show (‚Üë(finset.sup finset.univ (Œª (b : Œπ), nnnorm (a ‚Ä¢ f b))) : ‚Ñù) =
      nnnorm a * ‚Üë(finset.sup finset.univ (Œª (b : Œπ), nnnorm (f b))),
    by simp only [(nnreal.coe_mul _ _).symm, nnreal.mul_finset_sup, nnnorm_smul] }

/-- A subspace of a normed space is also a normed space, with the restriction of the norm. -/
instance submodule.normed_space {ùïú : Type*} [normed_field ùïú]
  {E : Type*} [normed_group E] [normed_space ùïú E] (s : submodule ùïú E) : normed_space ùïú s :=
{ norm_smul_le := Œªc x, le_of_eq $ norm_smul c (x : E) }

end normed_space

section normed_algebra

section prio
set_option default_priority 100 -- see Note [default priority]
/-- A normed algebra `ùïú'` over `ùïú` is an algebra endowed with a norm for which the embedding of
`ùïú` in `ùïú'` is an isometry. -/
class normed_algebra (ùïú : Type*) (ùïú' : Type*) [normed_field ùïú] [normed_ring ùïú']
  extends algebra ùïú ùïú' :=
(norm_algebra_map_eq : ‚àÄx:ùïú, ‚à•algebra_map ùïú ùïú' x‚à• = ‚à•x‚à•)
end prio

@[simp] lemma norm_algebra_map_eq {ùïú : Type*} (ùïú' : Type*) [normed_field ùïú] [normed_ring ùïú']
  [h : normed_algebra ùïú ùïú'] (x : ùïú) : ‚à•algebra_map ùïú ùïú' x‚à• = ‚à•x‚à• :=
normed_algebra.norm_algebra_map_eq _

@[priority 100]
instance normed_algebra.to_normed_space (ùïú : Type*) (ùïú' : Type*) [normed_field ùïú] [normed_ring ùïú']
  [h : normed_algebra ùïú ùïú'] : normed_space ùïú ùïú' :=
{ norm_smul_le := Œª s x, calc
    ‚à•s ‚Ä¢ x‚à• = ‚à•((algebra_map ùïú ùïú') s) * x‚à• : by { rw h.smul_def', refl }
    ... ‚â§ ‚à•algebra_map ùïú ùïú' s‚à• * ‚à•x‚à• : normed_ring.norm_mul _ _
    ... = ‚à•s‚à• * ‚à•x‚à• : by rw norm_algebra_map_eq,
  ..h }

instance normed_algebra.id (ùïú : Type*) [normed_field ùïú] : normed_algebra ùïú ùïú :=
{ norm_algebra_map_eq := by simp,
.. algebra.id ùïú}

end normed_algebra

section restrict_scalars

variables (ùïú : Type*) (ùïú' : Type*) [normed_field ùïú] [normed_field ùïú'] [normed_algebra ùïú ùïú']
{E : Type*} [normed_group E] [normed_space ùïú' E]

/-- `ùïú`-normed space structure induced by a `ùïú'`-normed space structure when `ùïú'` is a
normed algebra over `ùïú`. Not registered as an instance as `ùïú'` can not be inferred. -/
-- We could add a type synonym equipped with this as an instance,
-- as we've done for `module.restrict_scalars`.
def normed_space.restrict_scalars : normed_space ùïú E :=
{ norm_smul_le := Œªc x, le_of_eq $ begin
    change ‚à•(algebra_map ùïú ùïú' c) ‚Ä¢ x‚à• = ‚à•c‚à• * ‚à•x‚à•,
    simp [norm_smul]
  end,
  ..module.restrict_scalars' ùïú ùïú' E }

end restrict_scalars

section summable
open_locale classical
open finset filter
variables [normed_group Œ±]

@[nolint ge_or_gt] -- see Note [nolint_ge]
lemma cauchy_seq_finset_iff_vanishing_norm {f : Œπ ‚Üí Œ±} :
  cauchy_seq (Œª s : finset Œπ, ‚àë i in s, f i) ‚Üî ‚àÄŒµ > (0 : ‚Ñù), ‚àÉs:finset Œπ, ‚àÄt, disjoint t s ‚Üí ‚à• ‚àë i in t, f i ‚à• < Œµ :=
begin
  simp only [cauchy_seq_finset_iff_vanishing, metric.mem_nhds_iff, exists_imp_distrib],
  split,
  { assume h Œµ hŒµ, refine h {x | ‚à•x‚à• < Œµ} Œµ hŒµ _, rw [ball_0_eq Œµ] },
  { assume h s Œµ hŒµ hs,
    rcases h Œµ hŒµ with ‚ü®t, ht‚ü©,
    refine ‚ü®t, assume u hu, hs _‚ü©,
    rw [ball_0_eq],
    exact ht u hu }
end

@[nolint ge_or_gt] -- see Note [nolint_ge]
lemma summable_iff_vanishing_norm [complete_space Œ±] {f : Œπ ‚Üí Œ±} :
  summable f ‚Üî ‚àÄŒµ > (0 : ‚Ñù), ‚àÉs:finset Œπ, ‚àÄt, disjoint t s ‚Üí ‚à• ‚àë i in t, f i ‚à• < Œµ :=
by rw [summable_iff_cauchy_seq_finset, cauchy_seq_finset_iff_vanishing_norm]

lemma cauchy_seq_finset_of_norm_bounded {f : Œπ ‚Üí Œ±} (g : Œπ ‚Üí ‚Ñù) (hg : summable g)
  (h : ‚àÄi, ‚à•f i‚à• ‚â§ g i) : cauchy_seq (Œª s : finset Œπ, ‚àë i in s, f i) :=
cauchy_seq_finset_iff_vanishing_norm.2 $ assume Œµ hŒµ,
  let ‚ü®s, hs‚ü© := summable_iff_vanishing_norm.1 hg Œµ hŒµ in
  ‚ü®s, assume t ht,
    have ‚à•‚àë i in t, g i‚à• < Œµ := hs t ht,
    have nn : 0 ‚â§ ‚àë i in t, g i := finset.sum_nonneg (assume a _, le_trans (norm_nonneg _) (h a)),
    lt_of_le_of_lt (norm_sum_le_of_le t (Œª i _, h i)) $
      by rwa [real.norm_eq_abs, abs_of_nonneg nn] at this‚ü©

lemma cauchy_seq_finset_of_summable_norm {f : Œπ ‚Üí Œ±} (hf : summable (Œªa, ‚à•f a‚à•)) :
  cauchy_seq (Œª s : finset Œπ, ‚àë a in s, f a) :=
cauchy_seq_finset_of_norm_bounded _ hf (assume i, le_refl _)

/-- If a function `f` is summable in norm, and along some sequence of finsets exhausting the space
its sum is converging to a limit `a`, then this holds along all finsets, i.e., `f` is summable
with sum `a`. -/
lemma has_sum_of_subseq_of_summable {f : Œπ ‚Üí Œ±} (hf : summable (Œªa, ‚à•f a‚à•))
  {s : Œ≤ ‚Üí finset Œπ} {p : filter Œ≤} (hp : p ‚â† ‚ä•)
  (hs : tendsto s p at_top) {a : Œ±} (ha : tendsto (Œª b, ‚àë i in s b, f i) p (ùìù a)) :
  has_sum f a :=
tendsto_nhds_of_cauchy_seq_of_subseq (cauchy_seq_finset_of_summable_norm hf) hp hs ha

/-- If `‚àë' i, ‚à•f i‚à•` is summable, then `‚à•(‚àë' i, f i)‚à• ‚â§ (‚àë' i, ‚à•f i‚à•)`. Note that we do not assume
that `‚àë' i, f i` is summable, and it might not be the case if `Œ±` is not a complete space. -/
lemma norm_tsum_le_tsum_norm {f : Œπ ‚Üí Œ±} (hf : summable (Œªi, ‚à•f i‚à•)) :
  ‚à•(‚àë'i, f i)‚à• ‚â§ (‚àë' i, ‚à•f i‚à•) :=
begin
  by_cases h : summable f,
  { have h‚ÇÅ : tendsto (Œªs:finset Œπ, ‚à•‚àë i in s, f i‚à•) at_top (ùìù ‚à•(‚àë' i, f i)‚à•) :=
      (continuous_norm.tendsto _).comp h.has_sum,
    have h‚ÇÇ : tendsto (Œªs:finset Œπ, ‚àë i in s, ‚à•f i‚à•) at_top (ùìù (‚àë' i, ‚à•f i‚à•)) :=
      hf.has_sum,
    exact le_of_tendsto_of_tendsto' at_top_ne_bot h‚ÇÅ h‚ÇÇ (assume s, norm_sum_le _ _) },
  { rw tsum_eq_zero_of_not_summable h,
    simp [tsum_nonneg] }
end

lemma has_sum_iff_tendsto_nat_of_summable_norm {f : ‚Ñï ‚Üí Œ±} {a : Œ±} (hf : summable (Œªi, ‚à•f i‚à•)) :
  has_sum f a ‚Üî tendsto (Œªn:‚Ñï, ‚àë i in range n, f i) at_top (ùìù a) :=
‚ü®Œª h, h.tendsto_sum_nat,
Œª h, has_sum_of_subseq_of_summable hf at_top_ne_bot tendsto_finset_range h‚ü©

variable [complete_space Œ±]

lemma summable_of_norm_bounded {f : Œπ ‚Üí Œ±} (g : Œπ ‚Üí ‚Ñù) (hg : summable g) (h : ‚àÄi, ‚à•f i‚à• ‚â§ g i) :
  summable f :=
by { rw summable_iff_cauchy_seq_finset, exact cauchy_seq_finset_of_norm_bounded g hg h }

lemma summable_of_nnnorm_bounded {f : Œπ ‚Üí Œ±} (g : Œπ ‚Üí nnreal) (hg : summable g)
  (h : ‚àÄi, nnnorm (f i) ‚â§ g i) : summable f :=
summable_of_norm_bounded (Œª i, (g i : ‚Ñù)) (nnreal.summable_coe.2 hg) (Œª i, by exact_mod_cast h i)

lemma summable_of_summable_norm {f : Œπ ‚Üí Œ±} (hf : summable (Œªa, ‚à•f a‚à•)) : summable f :=
summable_of_norm_bounded _ hf (assume i, le_refl _)

lemma summable_of_summable_nnnorm {f : Œπ ‚Üí Œ±} (hf : summable (Œªa, nnnorm (f a))) : summable f :=
summable_of_nnnorm_bounded _ hf (assume i, le_refl _)

end summable
