/-
Copyright (c) 2019 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou
-/
import measure_theory.l1_space

/-!
# Density of simple functions

Show that each Borel measurable function can be approximated,
both pointwise and in `L¬π` norm, by a sequence of simple functions.
-/

noncomputable theory
open set filter topological_space
open_locale classical topological_space

universes u v
variables {Œ± : Type u} {Œ≤ : Type v} {Œπ : Type*}

namespace measure_theory
open ennreal nat metric

variables [measure_space Œ±] [normed_group Œ≤] [second_countable_topology Œ≤]
  [measurable_space Œ≤] [borel_space Œ≤]

local infixr ` ‚Üí‚Çõ `:25 := simple_func

-- FIXME this monolithic proof used to cause a deterministic timeout with `-T50000`
-- It no longer does, but it should still be broken up into a sequence of more manageable pieces.
lemma simple_func_sequence_tendsto {f : Œ± ‚Üí Œ≤} (hf : measurable f) :
  ‚àÉ (F : ‚Ñï ‚Üí (Œ± ‚Üí‚Çõ Œ≤)), ‚àÄ x : Œ±, tendsto (Œª n, F n x) at_top (ùìù (f x)) ‚àß
  ‚àÄ n, ‚à•F n x‚à• ‚â§ ‚à•f x‚à• + ‚à•f x‚à• :=
-- enumerate a countable dense subset {e k} of Œ≤
let ‚ü®D, ‚ü®D_countable, D_dense‚ü©‚ü© := @separable_space.exists_countable_closure_eq_univ Œ≤ _ _ in
let e := enumerate_countable D_countable 0 in
let E := range e in
have E_dense : closure E = univ :=
  dense_of_subset_dense (subset_range_enumerate D_countable 0) D_dense,
let A' (N k : ‚Ñï) : set Œ± :=
  f ‚Åª¬π' (metric.ball (e k) (1 / (N+1 : ‚Ñù)) \ metric.ball 0 (1 / (N+1 : ‚Ñù))) in
let A N := disjointed (A' N) in
have is_measurable_A' : ‚àÄ {N k}, is_measurable (A' N k) :=
  Œª N k, hf.preimage $ is_measurable.inter is_measurable_ball $ is_measurable.compl is_measurable_ball,
have is_measurable_A : ‚àÄ {N k}, is_measurable (A N k) :=
  Œª N, is_measurable.disjointed $ Œª k, is_measurable_A',
have A_subset_A' : ‚àÄ {N k x}, x ‚àà A N k ‚Üí x ‚àà A' N k := Œª N k, inter_subset_left _ _,
have dist_ek_fx' : ‚àÄ {x N k}, x ‚àà A' N k ‚Üí (dist (e k) (f x) < 1 / (N+1 : ‚Ñù)) :=
  Œª x N k, by { rw [dist_comm], simpa using (Œª a b, a) },
have dist_ek_fx : ‚àÄ {x N k}, x ‚àà A N k ‚Üí (dist (e k) (f x) < 1 / (N+1 : ‚Ñù)) :=
  Œª x N k h, dist_ek_fx' (A_subset_A' h),
have norm_fx' : ‚àÄ {x N k}, x ‚àà A' N k ‚Üí (1 / (N+1 : ‚Ñù)) ‚â§ ‚à•f x‚à• := Œª x N k, by simp [ball_0_eq],
have norm_fx : ‚àÄ {x N k}, x ‚àà A N k ‚Üí (1 / (N+1 : ‚Ñù)) ‚â§ ‚à•f x‚à• := Œª x N k h, norm_fx' (A_subset_A' h),
-- construct the desired sequence of simple functions
let M N x := nat.find_greatest (Œª M, x ‚àà ‚ãÉ k ‚â§ N, (A M k)) N in
let k N x := nat.find_greatest (Œª k, x ‚àà A (M N x) k) N in
let F N x := if x ‚àà ‚ãÉ M ‚â§ N, ‚ãÉ k ‚â§ N, A M k then e (k N x) else 0 in
-- prove properties of the construction above
have k_unique : ‚àÄ {M k k' x},  x ‚àà A M k ‚àß x ‚àà A M k' ‚Üí k = k' := Œª M k k' x h,
begin
  by_contradiction k_ne_k',
  have NE : (A M k ‚à© A M k').nonempty, from ‚ü®x, h‚ü©,
  have E : A M k ‚à© A M k' = ‚àÖ  := disjoint_disjointed' k k' k_ne_k',
  exact NE.ne_empty E,
end,
have x_mem_Union_k : ‚àÄ {N x}, (x ‚àà ‚ãÉ M ‚â§ N, ‚ãÉ k ‚â§ N, A M k) ‚Üí x ‚àà ‚ãÉ k ‚â§ N, A (M N x) k :=
  Œª N x h,
    @nat.find_greatest_spec (Œª M, x ‚àà ‚ãÉ k ‚â§ N, (A M k)) _ N (
      let ‚ü®M, hM‚ü© := mem_Union.1 (h) in
      let ‚ü®hM‚ÇÅ, hM‚ÇÇ‚ü© := mem_Union.1 hM in
        ‚ü®M, ‚ü®hM‚ÇÅ, hM‚ÇÇ‚ü©‚ü©),
have x_mem_A : ‚àÄ {N x}, (x ‚àà ‚ãÉ M ‚â§ N, ‚ãÉ k ‚â§ N, A M k) ‚Üí x ‚àà A (M N x) (k N x) :=
  Œª N x h,
    @nat.find_greatest_spec (Œª k, x ‚àà A (M N x) k) _ N (
      let ‚ü®k, hk‚ü© := mem_Union.1 (x_mem_Union_k h) in
      let ‚ü®hk‚ÇÅ, hk‚ÇÇ‚ü© := mem_Union.1 hk in
        ‚ü®k, ‚ü®hk‚ÇÅ, hk‚ÇÇ‚ü©‚ü©),
have x_mem_A' : ‚àÄ {N x}, (x ‚àà ‚ãÉ M ‚â§ N, ‚ãÉ k ‚â§ N, A M k) ‚Üí x ‚àà A' (M N x) (k N x) :=
  Œª N x h, mem_of_subset_of_mem (inter_subset_left _ _) (x_mem_A h),
-- prove that for all N, (F N) has finite range
have F_finite : ‚àÄ {N}, finite (range (F N)) :=
begin
  assume N, apply finite_range_ite,
  { rw range_comp, exact finite_range_find_greatest.image _ },
  { exact finite_range_const }
end,
-- prove that for all N, (F N) is a measurable function
have F_measurable : ‚àÄ {N}, measurable (F N) :=
begin
  assume N, refine measurable.if _ _ measurable_const,
  -- show `is_measurable {a : Œ± | a ‚àà ‚ãÉ (M : ‚Ñï) (H : M ‚â§ N) (k : ‚Ñï) (H : k ‚â§ N), A M k}`
  { rw set_of_mem_eq, simp [is_measurable.Union, is_measurable.Union_Prop, is_measurable_A] },
  -- show `measurable (Œª (x : Œ±), e (k N x))`
  apply measurable.comp measurable_from_nat, apply measurable_find_greatest,
  assume k' k'_le_N, by_cases k'_eq_0 : k' = 0,
  -- if k' = 0
  have : {x | k N x = 0} = (-‚ãÉ (M : ‚Ñï) (H : M ‚â§ N) (k : ‚Ñï) (H : k ‚â§ N), A M k) ‚à™
                    (‚ãÉ (m ‚â§ N), A m 0 - ‚ãÉ m' (hmm' : m < m') (hm'N : m' ‚â§ N) (k ‚â§ N), A m' k),
  { ext, split,
    { rw [mem_set_of_eq, mem_union_eq, or_iff_not_imp_left, mem_compl_eq, not_not_mem],
      assume k_eq_0 x_mem,
      simp only [not_exists, exists_prop, mem_Union, not_and, sub_eq_diff, mem_diff],
      refine ‚ü®M N x, ‚ü®nat.find_greatest_le, ‚ü®by { rw ‚Üê k_eq_0, exact x_mem_A x_mem} , _‚ü©‚ü©‚ü©,
      assume m hMm hmN k k_le_N,
      have := nat.find_greatest_is_greatest _ m ‚ü®hMm, hmN‚ü©,
      { simp only [not_exists, exists_prop, mem_Union, not_and] at this, exact this k k_le_N },
      { exact ‚ü®M N x, ‚ü®nat.find_greatest_le, x_mem_Union_k x_mem‚ü©‚ü© } },
    { simp only [mem_set_of_eq, mem_union_eq, mem_compl_eq],
      by_cases x_mem : (x ‚àâ ‚ãÉ (M : ‚Ñï) (H : M ‚â§ N) (k : ‚Ñï) (H : k ‚â§ N), A M k),
      { intro, apply find_greatest_eq_zero, assume k k_le_N hx,
        have : x ‚àà ‚ãÉ (M : ‚Ñï) (H : M ‚â§ N) (k : ‚Ñï) (H : k ‚â§ N), A M k,
          { simp only [mem_Union], use [M N x, nat.find_greatest_le, k, k_le_N, hx] },
        contradiction },
      { rw not_not_mem at x_mem, assume h, cases h, contradiction,
        simp only [not_exists, exists_prop, mem_Union, not_and, sub_eq_diff, mem_diff] at h,
        rcases h with ‚ü®m, ‚ü®m_le_N, ‚ü®hx, hm‚ü©‚ü©‚ü©,
        by_cases m_lt_M : m < M N x,
        { have := hm (M N x) m_lt_M nat.find_greatest_le (k N x) nat.find_greatest_le,
          have := x_mem_A x_mem,
          contradiction },
        rw not_lt at m_lt_M, by_cases m_gt_M : m > M N x,
        { have := nat.find_greatest_is_greatest _ m ‚ü®m_gt_M, m_le_N‚ü©,
          { have : x ‚àà ‚ãÉ k ‚â§ N, A m k,
            { exact mem_bUnion (nat.zero_le N) hx },
            contradiction },
          { exact ‚ü®m, m_le_N, mem_bUnion (nat.zero_le _) hx‚ü© } },
        rw not_lt at m_gt_M, have M_eq_m := le_antisymm m_lt_M m_gt_M,
        rw ‚Üê k'_eq_0, exact k_unique ‚ü®x_mem_A x_mem, by { rw [k'_eq_0, M_eq_m], exact hx }‚ü© } } },
  -- end of `have`
  rw [k'_eq_0, this], apply is_measurable.union,
  { apply is_measurable.compl,
    simp [is_measurable.Union, is_measurable.Union_Prop, is_measurable_A] },
  { simp [is_measurable.Union, is_measurable.Union_Prop, is_measurable.diff, is_measurable_A] },
  -- if k' ‚â† 0
  have : {x | k N x = k'} = ‚ãÉ(m ‚â§ N), A m k' - ‚ãÉm' (hmm' : m < m') (hm'N : m' ‚â§ N) (k ‚â§ N), A m' k,
  { ext, split,
    { rw [mem_set_of_eq],
      assume k_eq_k',
      have x_mem : x ‚àà ‚ãÉ (M : ‚Ñï) (H : M ‚â§ N) (k : ‚Ñï) (H : k ‚â§ N), A M k,
      { have := find_greatest_of_ne_zero k_eq_k' k'_eq_0,
        simp only [mem_Union], use [M N x, nat.find_greatest_le, k', k'_le_N, this] },
      simp only [not_exists, exists_prop, mem_Union, not_and, sub_eq_diff, mem_diff],
      refine ‚ü®M N x, ‚ü®nat.find_greatest_le, ‚ü®by { rw ‚Üê k_eq_k', exact x_mem_A x_mem} , _‚ü©‚ü©‚ü©,
      assume m hMm hmN k k_le_N,
      have := nat.find_greatest_is_greatest _ m ‚ü®hMm, hmN‚ü©,
        { simp only [not_exists, exists_prop, mem_Union, not_and] at this, exact this k k_le_N },
      exact ‚ü®M N x, ‚ü®nat.find_greatest_le, x_mem_Union_k x_mem‚ü©‚ü© },
    { simp only [mem_set_of_eq, mem_union_eq, mem_compl_eq], assume h,
      have x_mem : x ‚àà ‚ãÉ (M : ‚Ñï) (H : M ‚â§ N) (k : ‚Ñï) (H : k ‚â§ N), A M k,
        { simp only [not_exists, exists_prop, mem_Union, not_and, sub_eq_diff, mem_diff] at h,
          rcases h with ‚ü®m, hm, hx, _‚ü©,
          simp only [mem_Union], use [m, hm,  k', k'_le_N, hx] },
      simp only [not_exists, exists_prop, mem_Union, not_and, sub_eq_diff, mem_diff] at h,
      rcases h with ‚ü®m, ‚ü®m_le_N, ‚ü®hx, hm‚ü©‚ü©‚ü©,
      by_cases m_lt_M : m < M N x,
      { have := hm (M N x) m_lt_M nat.find_greatest_le (k N x) nat.find_greatest_le,
        have := x_mem_A x_mem,
        contradiction },
      rw not_lt at m_lt_M, by_cases m_gt_M : m > M N x,
      { have := nat.find_greatest_is_greatest _ m ‚ü®m_gt_M, m_le_N‚ü©,
        have : x ‚àà ‚ãÉ k ‚â§ N, A m k := mem_bUnion k'_le_N hx,
        contradiction,
        { simp only [mem_Union], use [m, m_le_N, k', k'_le_N, hx] }},
      rw not_lt at m_gt_M, have M_eq_m := le_antisymm m_lt_M m_gt_M,
      exact k_unique ‚ü®x_mem_A x_mem, by { rw M_eq_m, exact hx }‚ü© } },
  -- end of `have`
  rw this, simp [is_measurable.Union, is_measurable.Union_Prop, is_measurable.diff, is_measurable_A]
end,
-- start of proof
‚ü®Œª N, ‚ü®F N, Œª x, measurable.preimage F_measurable is_measurable_singleton, F_finite‚ü©,
-- The pointwise convergence part of the theorem
Œª x, ‚ü®metric.tendsto_at_top.2 $ Œª Œµ hŒµ, classical.by_cases
--first case : f x = 0
( assume fx_eq_0 : f x = 0,
  have x_not_mem_A' : ‚àÄ {M k}, x ‚àâ A' M k := Œª M k,
  begin
    simp only [mem_preimage, fx_eq_0, metric.mem_ball, one_div_eq_inv, norm_zero,
               not_and, not_lt, add_comm, not_le, dist_zero_right, mem_diff],
    assume h, rw add_comm, exact inv_pos_of_nat
  end,
  have x_not_mem_A  : ‚àÄ {M k}, x ‚àâ A M k :=
    by { assume M k h, have := disjointed_subset h, exact absurd this x_not_mem_A' },
  have F_eq_0 : ‚àÄ {N}, F N x = 0 := Œª N, by simp [F, if_neg, mem_Union, x_not_mem_A],
  -- end of `have`
  ‚ü®0, Œª n hn, show dist (F n x) (f x) < Œµ, by {rw [fx_eq_0, F_eq_0, dist_self], exact hŒµ}‚ü© )
--second case : f x ‚â† 0
( assume fx_ne_0 : f x ‚â† 0,
  let ‚ü®N‚ÇÄ, hN‚ü© := exists_nat_one_div_lt (lt_min (norm_pos_iff.2 fx_ne_0) hŒµ) in
  have norm_fx_gt : _ := (lt_min_iff.1 hN).1,
  have Œµ_gt : _ := (lt_min_iff.1 hN).2,
  have x_mem_Union_k_N‚ÇÄ : x ‚àà ‚ãÉ k, A N‚ÇÄ k :=
    let ‚ü®k, hk‚ü© := mem_closure_range_iff_nat.1 (by { rw E_dense, exact mem_univ (f x) }) N‚ÇÄ in
    begin
      rw [Union_disjointed, mem_Union], use k,
      rw [mem_preimage], simp, rw [‚Üê one_div_eq_inv],
      exact ‚ü®hk, le_of_lt norm_fx_gt‚ü©
    end,
  let ‚ü®k‚ÇÄ, x_mem_A‚ü© := mem_Union.1 x_mem_Union_k_N‚ÇÄ in
  let n := max N‚ÇÄ k‚ÇÄ in
  have x_mem_Union_Union : ‚àÄ {N} (hN : n ‚â§ N), x ‚àà ‚ãÉ M ‚â§ N, ‚ãÉ k ‚â§ N, A M k := assume N hN,
    mem_Union.2
      ‚ü®N‚ÇÄ, mem_Union.2
        ‚ü®le_trans (le_max_left _ _) hN, mem_Union.2
          ‚ü®k‚ÇÄ, mem_Union.2 ‚ü®le_trans (le_max_right _ _) hN, x_mem_A‚ü©‚ü©‚ü©‚ü©,
  have FN_eq : ‚àÄ {N} (hN : n ‚â§ N), F N x = e (k N x) := assume N hN, if_pos $ x_mem_Union_Union hN,
  -- start of proof
  ‚ü®n, assume N hN,
  have N‚ÇÄ_le_N : N‚ÇÄ ‚â§ N := le_trans (le_max_left _ _) hN,
  have k‚ÇÄ_le_N : k‚ÇÄ ‚â§ N := le_trans (le_max_right _ _) hN,
  show dist (F N x) (f x) < Œµ, from
  calc
    dist (F N x) (f x) = dist (e (k N x)) (f x) : by rw FN_eq hN
    ... < 1 / ((M N x : ‚Ñù) + 1) :
    begin
      have := x_mem_A' (x_mem_Union_Union hN),
      rw [mem_preimage, mem_diff, metric.mem_ball, dist_comm] at this, exact this.1
    end
    ... ‚â§ 1 / ((N‚ÇÄ : ‚Ñù) + 1)  :
    @one_div_le_one_div_of_le _ _  ((N‚ÇÄ : ‚Ñù) + 1) ((M N x : ‚Ñù) + 1) (nat.cast_add_one_pos N‚ÇÄ)
    (add_le_add_right (nat.cast_le.2 (nat.le_find_greatest N‚ÇÄ_le_N (mem_bUnion k‚ÇÄ_le_N x_mem_A))) 1)
    ... < Œµ : Œµ_gt ‚ü© ),
-- second part of the theorem
assume N, show ‚à•F N x‚à• ‚â§ ‚à•f x‚à• + ‚à•f x‚à•, from
classical.by_cases
( assume h : x ‚àà ‚ãÉ M ‚â§ N, ‚ãÉ k ‚â§ N, A M k,
  calc
    ‚à•F N x‚à• = dist (F N x) 0 : by simp
    ... = dist (e (k N x)) 0 : begin simp only [F], rw if_pos h end
    ... ‚â§ dist (e (k N x)) (f x) + dist (f x) 0 : dist_triangle _ _ _
    ... = dist (e (k N x)) (f x) + ‚à•f x‚à• : by simp
    ... ‚â§ 1 / ((M N x : ‚Ñù) + 1) + ‚à•f x‚à• :
      le_of_lt $ add_lt_add_right (dist_ek_fx (x_mem_A h)) _
    ... ‚â§ ‚à•f x‚à• + ‚à•f x‚à• : add_le_add_right (norm_fx (x_mem_A h) ) _)
( assume h : x ‚àâ ‚ãÉ M ‚â§ N, ‚ãÉ k ‚â§ N, A M k,
  have F_eq_0 : F N x = 0 := if_neg h,
  by { simp only [F_eq_0, norm_zero], exact add_nonneg (norm_nonneg _) (norm_nonneg _) } )‚ü©‚ü©

lemma simple_func_sequence_tendsto' {f : Œ± ‚Üí Œ≤} (hfm : measurable f)
  (hfi : integrable f) : ‚àÉ (F : ‚Ñï ‚Üí (Œ± ‚Üí‚Çõ Œ≤)), (‚àÄn, integrable (F n)) ‚àß
   tendsto (Œª n, ‚à´‚Åª x,  nndist (F n x) (f x)) at_top  (ùìù 0) :=
let ‚ü®F, hF‚ü© := simple_func_sequence_tendsto hfm in
let G : ‚Ñï ‚Üí Œ± ‚Üí ennreal := Œªn x, nndist (F n x) (f x) in
let g : Œ± ‚Üí ennreal := Œªx, nnnorm (f x) + nnnorm (f x) + nnnorm (f x) in
have hF_meas : ‚àÄ n, measurable (G n) := Œª n, measurable.comp measurable_coe $
  (F n).measurable.nndist hfm,
have hg_meas : measurable g := measurable.comp measurable_coe $ measurable.add
  (measurable.add hfm.nnnorm hfm.nnnorm) hfm.nnnorm,
have h_bound : ‚àÄ n, ‚àÄ‚Çò x, G n x ‚â§ g x := Œª n, ae_of_all _ $ Œª x, coe_le_coe.2 $
  calc
    nndist (F n x) (f x) ‚â§ nndist (F n x) 0 + nndist 0 (f x) : nndist_triangle _ _ _
    ... = nnnorm (F n x) + nnnorm (f x) : by simp [nndist_eq_nnnorm]
    ... ‚â§ nnnorm (f x) + nnnorm (f x) + nnnorm (f x) :
      by { simp [nnreal.coe_le_coe.symm, (hF x).2, add_comm] },
have h_finite : lintegral g < ‚ä§ :=
  calc
    (‚à´‚Åª x, nnnorm (f x) + nnnorm (f x) + nnnorm (f x)) =
      (‚à´‚Åª x, nnnorm (f x)) + (‚à´‚Åª x, nnnorm (f x)) + (‚à´‚Åª x, nnnorm (f x)) :
    by { rw [lintegral_add, lintegral_nnnorm_add],
      exacts [hfm, hfm, hfm.ennnorm.add hfm.ennnorm, hfm.ennnorm] }
    ... < ‚ä§ : by { simp only [and_self, add_lt_top], exact hfi},
have h_lim : ‚àÄ‚Çò x, tendsto (Œª n, G n x) at_top (ùìù 0) := ae_of_all _ $ Œª x,
  begin
    apply (@tendsto_coe ‚Ñï at_top (Œª n, nndist (F n x) (f x)) 0).2,
    apply (@nnreal.tendsto_coe ‚Ñï at_top (Œª n, nndist (F n x) (f x)) 0).1,
    apply tendsto_iff_dist_tendsto_zero.1 (hF x).1
  end,
begin
  use F, split,
  { assume n, exact
    calc
      (‚à´‚Åª a, nnnorm (F n a)) ‚â§ ‚à´‚Åª a, nnnorm (f a) + nnnorm (f a) :
        lintegral_mono
          (by { assume a, simp only [coe_add.symm, coe_le_coe], exact (hF a).2 n })
       ... = (‚à´‚Åª a, nnnorm (f a)) + (‚à´‚Åª a, nnnorm (f a)) :
         lintegral_nnnorm_add hfm hfm
       ... < ‚ä§ : by simp only [add_lt_top, and_self]; exact hfi },
  convert @tendsto_lintegral_of_dominated_convergence _ _ G (Œª a, 0) g
              hF_meas h_bound h_finite h_lim,
  simp only [lintegral_zero]
end

end measure_theory
