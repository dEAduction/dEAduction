/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Johannes H√∂lzl
-/
import topology.instances.nnreal
/-!
# Extended non-negative reals
-/

noncomputable theory
open classical set filter metric
open_locale classical
open_locale topological_space
variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}

open_locale ennreal big_operators filter

namespace ennreal
variables {a b c d : ennreal} {r p q : nnreal}
variables {x y z : ennreal} {Œµ Œµ‚ÇÅ Œµ‚ÇÇ : ennreal} {s : set ennreal}

section topological_space
open topological_space

/-- Topology on `ennreal`.

Note: this is different from the `emetric_space` topology. The `emetric_space` topology has
`is_open {‚ä§}`, while this topology doesn't have singleton elements. -/
instance : topological_space ennreal := preorder.topology ennreal

instance : order_topology ennreal := ‚ü®rfl‚ü©

instance : t2_space ennreal := by apply_instance -- short-circuit type class inference

instance : second_countable_topology ennreal :=
‚ü®‚ü®‚ãÉq ‚â• (0:‚Ñö), {{a : ennreal | a < nnreal.of_real q}, {a : ennreal | ‚Üë(nnreal.of_real q) < a}},
  (countable_encodable _).bUnion $ assume a ha, (countable_singleton _).insert _,
  le_antisymm
    (le_generate_from $ by simp [or_imp_distrib, is_open_lt', is_open_gt'] {contextual := tt})
    (le_generate_from $ Œª s h, begin
      rcases h with ‚ü®a, hs | hs‚ü©;
      [ rw show s = ‚ãÉq‚àà{q:‚Ñö | 0 ‚â§ q ‚àß a < nnreal.of_real q}, {b | ‚Üë(nnreal.of_real q) < b},
           from set.ext (assume b, by simp [hs, @ennreal.lt_iff_exists_rat_btwn a b, and_assoc]),
        rw show s = ‚ãÉq‚àà{q:‚Ñö | 0 ‚â§ q ‚àß ‚Üë(nnreal.of_real q) < a}, {b | b < ‚Üë(nnreal.of_real q)},
           from set.ext (assume b, by simp [hs, @ennreal.lt_iff_exists_rat_btwn b a, and_comm, and_assoc])];
      { apply is_open_Union, intro q,
        apply is_open_Union, intro hq,
        exact generate_open.basic _ (mem_bUnion hq.1 $ by simp) }
    end)‚ü©‚ü©

lemma embedding_coe : embedding (coe : nnreal ‚Üí ennreal) :=
‚ü®‚ü®begin
  refine le_antisymm _ _,
  { rw [@order_topology.topology_eq_generate_intervals ennreal _,
      ‚Üê coinduced_le_iff_le_induced],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    show is_open {b : nnreal | a < ‚Üëb},
    { cases a; simp [none_eq_top, some_eq_coe, is_open_lt'] },
    show is_open {b : nnreal | ‚Üëb < a},
    { cases a; simp [none_eq_top, some_eq_coe, is_open_gt', is_open_const] } },
  { rw [@order_topology.topology_eq_generate_intervals nnreal _],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    exact ‚ü®Ioi a, is_open_Ioi, by simp [Ioi]‚ü©,
    exact ‚ü®Iio a, is_open_Iio, by simp [Iio]‚ü© }
  end‚ü©,
  assume a b, coe_eq_coe.1‚ü©

lemma is_open_ne_top : is_open {a : ennreal | a ‚â† ‚ä§} := is_open_ne

lemma is_open_Ico_zero : is_open (Ico 0 b) := by { rw ennreal.Ico_eq_Iio, exact is_open_Iio}

lemma coe_range_mem_nhds : range (coe : nnreal ‚Üí ennreal) ‚àà ùìù (r : ennreal) :=
have {a : ennreal | a ‚â† ‚ä§} = range (coe : nnreal ‚Üí ennreal),
  from set.ext $ assume a, by cases a; simp [none_eq_top, some_eq_coe],
this ‚ñ∏ mem_nhds_sets is_open_ne_top coe_ne_top

@[norm_cast] lemma tendsto_coe {f : filter Œ±} {m : Œ± ‚Üí nnreal} {a : nnreal} :
  tendsto (Œªa, (m a : ennreal)) f (ùìù ‚Üëa) ‚Üî tendsto m f (ùìù a) :=
embedding_coe.tendsto_nhds_iff.symm

lemma continuous_coe {Œ±} [topological_space Œ±] {f : Œ± ‚Üí nnreal} :
continuous (Œªa, (f a : ennreal)) ‚Üî continuous f :=
embedding_coe.continuous_iff.symm

lemma nhds_coe {r : nnreal} : ùìù (r : ennreal) = (ùìù r).map coe :=
by rw [embedding_coe.induced, map_nhds_induced_eq coe_range_mem_nhds]

lemma nhds_coe_coe {r p : nnreal} : ùìù ((r : ennreal), (p : ennreal)) =
  (ùìù (r, p)).map (Œªp:nnreal√ónnreal, (p.1, p.2)) :=
begin
  rw [(embedding_coe.prod_mk embedding_coe).map_nhds_eq],
  rw [‚Üê prod_range_range_eq],
  exact prod_mem_nhds_sets coe_range_mem_nhds coe_range_mem_nhds
end

lemma continuous_of_real : continuous ennreal.of_real :=
(continuous_coe.2 continuous_id).comp nnreal.continuous_of_real

lemma tendsto_of_real {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù} {a : ‚Ñù} (h : tendsto m f (ùìù a)) :
  tendsto (Œªa, ennreal.of_real (m a)) f (ùìù (ennreal.of_real a)) :=
tendsto.comp (continuous.tendsto continuous_of_real _) h

lemma tendsto_to_nnreal {a : ennreal} : a ‚â† ‚ä§ ‚Üí
  tendsto (ennreal.to_nnreal) (ùìù a) (ùìù a.to_nnreal) :=
begin
  cases a; simp [some_eq_coe, none_eq_top, nhds_coe, tendsto_map'_iff, (‚àò)],
  exact tendsto_id
end

lemma continuous_on_to_nnreal : continuous_on ennreal.to_nnreal {a | a ‚â† ‚àû}  :=
continuous_on_iff_continuous_restrict.2 $ continuous_iff_continuous_at.2 $ Œª x,
  (tendsto_to_nnreal x.2).comp continuous_at_subtype_val

lemma tendsto_to_real {a : ennreal} : a ‚â† ‚ä§ ‚Üí tendsto (ennreal.to_real) (ùìù a) (ùìù a.to_real) :=
Œª ha, tendsto.comp ((@nnreal.tendsto_coe _ (ùìù a.to_nnreal) id (a.to_nnreal)).2 tendsto_id)
  (tendsto_to_nnreal ha)

lemma tendsto_nhds_top {m : Œ± ‚Üí ennreal} {f : filter Œ±}
  (h : ‚àÄ n : ‚Ñï, ‚àÄ·∂† a in f, ‚Üën < m a) : tendsto m f (ùìù ‚ä§) :=
tendsto_nhds_generate_from $ assume s hs,
match s, hs with
| _, ‚ü®none,   or.inl rfl‚ü©, hr := (lt_irrefl ‚ä§ hr).elim
| _, ‚ü®some r, or.inl rfl‚ü©, hr :=
  let ‚ü®n, hrn‚ü© := exists_nat_gt r in
  mem_sets_of_superset (h n) $ assume a hnma, show ‚Üër < m a, from
    lt_trans (show (r : ennreal) < n, from (coe_nat n) ‚ñ∏ coe_lt_coe.2 hrn) hnma
| _, ‚ü®a,      or.inr rfl‚ü©, hr := (not_top_lt $ show ‚ä§ < a, from hr).elim
end

lemma tendsto_nat_nhds_top : tendsto (Œª n : ‚Ñï, ‚Üën) at_top (ùìù ‚àû) :=
tendsto_nhds_top $ Œª n, mem_at_top_sets.2
  ‚ü®n+1, Œª m hm, ennreal.coe_nat_lt_coe_nat.2 $ nat.lt_of_succ_le hm‚ü©

lemma nhds_top : ùìù ‚àû = ‚®Öa ‚â† ‚àû, ùìü (Ioi a) :=
nhds_top_order.trans $ by simp [lt_top_iff_ne_top, Ioi]

lemma nhds_zero : ùìù (0 : ennreal) = ‚®Öa ‚â† 0, ùìü (Iio a) :=
nhds_bot_order.trans $ by simp [bot_lt_iff_ne_bot, Iio]

/-- The set of finite `ennreal` numbers is homeomorphic to `nnreal`. -/
def ne_top_homeomorph_nnreal : {a | a ‚â† ‚àû} ‚âÉ‚Çú nnreal :=
{ to_fun := Œª x, ennreal.to_nnreal x,
  inv_fun := Œª x, ‚ü®x, coe_ne_top‚ü©,
  left_inv := Œª ‚ü®x, hx‚ü©, subtype.eq $ coe_to_nnreal hx,
  right_inv := Œª x, to_nnreal_coe,
  continuous_to_fun := continuous_on_iff_continuous_restrict.1 continuous_on_to_nnreal,
  continuous_inv_fun := continuous_subtype_mk _ (continuous_coe.2 continuous_id) }

/-- The set of finite `ennreal` numbers is homeomorphic to `nnreal`. -/
def lt_top_homeomorph_nnreal : {a | a < ‚àû} ‚âÉ‚Çú nnreal :=
by refine (homeomorph.set_congr $ set.ext $ Œª x, _).trans ne_top_homeomorph_nnreal;
  simp only [mem_set_of_eq, lt_top_iff_ne_top]

-- using Icc because
-- ‚Ä¢ don't have 'Ioo (x - Œµ) (x + Œµ) ‚àà ùìù x' unless x > 0
-- ‚Ä¢ (x - y ‚â§ Œµ ‚Üî x ‚â§ Œµ + y) is true, while (x - y < Œµ ‚Üî x < Œµ + y) is not
@[nolint ge_or_gt] -- see Note [nolint_ge]
lemma Icc_mem_nhds : x ‚â† ‚ä§ ‚Üí Œµ > 0 ‚Üí Icc (x - Œµ) (x + Œµ) ‚àà ùìù x :=
begin
  assume xt Œµ0, rw mem_nhds_sets_iff,
  by_cases x0 : x = 0,
  { use Iio (x + Œµ),
    have : Iio (x + Œµ) ‚äÜ Icc (x - Œµ) (x + Œµ), assume a, rw x0, simpa using le_of_lt,
    use this, exact ‚ü®is_open_Iio, mem_Iio_self_add xt Œµ0‚ü© },
  { use Ioo (x - Œµ) (x + Œµ), use Ioo_subset_Icc_self,
    exact ‚ü®is_open_Ioo, mem_Ioo_self_sub_add xt x0 Œµ0 Œµ0 ‚ü© }
end

@[nolint ge_or_gt] -- see Note [nolint_ge]
lemma nhds_of_ne_top : x ‚â† ‚ä§ ‚Üí ùìù x = ‚®ÖŒµ > 0, ùìü (Icc (x - Œµ) (x + Œµ)) :=
begin
  assume xt, refine le_antisymm _ _,
  -- first direction
  simp only [le_infi_iff, le_principal_iff], assume Œµ Œµ0, exact Icc_mem_nhds xt Œµ0,
  -- second direction
  rw nhds_generate_from, refine le_infi (assume s, le_infi $ assume hs, _),
  simp only [mem_set_of_eq] at hs, rcases hs with ‚ü®xs, ‚ü®a, ha‚ü©‚ü©,
  cases ha,
  { rw ha at *,
    rcases dense xs with ‚ü®b, ‚ü®ab, bx‚ü©‚ü©,
    have xb_pos : x - b > 0 := zero_lt_sub_iff_lt.2 bx,
    have xxb : x - (x - b) = b := sub_sub_cancel (by rwa lt_top_iff_ne_top) (le_of_lt bx),
    refine infi_le_of_le (x - b) (infi_le_of_le xb_pos _),
    simp only [mem_principal_sets, le_principal_iff],
    assume y, rintros ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, rw xxb at h‚ÇÅ, calc a < b : ab ... ‚â§ y : h‚ÇÅ },
  { rw ha at *,
    rcases dense xs with ‚ü®b, ‚ü®xb, ba‚ü©‚ü©,
    have bx_pos : b - x > 0 := zero_lt_sub_iff_lt.2 xb,
    have xbx : x + (b - x) = b := add_sub_cancel_of_le (le_of_lt xb),
    refine infi_le_of_le (b - x) (infi_le_of_le bx_pos _),
    simp only [mem_principal_sets, le_principal_iff],
    assume y, rintros ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, rw xbx at h‚ÇÇ, calc y ‚â§ b : h‚ÇÇ ... < a : ba },
end

/-- Characterization of neighborhoods for `ennreal` numbers. See also `tendsto_order`
for a version with strict inequalities. -/
@[nolint ge_or_gt] -- see Note [nolint_ge]
protected theorem tendsto_nhds {f : filter Œ±} {u : Œ± ‚Üí ennreal} {a : ennreal} (ha : a ‚â† ‚ä§) :
  tendsto u f (ùìù a) ‚Üî ‚àÄ Œµ > 0, ‚àÄ·∂† x in f, (u x) ‚àà Icc (a - Œµ) (a + Œµ) :=
by simp only [nhds_of_ne_top ha, tendsto_infi, tendsto_principal, mem_Icc]

@[nolint ge_or_gt] -- see Note [nolint_ge]
protected lemma tendsto_at_top [nonempty Œ≤] [semilattice_sup Œ≤] {f : Œ≤ ‚Üí ennreal} {a : ennreal}
  (ha : a ‚â† ‚ä§) : tendsto f at_top (ùìù a) ‚Üî ‚àÄŒµ>0, ‚àÉN, ‚àÄn‚â•N, (f n) ‚àà Icc (a - Œµ) (a + Œµ) :=
by simp only [ennreal.tendsto_nhds ha, mem_at_top_sets, mem_set_of_eq, filter.eventually]

lemma tendsto_coe_nnreal_nhds_top {Œ±} {l : filter Œ±} {f : Œ± ‚Üí nnreal} (h : tendsto f l at_top) :
  tendsto (Œªa, (f a : ennreal)) l (ùìù ‚àû) :=
tendsto_nhds_top $ assume n,
have ‚àÄ·∂† a in l, ‚Üë(n+1) ‚â§ f a := h $ mem_at_top _,
mem_sets_of_superset this $ assume a (ha : ‚Üë(n+1) ‚â§ f a),
begin
  rw [‚Üê coe_nat],
  dsimp,
  exact coe_lt_coe.2 (lt_of_lt_of_le (nat.cast_lt.2 (nat.lt_succ_self _)) ha)
end

instance : topological_add_monoid ennreal :=
‚ü® continuous_iff_continuous_at.2 $
  have hl : ‚àÄa:ennreal, tendsto (Œª (p : ennreal √ó ennreal), p.fst + p.snd) (ùìù (‚ä§, a)) (ùìù ‚ä§), from
    assume a, tendsto_nhds_top $ assume n,
    have set.prod {a | ‚Üën < a } univ ‚àà ùìù ((‚ä§:ennreal), a), from
      prod_mem_nhds_sets (lt_mem_nhds $ coe_nat n ‚ñ∏ coe_lt_top) univ_mem_sets,
    show {a : ennreal √ó ennreal | ‚Üën < a.fst + a.snd} ‚àà ùìù (‚ä§, a),
    begin filter_upwards [this] assume ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, lt_of_lt_of_le h‚ÇÅ (le_add_right $ le_refl _) end,
  begin
    rintro ‚ü®a‚ÇÅ, a‚ÇÇ‚ü©,
    cases a‚ÇÅ, { simp [continuous_at, none_eq_top, hl a‚ÇÇ], },
    cases a‚ÇÇ, { simp [continuous_at, none_eq_top, some_eq_coe, nhds_swap (a‚ÇÅ : ennreal) ‚ä§,
                      tendsto_map'_iff, (‚àò)], convert hl a‚ÇÅ, simp [add_comm] },
    simp [continuous_at, some_eq_coe, nhds_coe_coe, tendsto_map'_iff, (‚àò)],
    simp only [coe_add.symm, tendsto_coe, tendsto_add]
  end ‚ü©

protected lemma tendsto_mul (ha : a ‚â† 0 ‚à® b ‚â† ‚ä§) (hb : b ‚â† 0 ‚à® a ‚â† ‚ä§) :
  tendsto (Œªp:ennreal√óennreal, p.1 * p.2) (ùìù (a, b)) (ùìù (a * b)) :=
have ht : ‚àÄb:ennreal, b ‚â† 0 ‚Üí tendsto (Œªp:ennreal√óennreal, p.1 * p.2) (ùìù ((‚ä§:ennreal), b)) (ùìù ‚ä§),
begin
  refine assume b hb, tendsto_nhds_top $ assume n, _,
  rcases dense (zero_lt_iff_ne_zero.2 hb) with ‚ü®Œµ', hŒµ', hŒµb'‚ü©,
  rcases ennreal.lt_iff_exists_coe.1 hŒµb' with ‚ü®Œµ, rfl, h‚ü©,
  rcases exists_nat_gt (‚Üën / Œµ) with ‚ü®m, hm‚ü©,
  have hŒµ : Œµ > 0, from coe_lt_coe.1 hŒµ',
  refine mem_sets_of_superset (prod_mem_nhds_sets (lt_mem_nhds $ @coe_lt_top m) (lt_mem_nhds $ h)) _,
  rintros ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢,
  calc (n:ennreal) = ‚Üë(((n:nnreal) / Œµ) * Œµ) :
    begin
      simp [nnreal.div_def],
      rw [mul_assoc, ‚Üê coe_mul, nnreal.inv_mul_cancel, coe_one, ‚Üê coe_nat, mul_one],
      exact zero_lt_iff_ne_zero.1 hŒµ
    end
    ... < (‚Üëm * Œµ : nnreal) : coe_lt_coe.2 $ mul_lt_mul hm (le_refl _) hŒµ (nat.cast_nonneg _)
    ... ‚â§ a‚ÇÅ * a‚ÇÇ : by rw [coe_mul]; exact canonically_ordered_semiring.mul_le_mul
      (le_of_lt h‚ÇÅ)
      (le_of_lt h‚ÇÇ)
end,
begin
  cases a, {simp [none_eq_top] at hb, simp [none_eq_top, ht b hb, top_mul, hb] },
  cases b, {
    simp [none_eq_top] at ha,
    simp [*, nhds_swap (a : ennreal) ‚ä§, none_eq_top, some_eq_coe, top_mul, tendsto_map'_iff, (‚àò), mul_comm] },
  simp [some_eq_coe, nhds_coe_coe, tendsto_map'_iff, (‚àò)],
  simp only [coe_mul.symm, tendsto_coe, tendsto_mul]
end

protected lemma tendsto.mul {f : filter Œ±} {ma : Œ± ‚Üí ennreal} {mb : Œ± ‚Üí ennreal} {a b : ennreal}
  (hma : tendsto ma f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† ‚ä§) (hmb : tendsto mb f (ùìù b)) (hb : b ‚â† 0 ‚à® a ‚â† ‚ä§) :
  tendsto (Œªa, ma a * mb a) f (ùìù (a * b)) :=
show tendsto ((Œªp:ennreal√óennreal, p.1 * p.2) ‚àò (Œªa, (ma a, mb a))) f (ùìù (a * b)), from
tendsto.comp (ennreal.tendsto_mul ha hb) (hma.prod_mk_nhds hmb)

protected lemma tendsto.const_mul {f : filter Œ±} {m : Œ± ‚Üí ennreal} {a b : ennreal}
  (hm : tendsto m f (ùìù b)) (hb : b ‚â† 0 ‚à® a ‚â† ‚ä§) : tendsto (Œªb, a * m b) f (ùìù (a * b)) :=
by_cases
  (assume : a = 0, by simp [this, tendsto_const_nhds])
  (assume ha : a ‚â† 0, ennreal.tendsto.mul tendsto_const_nhds (or.inl ha) hm hb)

protected lemma tendsto.mul_const {f : filter Œ±} {m : Œ± ‚Üí ennreal} {a b : ennreal}
  (hm : tendsto m f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† ‚ä§) : tendsto (Œªx, m x * b) f (ùìù (a * b)) :=
by simpa only [mul_comm] using ennreal.tendsto.const_mul hm ha

protected lemma continuous_const_mul {a : ennreal} (ha : a < ‚ä§) : continuous ((*) a) :=
continuous_iff_continuous_at.2 $ Œª x, tendsto.const_mul tendsto_id $ or.inr $ ne_of_lt ha

protected lemma continuous_mul_const {a : ennreal} (ha : a < ‚ä§) : continuous (Œª x, x * a) :=
by simpa only [mul_comm] using ennreal.continuous_const_mul ha

protected lemma continuous_inv : continuous (has_inv.inv : ennreal ‚Üí ennreal) :=
continuous_iff_continuous_at.2 $ Œª a, tendsto_order.2
‚ü®begin
  assume b hb,
  simp only [@ennreal.lt_inv_iff_lt_inv b],
  exact gt_mem_nhds (ennreal.lt_inv_iff_lt_inv.1 hb),
end,
begin
  assume b hb,
  simp only [gt_iff_lt, @ennreal.inv_lt_iff_inv_lt _ b],
  exact lt_mem_nhds (ennreal.inv_lt_iff_inv_lt.1 hb)
end‚ü©

@[simp] protected lemma tendsto_inv_iff {f : filter Œ±} {m : Œ± ‚Üí ennreal} {a : ennreal} :
  tendsto (Œª x, (m x)‚Åª¬π) f (ùìù a‚Åª¬π) ‚Üî tendsto m f (ùìù a) :=
‚ü®Œª h, by simpa only [function.comp, ennreal.inv_inv]
  using (ennreal.continuous_inv.tendsto a‚Åª¬π).comp h,
  (ennreal.continuous_inv.tendsto a).comp‚ü©

protected lemma tendsto.div {f : filter Œ±} {ma : Œ± ‚Üí ennreal} {mb : Œ± ‚Üí ennreal} {a b : ennreal}
  (hma : tendsto ma f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† 0) (hmb : tendsto mb f (ùìù b)) (hb : b ‚â† ‚ä§ ‚à® a ‚â† ‚ä§) :
  tendsto (Œªa, ma a / mb a) f (ùìù (a / b)) :=
by { apply tendsto.mul hma _ (ennreal.tendsto_inv_iff.2 hmb) _; simp [ha, hb] }

protected lemma tendsto.const_div {f : filter Œ±} {m : Œ± ‚Üí ennreal} {a b : ennreal}
  (hm : tendsto m f (ùìù b)) (hb : b ‚â† ‚ä§ ‚à® a ‚â† ‚ä§) : tendsto (Œªb, a / m b) f (ùìù (a / b)) :=
by { apply tendsto.const_mul (ennreal.tendsto_inv_iff.2 hm), simp [hb] }

protected lemma tendsto.div_const {f : filter Œ±} {m : Œ± ‚Üí ennreal} {a b : ennreal}
  (hm : tendsto m f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† 0) : tendsto (Œªx, m x / b) f (ùìù (a / b)) :=
by { apply tendsto.mul_const hm, simp [ha] }

protected lemma tendsto_inv_nat_nhds_zero : tendsto (Œª n : ‚Ñï, (n : ennreal)‚Åª¬π) at_top (ùìù 0) :=
ennreal.inv_top ‚ñ∏ ennreal.tendsto_inv_iff.2 tendsto_nat_nhds_top

lemma Sup_add {s : set ennreal} (hs : s.nonempty) : Sup s + a = ‚®Üb‚ààs, b + a :=
have Sup ((Œªb, b + a) '' s) = Sup s + a,
  from is_lub.Sup_eq (is_lub_of_is_lub_of_tendsto
    (assume x _ y _ h, add_le_add h (le_refl _))
    (is_lub_Sup s)
    hs
    (tendsto.add (tendsto_id' inf_le_left) tendsto_const_nhds)),
by simp [Sup_image, -add_comm] at this; exact this.symm

lemma supr_add {Œπ : Sort*} {s : Œπ ‚Üí ennreal} [h : nonempty Œπ] : supr s + a = ‚®Üb, s b + a :=
let ‚ü®x‚ü© := h in
calc supr s + a = Sup (range s) + a : by simp [Sup_range]
  ... = (‚®Üb‚ààrange s, b + a) : Sup_add ‚ü®s x, x, rfl‚ü©
  ... = _ : supr_range

lemma add_supr {Œπ : Sort*} {s : Œπ ‚Üí ennreal} [h : nonempty Œπ] : a + supr s = ‚®Üb, a + s b :=
by rw [add_comm, supr_add]; simp [add_comm]

lemma supr_add_supr {Œπ : Sort*} {f g : Œπ ‚Üí ennreal} (h : ‚àÄi j, ‚àÉk, f i + g j ‚â§ f k + g k) :
  supr f + supr g = (‚®Ü a, f a + g a) :=
begin
  by_cases hŒπ : nonempty Œπ,
  { letI := hŒπ,
    refine le_antisymm _ (supr_le $ Œª a, add_le_add (le_supr _ _) (le_supr _ _)),
    simpa [add_supr, supr_add] using
      Œª i j:Œπ, show f i + g j ‚â§ ‚®Ü a, f a + g a, from
      let ‚ü®k, hk‚ü© := h i j in le_supr_of_le k hk },
  { have : ‚àÄf:Œπ ‚Üí ennreal, (‚®Üi, f i) = 0 := assume f, bot_unique (supr_le $ assume i, (hŒπ ‚ü®i‚ü©).elim),
    rw [this, this, this, zero_add] }
end

lemma supr_add_supr_of_monotone {Œπ : Sort*} [semilattice_sup Œπ]
  {f g : Œπ ‚Üí ennreal} (hf : monotone f) (hg : monotone g) :
  supr f + supr g = (‚®Ü a, f a + g a) :=
supr_add_supr $ assume i j, ‚ü®i ‚äî j, add_le_add (hf $ le_sup_left) (hg $ le_sup_right)‚ü©

lemma finset_sum_supr_nat {Œ±} {Œπ} [semilattice_sup Œπ] {s : finset Œ±} {f : Œ± ‚Üí Œπ ‚Üí ennreal}
  (hf : ‚àÄa, monotone (f a)) :
  ‚àë a in s, supr (f a) = (‚®Ü n, ‚àë a in s, f a n) :=
begin
  refine finset.induction_on s _ _,
  { simp,
    exact (bot_unique $ supr_le $ assume i, le_refl ‚ä•).symm },
  { assume a s has ih,
    simp only [finset.sum_insert has],
    rw [ih, supr_add_supr_of_monotone (hf a)],
    assume i j h,
    exact (finset.sum_le_sum $ assume a ha, hf a h) }
end

section priority
-- for some reason the next proof fails without changing the priority of this instance
local attribute [instance, priority 1000] classical.prop_decidable
lemma mul_Sup {s : set ennreal} {a : ennreal} : a * Sup s = ‚®Üi‚ààs, a * i :=
begin
  by_cases hs : ‚àÄx‚ààs, x = (0:ennreal),
  { have h‚ÇÅ : Sup s = 0 := (bot_unique $ Sup_le $ assume a ha, (hs a ha).symm ‚ñ∏ le_refl 0),
    have h‚ÇÇ : (‚®Üi ‚àà s, a * i) = 0 :=
      (bot_unique $ supr_le $ assume a, supr_le $ assume ha, by simp [hs a ha]),
    rw [h‚ÇÅ, h‚ÇÇ, mul_zero] },
  { simp only [not_forall] at hs,
    rcases hs with ‚ü®x, hx, hx0‚ü©,
    have s‚ÇÅ : Sup s ‚â† 0 :=
      zero_lt_iff_ne_zero.1 (lt_of_lt_of_le (zero_lt_iff_ne_zero.2 hx0) (le_Sup hx)),
    have : Sup ((Œªb, a * b) '' s) = a * Sup s :=
      is_lub.Sup_eq (is_lub_of_is_lub_of_tendsto
        (assume x _ y _ h, canonically_ordered_semiring.mul_le_mul (le_refl _) h)
        (is_lub_Sup _)
        ‚ü®x, hx‚ü©
        (ennreal.tendsto.const_mul (tendsto_id' inf_le_left) (or.inl s‚ÇÅ))),
    rw [this.symm, Sup_image] }
end
end priority

lemma mul_supr {Œπ : Sort*} {f : Œπ ‚Üí ennreal} {a : ennreal} : a * supr f = ‚®Üi, a * f i :=
by rw [‚Üê Sup_range, mul_Sup, supr_range]

lemma supr_mul {Œπ : Sort*} {f : Œπ ‚Üí ennreal} {a : ennreal} : supr f * a = ‚®Üi, f i * a :=
by rw [mul_comm, mul_supr]; congr; funext; rw [mul_comm]

protected lemma tendsto_coe_sub : ‚àÄ{b:ennreal}, tendsto (Œªb:ennreal, ‚Üër - b) (ùìù b) (ùìù (‚Üër - b)) :=
begin
  refine (forall_ennreal.2 $ and.intro (assume a, _) _),
  { simp [@nhds_coe a, tendsto_map'_iff, (‚àò), tendsto_coe, coe_sub.symm],
    exact nnreal.tendsto.sub tendsto_const_nhds tendsto_id },
  simp,
  exact (tendsto.congr' (mem_sets_of_superset (lt_mem_nhds $ @coe_lt_top r) $
    by simp [le_of_lt] {contextual := tt})) tendsto_const_nhds
end

lemma sub_supr {Œπ : Sort*} [hŒπ : nonempty Œπ] {b : Œπ ‚Üí ennreal} (hr : a < ‚ä§) :
  a - (‚®Üi, b i) = (‚®Öi, a - b i) :=
let ‚ü®i‚ü© := hŒπ in
let ‚ü®r, eq, _‚ü© := lt_iff_exists_coe.mp hr in
have Inf ((Œªb, ‚Üër - b) '' range b) = ‚Üër - (‚®Üi, b i),
  from is_glb.Inf_eq $ is_glb_of_is_lub_of_tendsto
    (assume x _ y _, sub_le_sub (le_refl _))
    is_lub_supr
    ‚ü®_, i, rfl‚ü©
    (tendsto.comp ennreal.tendsto_coe_sub (tendsto_id' inf_le_left)),
by rw [eq, ‚Üêthis]; simp [Inf_image, infi_range, -mem_range]; exact le_refl _

end topological_space

section tsum

variables {f g : Œ± ‚Üí ennreal}

@[norm_cast] protected lemma has_sum_coe {f : Œ± ‚Üí nnreal} {r : nnreal} :
  has_sum (Œªa, (f a : ennreal)) ‚Üër ‚Üî has_sum f r :=
have (Œªs:finset Œ±, ‚àë a in s, ‚Üë(f a)) = (coe : nnreal ‚Üí ennreal) ‚àò (Œªs:finset Œ±, ‚àë a in s, f a),
  from funext $ assume s, ennreal.coe_finset_sum.symm,
by unfold has_sum; rw [this, tendsto_coe]

protected lemma tsum_coe_eq {f : Œ± ‚Üí nnreal} (h : has_sum f r) : (‚àë'a, (f a : ennreal)) = r :=
tsum_eq_has_sum $ ennreal.has_sum_coe.2 $ h

protected lemma coe_tsum {f : Œ± ‚Üí nnreal} : summable f ‚Üí ‚Üë(tsum f) = (‚àë'a, (f a : ennreal))
| ‚ü®r, hr‚ü© := by rw [tsum_eq_has_sum hr, ennreal.tsum_coe_eq hr]

protected lemma has_sum : has_sum f (‚®Üs:finset Œ±, ‚àë a in s, f a) :=
tendsto_order.2
  ‚ü®assume a' ha',
    let ‚ü®s, hs‚ü© := lt_supr_iff.mp ha' in
    mem_at_top_sets.mpr ‚ü®s, assume t ht, lt_of_lt_of_le hs $ finset.sum_le_sum_of_subset ht‚ü©,
  assume a' ha',
    univ_mem_sets' $ assume s,
    have ‚àë a in s, f a ‚â§ ‚®Ü(s : finset Œ±), ‚àë a in s, f a,
      from le_supr (Œª(s : finset Œ±), ‚àë a in s, f a) s,
    lt_of_le_of_lt this ha'‚ü©

@[simp] protected lemma summable : summable f := ‚ü®_, ennreal.has_sum‚ü©

lemma tsum_coe_ne_top_iff_summable {f : Œ≤ ‚Üí nnreal} :
  (‚àë' b, (f b:ennreal)) ‚â† ‚àû ‚Üî summable f :=
begin
  refine ‚ü®Œª h, _, Œª h, ennreal.coe_tsum h ‚ñ∏ ennreal.coe_ne_top‚ü©,
  lift (‚àë' b, (f b:ennreal)) to nnreal using h with a ha,
  refine ‚ü®a, ennreal.has_sum_coe.1 _‚ü©,
  rw ha,
  exact ennreal.summable.has_sum
end

protected lemma tsum_eq_supr_sum : (‚àë'a, f a) = (‚®Üs:finset Œ±, ‚àë a in s, f a) :=
tsum_eq_has_sum ennreal.has_sum

protected lemma tsum_eq_supr_sum' {Œπ : Type*} (s : Œπ ‚Üí finset Œ±) (hs : ‚àÄ t, ‚àÉ i, t ‚äÜ s i) :
  (‚àë' a, f a) = ‚®Ü i, ‚àë a in s i, f a :=
begin
  rw [ennreal.tsum_eq_supr_sum],
  symmetry,
  change (‚®Üi:Œπ, (Œª t : finset Œ±, ‚àë a in t, f a) (s i)) = ‚®Üs:finset Œ±, ‚àë a in s, f a,
  exact (finset.sum_mono_set f).supr_comp_eq hs
end

protected lemma tsum_sigma {Œ≤ : Œ± ‚Üí Type*} (f : Œ†a, Œ≤ a ‚Üí ennreal) :
  (‚àë'p:Œ£a, Œ≤ a, f p.1 p.2) = (‚àë'a b, f a b) :=
tsum_sigma (assume b, ennreal.summable) ennreal.summable

protected lemma tsum_sigma' {Œ≤ : Œ± ‚Üí Type*} (f : (Œ£ a, Œ≤ a) ‚Üí ennreal) :
  (‚àë'p:(Œ£a, Œ≤ a), f p) = (‚àë'a b, f ‚ü®a, b‚ü©) :=
tsum_sigma (assume b, ennreal.summable) ennreal.summable

protected lemma tsum_prod {f : Œ± ‚Üí Œ≤ ‚Üí ennreal} : (‚àë'p:Œ±√óŒ≤, f p.1 p.2) = (‚àë'a, ‚àë'b, f a b) :=
let j : Œ± √ó Œ≤ ‚Üí (Œ£a:Œ±, Œ≤) := Œªp, sigma.mk p.1 p.2 in
let i : (Œ£a:Œ±, Œ≤) ‚Üí Œ± √ó Œ≤ := Œªp, (p.1, p.2) in
let f' : (Œ£a:Œ±, Œ≤) ‚Üí ennreal := Œªp, f p.1 p.2 in
calc (‚àë'p:Œ±√óŒ≤, f' (j p)) = (‚àë'p:Œ£a:Œ±, Œ≤, f p.1 p.2) :
    tsum_eq_tsum_of_iso j i (assume ‚ü®a, b‚ü©, rfl) (assume ‚ü®a, b‚ü©, rfl)
   ... = (‚àë'a, ‚àë'b, f a b) : ennreal.tsum_sigma f

protected lemma tsum_comm {f : Œ± ‚Üí Œ≤ ‚Üí ennreal} : (‚àë'a, ‚àë'b, f a b) = (‚àë'b, ‚àë'a, f a b) :=
let f' : Œ±√óŒ≤ ‚Üí ennreal := Œªp, f p.1 p.2 in
calc (‚àë'a, ‚àë'b, f a b) = (‚àë'p:Œ±√óŒ≤, f' p) : ennreal.tsum_prod.symm
  ... = (‚àë'p:Œ≤√óŒ±, f' (prod.swap p)) :
    (tsum_eq_tsum_of_iso prod.swap (@prod.swap Œ± Œ≤) (assume ‚ü®a, b‚ü©, rfl) (assume ‚ü®a, b‚ü©, rfl)).symm
  ... = (‚àë'b, ‚àë'a, f' (prod.swap (b, a))) : @ennreal.tsum_prod Œ≤ Œ± (Œªb a, f' (prod.swap (b, a)))

protected lemma tsum_add : (‚àë'a, f a + g a) = (‚àë'a, f a) + (‚àë'a, g a) :=
tsum_add ennreal.summable ennreal.summable

protected lemma tsum_le_tsum (h : ‚àÄa, f a ‚â§ g a) : (‚àë'a, f a) ‚â§ (‚àë'a, g a) :=
tsum_le_tsum h ennreal.summable ennreal.summable

protected lemma tsum_eq_supr_nat {f : ‚Ñï ‚Üí ennreal} :
  (‚àë'i:‚Ñï, f i) = (‚®Üi:‚Ñï, ‚àë a in finset.range i, f a) :=
ennreal.tsum_eq_supr_sum' _ finset.exists_nat_subset_range

protected lemma le_tsum (a : Œ±) : f a ‚â§ (‚àë'a, f a) :=
calc f a = ‚àë a' in {a}, f a' : by simp
  ... ‚â§ (‚®Üs:finset Œ±, ‚àë a' in s, f a') : le_supr (Œªs:finset Œ±, ‚àë a' in s, f a') _
  ... = (‚àë'a, f a) : by rw [ennreal.tsum_eq_supr_sum]

protected lemma tsum_eq_top_of_eq_top : (‚àÉ a, f a = ‚àû) ‚Üí (‚àë' a, f a) = ‚àû
| ‚ü®a, ha‚ü© := top_unique $ ha ‚ñ∏ ennreal.le_tsum a

protected lemma ne_top_of_tsum_ne_top (h : (‚àë' a, f a) ‚â† ‚àû) (a : Œ±) : f a ‚â† ‚àû :=
Œª ha, h $ ennreal.tsum_eq_top_of_eq_top ‚ü®a, ha‚ü©

protected lemma tsum_mul_left : (‚àë'i, a * f i) = a * (‚àë'i, f i) :=
if h : ‚àÄi, f i = 0 then by simp [h] else
let ‚ü®i, (hi : f i ‚â† 0)‚ü© := classical.not_forall.mp h in
have sum_ne_0 : (‚àë'i, f i) ‚â† 0, from ne_of_gt $
  calc 0 < f i : lt_of_le_of_ne (zero_le _) hi.symm
    ... ‚â§ (‚àë'i, f i) : ennreal.le_tsum _,
have tendsto (Œªs:finset Œ±, ‚àë j in s, a * f j) at_top (ùìù (a * (‚àë'i, f i))),
  by rw [‚Üê show (*) a ‚àò (Œªs:finset Œ±, ‚àë j in s, f j) = Œªs, ‚àë j in s, a * f j,
         from funext $ Œª s, finset.mul_sum];
  exact ennreal.tendsto.const_mul ennreal.summable.has_sum (or.inl sum_ne_0),
tsum_eq_has_sum this

protected lemma tsum_mul_right : (‚àë'i, f i * a) = (‚àë'i, f i) * a :=
by simp [mul_comm, ennreal.tsum_mul_left]

@[simp] lemma tsum_supr_eq {Œ± : Type*} (a : Œ±) {f : Œ± ‚Üí ennreal} :
  (‚àë'b:Œ±, ‚®Ü (h : a = b), f b) = f a :=
le_antisymm
  (by rw [ennreal.tsum_eq_supr_sum]; exact supr_le (assume s,
    calc (‚àë b in s, ‚®Ü (h : a = b), f b) ‚â§ ‚àë b in {a}, ‚®Ü (h : a = b), f b :
        finset.sum_le_sum_of_ne_zero $ assume b _ hb,
          suffices a = b, by simpa using this.symm,
          classical.by_contradiction $ assume h,
            by simpa [h] using hb
      ... = f a : by simp))
  (calc f a ‚â§ (‚®Ü (h : a = a), f a) : le_supr (Œªh:a=a, f a) rfl
    ... ‚â§ (‚àë'b:Œ±, ‚®Ü (h : a = b), f b) : ennreal.le_tsum _)

lemma has_sum_iff_tendsto_nat {f : ‚Ñï ‚Üí ennreal} (r : ennreal) :
  has_sum f r ‚Üî tendsto (Œªn:‚Ñï, ‚àë i in finset.range n, f i) at_top (ùìù r) :=
begin
  refine ‚ü®has_sum.tendsto_sum_nat, assume h, _‚ü©,
  rw [‚Üê supr_eq_of_tendsto _ h, ‚Üê ennreal.tsum_eq_supr_nat],
  { exact ennreal.summable.has_sum },
  { exact assume s t hst, finset.sum_le_sum_of_subset (finset.range_subset.2 hst) }
end

end tsum

end ennreal

namespace nnreal

lemma exists_le_has_sum_of_le {f g : Œ≤ ‚Üí nnreal} {r : nnreal}
  (hgf : ‚àÄb, g b ‚â§ f b) (hfr : has_sum f r) : ‚àÉp‚â§r, has_sum g p :=
have (‚àë'b, (g b : ennreal)) ‚â§ r,
begin
  refine has_sum_le (assume b, _) ennreal.summable.has_sum (ennreal.has_sum_coe.2 hfr),
  exact ennreal.coe_le_coe.2 (hgf _)
end,
let ‚ü®p, eq, hpr‚ü© := ennreal.le_coe_iff.1 this in
‚ü®p, hpr, ennreal.has_sum_coe.1 $ eq ‚ñ∏ ennreal.summable.has_sum‚ü©

lemma summable_of_le {f g : Œ≤ ‚Üí nnreal} (hgf : ‚àÄb, g b ‚â§ f b) : summable f ‚Üí summable g
| ‚ü®r, hfr‚ü© := let ‚ü®p, _, hp‚ü© := exists_le_has_sum_of_le hgf hfr in hp.summable

lemma has_sum_iff_tendsto_nat {f : ‚Ñï ‚Üí nnreal} (r : nnreal) :
  has_sum f r ‚Üî tendsto (Œªn:‚Ñï, ‚àë i in finset.range n, f i) at_top (ùìù r) :=
begin
  rw [‚Üê ennreal.has_sum_coe, ennreal.has_sum_iff_tendsto_nat],
  simp only [ennreal.coe_finset_sum.symm],
  exact ennreal.tendsto_coe
end

lemma tsum_comp_le_tsum_of_inj {Œ≤ : Type*} {f : Œ± ‚Üí nnreal} (hf : summable f)
  {i : Œ≤ ‚Üí Œ±} (hi : function.injective i) : tsum (f ‚àò i) ‚â§ tsum f :=
tsum_le_tsum_of_inj i hi (Œª c hc, zero_le _) (Œª b, le_refl _) (summable_comp_injective hf hi) hf

end nnreal

lemma tsum_comp_le_tsum_of_inj {Œ≤ : Type*} {f : Œ± ‚Üí ‚Ñù} (hf : summable f) (hn : ‚àÄ a, 0 ‚â§ f a)
  {i : Œ≤ ‚Üí Œ±} (hi : function.injective i) : tsum (f ‚àò i) ‚â§ tsum f :=
begin
  let g : Œ± ‚Üí nnreal := Œª a, ‚ü®f a, hn a‚ü©,
  have hg : summable g, by rwa ‚Üê nnreal.summable_coe,
  convert nnreal.coe_le_coe.2 (nnreal.tsum_comp_le_tsum_of_inj hg hi);
  { rw nnreal.coe_tsum, congr }
end

lemma summable_of_nonneg_of_le {f g : Œ≤ ‚Üí ‚Ñù}
  (hg : ‚àÄb, 0 ‚â§ g b) (hgf : ‚àÄb, g b ‚â§ f b) (hf : summable f) : summable g :=
let f' (b : Œ≤) : nnreal := ‚ü®f b, le_trans (hg b) (hgf b)‚ü© in
let g' (b : Œ≤) : nnreal := ‚ü®g b, hg b‚ü© in
have summable f', from nnreal.summable_coe.1 hf,
have summable g', from
  nnreal.summable_of_le (assume b, (@nnreal.coe_le_coe (g' b) (f' b)).2 $ hgf b) this,
show summable (Œªb, g' b : Œ≤ ‚Üí ‚Ñù), from nnreal.summable_coe.2 this

lemma has_sum_iff_tendsto_nat_of_nonneg {f : ‚Ñï ‚Üí ‚Ñù} (hf : ‚àÄi, 0 ‚â§ f i) (r : ‚Ñù) :
  has_sum f r ‚Üî tendsto (Œªn:‚Ñï, ‚àë i in finset.range n, f i) at_top (ùìù r) :=
‚ü®has_sum.tendsto_sum_nat,
  assume hfr,
  have 0 ‚â§ r := ge_of_tendsto at_top_ne_bot hfr $ univ_mem_sets' $ assume i,
    show 0 ‚â§ ‚àë j in finset.range i, f j, from finset.sum_nonneg $ assume i _, hf i,
  let f' (n : ‚Ñï) : nnreal := ‚ü®f n, hf n‚ü©, r' : nnreal := ‚ü®r, this‚ü© in
  have f_eq : f = (Œªi:‚Ñï, (f' i : ‚Ñù)) := rfl,
  have r_eq : r = r' := rfl,
  begin
    rw [f_eq, r_eq, nnreal.has_sum_coe, nnreal.has_sum_iff_tendsto_nat, ‚Üê nnreal.tendsto_coe],
    simp only [nnreal.coe_sum],
    exact hfr
  end‚ü©

lemma infi_real_pos_eq_infi_nnreal_pos {Œ± : Type*} [complete_lattice Œ±] {f : ‚Ñù ‚Üí Œ±} :
  (‚®Ö(n:‚Ñù) (h : 0 < n), f n) = (‚®Ö(n:nnreal) (h : 0 < n), f n) :=
le_antisymm
  (le_infi $ assume n, le_infi $ assume hn, infi_le_of_le n $ infi_le _ (nnreal.coe_pos.2 hn))
  (le_infi $ assume r, le_infi $ assume hr, infi_le_of_le ‚ü®r, le_of_lt hr‚ü© $ infi_le _ hr)

section
variables [emetric_space Œ≤]
open ennreal filter emetric

/-- In an emetric ball, the distance between points is everywhere finite -/
lemma edist_ne_top_of_mem_ball {a : Œ≤} {r : ennreal} (x y : ball a r) : edist x.1 y.1 ‚â† ‚ä§ :=
lt_top_iff_ne_top.1 $
calc edist x y ‚â§ edist a x + edist a y : edist_triangle_left x.1 y.1 a
  ... < r + r : by rw [edist_comm a x, edist_comm a y]; exact add_lt_add x.2 y.2
  ... ‚â§ ‚ä§ : le_top

/-- Each ball in an extended metric space gives us a metric space, as the edist
is everywhere finite. -/
def metric_space_emetric_ball (a : Œ≤) (r : ennreal) : metric_space (ball a r) :=
emetric_space.to_metric_space edist_ne_top_of_mem_ball

local attribute [instance] metric_space_emetric_ball

lemma nhds_eq_nhds_emetric_ball (a x : Œ≤) (r : ennreal) (h : x ‚àà ball a r) :
  ùìù x = map (coe : ball a r ‚Üí Œ≤) (ùìù ‚ü®x, h‚ü©) :=
(map_nhds_subtype_val_eq _ $ mem_nhds_sets emetric.is_open_ball h).symm
end

section
variable [emetric_space Œ±]
open emetric

lemma tendsto_iff_edist_tendsto_0 {l : filter Œ≤} {f : Œ≤ ‚Üí Œ±} {y : Œ±} :
  tendsto f l (ùìù y) ‚Üî tendsto (Œª x, edist (f x) y) l (ùìù 0) :=
by simp only [emetric.nhds_basis_eball.tendsto_right_iff, emetric.mem_ball,
  @tendsto_order ennreal Œ≤ _ _, forall_prop_of_false ennreal.not_lt_zero, forall_const, true_and]

/-- Yet another metric characterization of Cauchy sequences on integers. This one is often the
most efficient. -/
lemma emetric.cauchy_seq_iff_le_tendsto_0 [nonempty Œ≤] [semilattice_sup Œ≤] {s : Œ≤ ‚Üí Œ±} :
  cauchy_seq s ‚Üî (‚àÉ (b: Œ≤ ‚Üí ennreal), (‚àÄ n m N : Œ≤, N ‚â§ n ‚Üí N ‚â§ m ‚Üí edist (s n) (s m) ‚â§ b N)
                    ‚àß (tendsto b at_top (ùìù 0))) :=
‚ü®begin
  assume hs,
  rw emetric.cauchy_seq_iff at hs,
  /- `s` is Cauchy sequence. The sequence `b` will be constructed by taking
  the supremum of the distances between `s n` and `s m` for `n m ‚â• N`-/
  let b := ŒªN, Sup ((Œª(p : Œ≤ √ó Œ≤), edist (s p.1) (s p.2))''{p | p.1 ‚â• N ‚àß p.2 ‚â• N}),
  --Prove that it bounds the distances of points in the Cauchy sequence
  have C : ‚àÄ n m N, N ‚â§ n ‚Üí N ‚â§ m ‚Üí edist (s n) (s m) ‚â§ b N,
  { refine Œªm n N hm hn, le_Sup _,
    use (prod.mk m n),
    simp only [and_true, eq_self_iff_true, set.mem_set_of_eq],
    exact ‚ü®hm, hn‚ü© },
  --Prove that it tends to `0`, by using the Cauchy property of `s`
  have D : tendsto b at_top (ùìù 0),
  { refine tendsto_order.2 ‚ü®Œªa ha, absurd ha (ennreal.not_lt_zero), ŒªŒµ Œµpos, _‚ü©,
    rcases dense Œµpos with ‚ü®Œ¥, Œ¥pos, Œ¥lt‚ü©,
    rcases hs Œ¥ Œ¥pos with ‚ü®N, hN‚ü©,
    refine filter.mem_at_top_sets.2 ‚ü®N, Œªn hn, _‚ü©,
    have : b n ‚â§ Œ¥ := Sup_le begin
      simp only [and_imp, set.mem_image, set.mem_set_of_eq, exists_imp_distrib, prod.exists],
      intros d p q hp hq hd,
      rw ‚Üê hd,
      exact le_of_lt (hN p q (le_trans hn hp) (le_trans hn hq))
    end,
    simpa using lt_of_le_of_lt this Œ¥lt },
  -- Conclude
  exact ‚ü®b, ‚ü®C, D‚ü©‚ü©
end,
begin
  rintros ‚ü®b, ‚ü®b_bound, b_lim‚ü©‚ü©,
  /-b : ‚Ñï ‚Üí ‚Ñù, b_bound : ‚àÄ (n m N : ‚Ñï), N ‚â§ n ‚Üí N ‚â§ m ‚Üí edist (s n) (s m) ‚â§ b N,
    b_lim : tendsto b at_top (ùìù 0)-/
  refine emetric.cauchy_seq_iff.2 (ŒªŒµ Œµpos, _),
  have : ‚àÄ·∂† n in at_top, b n < Œµ := (tendsto_order.1 b_lim ).2 _ Œµpos,
  rcases filter.mem_at_top_sets.1 this with ‚ü®N, hN‚ü©,
  exact ‚ü®N, Œªm n hm hn, calc
    edist (s m) (s n) ‚â§ b N : b_bound m n N hm hn
    ... < Œµ : (hN _ (le_refl N)) ‚ü©
end‚ü©

lemma continuous_of_le_add_edist {f : Œ± ‚Üí ennreal} (C : ennreal)
  (hC : C ‚â† ‚ä§) (h : ‚àÄx y, f x ‚â§ f y + C * edist x y) : continuous f :=
begin
  refine continuous_iff_continuous_at.2 (Œªx, tendsto_order.2 ‚ü®_, _‚ü©),
  show ‚àÄe, e < f x ‚Üí ‚àÄ·∂† y in ùìù x, e < f y,
  { assume e he,
    let Œµ := min (f x - e) 1,
    have : Œµ < ‚ä§ := lt_of_le_of_lt (min_le_right _ _) (by simp [lt_top_iff_ne_top]),
    have : 0 < Œµ := by simp [Œµ, hC, he, ennreal.zero_lt_one],
    have : 0 < C‚Åª¬π * (Œµ/2) := bot_lt_iff_ne_bot.2 (by simp [hC, (ne_of_lt this).symm, mul_eq_zero]),
    have I : C * (C‚Åª¬π * (Œµ/2)) < Œµ,
    { by_cases C_zero : C = 0,
      { simp [C_zero, ‚Äπ0 < Œµ‚Ä∫] },
      { calc C * (C‚Åª¬π * (Œµ/2)) = (C * C‚Åª¬π) * (Œµ/2) : by simp [mul_assoc]
        ... = Œµ/2 : by simp [ennreal.mul_inv_cancel C_zero hC]
        ... < Œµ : ennreal.half_lt_self (bot_lt_iff_ne_bot.1 ‚Äπ0 < Œµ‚Ä∫) (lt_top_iff_ne_top.1 ‚ÄπŒµ < ‚ä§‚Ä∫) }},
    have : ball x (C‚Åª¬π * (Œµ/2)) ‚äÜ {y : Œ± | e < f y},
    { rintros y hy,
      by_cases htop : f y = ‚ä§,
      { simp [htop, lt_top_iff_ne_top, ne_top_of_lt he] },
      { simp at hy,
        have : e + Œµ < f y + Œµ := calc
          e + Œµ ‚â§ e + (f x - e) : add_le_add_left' (min_le_left _ _)
          ... = f x : by simp [le_of_lt he]
          ... ‚â§ f y + C * edist x y : h x y
          ... = f y + C * edist y x : by simp [edist_comm]
          ... ‚â§ f y + C * (C‚Åª¬π * (Œµ/2)) :
            add_le_add_left' $ canonically_ordered_semiring.mul_le_mul (le_refl _) (le_of_lt hy)
          ... < f y + Œµ : (ennreal.add_lt_add_iff_left (lt_top_iff_ne_top.2 htop)).2 I,
        show e < f y, from
          (ennreal.add_lt_add_iff_right ‚ÄπŒµ < ‚ä§‚Ä∫).1 this }},
    apply filter.mem_sets_of_superset (ball_mem_nhds _ (‚Äπ0 < C‚Åª¬π * (Œµ/2)‚Ä∫)) this },
  show ‚àÄe, f x < e ‚Üí ‚àÄ·∂† y in ùìù x, f y < e,
  { assume e he,
    let Œµ := min (e - f x) 1,
    have : Œµ < ‚ä§ := lt_of_le_of_lt (min_le_right _ _) (by simp [lt_top_iff_ne_top]),
    have : 0 < Œµ := by simp [Œµ, he, ennreal.zero_lt_one],
    have : 0 < C‚Åª¬π * (Œµ/2) := bot_lt_iff_ne_bot.2 (by simp [hC, (ne_of_lt this).symm, mul_eq_zero]),
    have I : C * (C‚Åª¬π * (Œµ/2)) < Œµ,
    { by_cases C_zero : C = 0,
      simp [C_zero, ‚Äπ0 < Œµ‚Ä∫],
      calc C * (C‚Åª¬π * (Œµ/2)) = (C * C‚Åª¬π) * (Œµ/2) : by simp [mul_assoc]
        ... = Œµ/2 : by simp [ennreal.mul_inv_cancel C_zero hC]
        ... < Œµ : ennreal.half_lt_self (bot_lt_iff_ne_bot.1 ‚Äπ0 < Œµ‚Ä∫) (lt_top_iff_ne_top.1 ‚ÄπŒµ < ‚ä§‚Ä∫) },
    have : ball x (C‚Åª¬π * (Œµ/2)) ‚äÜ {y : Œ± | f y < e},
    { rintros y hy,
      have htop : f x ‚â† ‚ä§ := ne_top_of_lt he,
      show f y < e, from calc
        f y ‚â§ f x + C * edist y x : h y x
        ... ‚â§ f x + C * (C‚Åª¬π * (Œµ/2)) :
            add_le_add_left' $ canonically_ordered_semiring.mul_le_mul (le_refl _) (le_of_lt hy)
        ... < f x + Œµ : (ennreal.add_lt_add_iff_left (lt_top_iff_ne_top.2 htop)).2 I
        ... ‚â§ f x + (e - f x) : add_le_add_left' (min_le_left _ _)
        ... = e : by simp [le_of_lt he] },
    apply filter.mem_sets_of_superset (ball_mem_nhds _ (‚Äπ0 < C‚Åª¬π * (Œµ/2)‚Ä∫)) this },
end

theorem continuous_edist : continuous (Œªp:Œ±√óŒ±, edist p.1 p.2) :=
begin
  apply continuous_of_le_add_edist 2 (by norm_num),
  rintros ‚ü®x, y‚ü© ‚ü®x', y'‚ü©,
  calc edist x y ‚â§ edist x x' + edist x' y' + edist y' y : edist_triangle4 _ _ _ _
    ... = edist x' y' + (edist x x' + edist y y') : by simp [edist_comm]; cc
    ... ‚â§ edist x' y' + (edist (x, y) (x', y') + edist (x, y) (x', y')) :
      add_le_add_left' (add_le_add (by simp [edist, le_refl]) (by simp [edist, le_refl]))
    ... = edist x' y' + 2 * edist (x, y) (x', y') : by rw [‚Üê mul_two, mul_comm]
end

theorem continuous.edist [topological_space Œ≤] {f g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) : continuous (Œªb, edist (f b) (g b)) :=
continuous_edist.comp (hf.prod_mk hg)

theorem filter.tendsto.edist {f g : Œ≤ ‚Üí Œ±} {x : filter Œ≤} {a b : Œ±}
  (hf : tendsto f x (ùìù a)) (hg : tendsto g x (ùìù b)) :
  tendsto (Œªx, edist (f x) (g x)) x (ùìù (edist a b)) :=
(continuous_edist.tendsto (a, b)).comp (hf.prod_mk_nhds hg)

lemma cauchy_seq_of_edist_le_of_tsum_ne_top {f : ‚Ñï ‚Üí Œ±} (d : ‚Ñï ‚Üí ennreal)
  (hf : ‚àÄ n, edist (f n) (f n.succ) ‚â§ d n) (hd : tsum d ‚â† ‚àû) :
  cauchy_seq f :=
begin
  lift d to (‚Ñï ‚Üí nnreal) using (Œª i, ennreal.ne_top_of_tsum_ne_top hd i),
  rw ennreal.tsum_coe_ne_top_iff_summable at hd,
  exact cauchy_seq_of_edist_le_of_summable d hf hd
end

lemma emetric.is_closed_ball {a : Œ±} {r : ennreal} : is_closed (closed_ball a r) :=
is_closed_le (continuous_id.edist continuous_const) continuous_const

/-- If `edist (f n) (f (n+1))` is bounded above by a function `d : ‚Ñï ‚Üí ennreal`,
then the distance from `f n` to the limit is bounded by `‚àë'_{k=n}^‚àû d k`. -/
lemma edist_le_tsum_of_edist_le_of_tendsto {f : ‚Ñï ‚Üí Œ±} (d : ‚Ñï ‚Üí ennreal)
  (hf : ‚àÄ n, edist (f n) (f n.succ) ‚â§ d n)
  {a : Œ±} (ha : tendsto f at_top (ùìù a)) (n : ‚Ñï) :
  edist (f n) a ‚â§ ‚àë' m, d (n + m) :=
begin
  refine le_of_tendsto at_top_ne_bot (tendsto_const_nhds.edist ha)
    (mem_at_top_sets.2 ‚ü®n, Œª m hnm, _‚ü©),
  refine le_trans (edist_le_Ico_sum_of_edist_le hnm (Œª k _ _, hf k)) _,
  rw [finset.sum_Ico_eq_sum_range],
  exact sum_le_tsum _ (Œª _ _, zero_le _) ennreal.summable
end

/-- If `edist (f n) (f (n+1))` is bounded above by a function `d : ‚Ñï ‚Üí ennreal`,
then the distance from `f 0` to the limit is bounded by `‚àë'_{k=0}^‚àû d k`. -/
lemma edist_le_tsum_of_edist_le_of_tendsto‚ÇÄ {f : ‚Ñï ‚Üí Œ±} (d : ‚Ñï ‚Üí ennreal)
  (hf : ‚àÄ n, edist (f n) (f n.succ) ‚â§ d n)
  {a : Œ±} (ha : tendsto f at_top (ùìù a)) :
  edist (f 0) a ‚â§ ‚àë' m, d m :=
by simpa using edist_le_tsum_of_edist_le_of_tendsto d hf ha 0

end --section
