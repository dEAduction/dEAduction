/-
Copyright (c) 2018 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton

Type of continuous maps and the compact-open topology on them.
-/
import topology.subset_properties
import tactic.tidy

open set
open_locale topological_space

universes u v w

def continuous_map (Œ± : Type u) (Œ≤ : Type v) [topological_space Œ±] [topological_space Œ≤] :
  Type (max u v) :=
subtype (continuous : (Œ± ‚Üí Œ≤) ‚Üí Prop)

local notation `C(` Œ± `, ` Œ≤ `)` := continuous_map Œ± Œ≤

namespace continuous_map

section compact_open
variables {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}
variables [topological_space Œ±] [topological_space Œ≤] [topological_space Œ≥]

instance : has_coe_to_fun C(Œ±, Œ≤) :=
‚ü®Œª_, Œ± ‚Üí Œ≤, Œªf, f.1‚ü©

instance [inhabited Œ≤] : inhabited C(Œ±, Œ≤) :=
‚ü®‚ü®Œª _, default _, continuous_const‚ü©‚ü©

def compact_open.gen (s : set Œ±) (u : set Œ≤) : set C(Œ±,Œ≤) := {f | f '' s ‚äÜ u}

-- The compact-open topology on the space of continuous maps Œ± ‚Üí Œ≤.
instance compact_open : topological_space C(Œ±, Œ≤) :=
topological_space.generate_from
  {m | ‚àÉ (s : set Œ±) (hs : compact s) (u : set Œ≤) (hu : is_open u), m = compact_open.gen s u}

private lemma is_open_gen {s : set Œ±} (hs : compact s) {u : set Œ≤} (hu : is_open u) :
  is_open (compact_open.gen s u) :=
topological_space.generate_open.basic _ (by dsimp [mem_set_of_eq]; tauto)

section functorial

variables {g : Œ≤ ‚Üí Œ≥} (hg : continuous g)

def induced (f : C(Œ±, Œ≤)) : C(Œ±, Œ≥) := ‚ü®g ‚àò f, hg.comp f.property‚ü©

private lemma preimage_gen {s : set Œ±} (hs : compact s) {u : set Œ≥} (hu : is_open u) :
  continuous_map.induced hg ‚Åª¬π' (compact_open.gen s u) = compact_open.gen s (g ‚Åª¬π' u) :=
begin
  ext ‚ü®f, _‚ü©,
  change g ‚àò f '' s ‚äÜ u ‚Üî f '' s ‚äÜ g ‚Åª¬π' u,
  rw [image_comp, image_subset_iff]
end

/-- C(Œ±, -) is a functor. -/
lemma continuous_induced : continuous (continuous_map.induced hg : C(Œ±, Œ≤) ‚Üí C(Œ±, Œ≥)) :=
continuous_generated_from $ assume m ‚ü®s, hs, u, hu, hm‚ü©,
  by rw [hm, preimage_gen hg hs hu]; exact is_open_gen hs (hg _ hu)

end functorial

section ev

variables (Œ± Œ≤)
def ev (p : C(Œ±, Œ≤) √ó Œ±) : Œ≤ := p.1 p.2

variables {Œ± Œ≤}
-- The evaluation map C(Œ±, Œ≤) √ó Œ± ‚Üí Œ≤ is continuous if Œ± is locally compact.
lemma continuous_ev [locally_compact_space Œ±] : continuous (ev Œ± Œ≤) :=
continuous_iff_continuous_at.mpr $ assume ‚ü®f, x‚ü© n hn,
  let ‚ü®v, vn, vo, fxv‚ü© := mem_nhds_sets_iff.mp hn in
  have v ‚àà ùìù (f.val x), from mem_nhds_sets vo fxv,
  let ‚ü®s, hs, sv, sc‚ü© :=
    locally_compact_space.local_compact_nhds x (f.val ‚Åª¬π' v)
      (f.property.tendsto x this) in
  let ‚ü®u, us, uo, xu‚ü© := mem_nhds_sets_iff.mp hs in
  show (ev Œ± Œ≤) ‚Åª¬π' n ‚àà ùìù (f, x), from
  let w := set.prod (compact_open.gen s v) u in
  have w ‚äÜ ev Œ± Œ≤ ‚Åª¬π' n, from assume ‚ü®f', x'‚ü© ‚ü®hf', hx'‚ü©, calc
    f'.val x' ‚àà f'.val '' s  : mem_image_of_mem f'.val (us hx')
    ...       ‚äÜ v            : hf'
    ...       ‚äÜ n            : vn,
  have is_open w, from is_open_prod (is_open_gen sc vo) uo,
  have (f, x) ‚àà w, from ‚ü®image_subset_iff.mpr sv, xu‚ü©,
  mem_nhds_sets_iff.mpr ‚ü®w, by assumption, by assumption, by assumption‚ü©

end ev

section coev

variables (Œ± Œ≤)
def coev (b : Œ≤) : C(Œ±, Œ≤ √ó Œ±) := ‚ü®Œª a, (b, a), continuous.prod_mk continuous_const continuous_id‚ü©

variables {Œ± Œ≤}
lemma image_coev {y : Œ≤} (s : set Œ±) : (coev Œ± Œ≤ y).val '' s = set.prod {y} s := by tidy

-- The coevaluation map Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±) is continuous (always).
lemma continuous_coev : continuous (coev Œ± Œ≤) :=
continuous_generated_from $ begin
  rintros _ ‚ü®s, sc, u, uo, rfl‚ü©,
  rw is_open_iff_forall_mem_open,
  intros y hy,
  change (coev Œ± Œ≤ y).val '' s ‚äÜ u at hy,
  rw image_coev s at hy,
  rcases generalized_tube_lemma compact_singleton sc uo hy
    with ‚ü®v, w, vo, wo, yv, sw, vwu‚ü©,
  refine ‚ü®v, _, vo, singleton_subset_iff.mp yv‚ü©,
  intros y' hy',
  change (coev Œ± Œ≤ y').val '' s ‚äÜ u,
  rw image_coev s,
  exact subset.trans (prod_mono (singleton_subset_iff.mpr hy') sw) vwu
end

end coev

end compact_open

end continuous_map
