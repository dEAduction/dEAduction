/-
Copyright (c) 2018 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Reid Barton
-/
import category_theory.limits.shapes.images

universes v u -- declare the `v`'s first; see `category_theory.category` for an explanation

open category_theory
open category_theory.limits

namespace category_theory.limits.types

variables {J : Type u} [small_category J]

/-- (internal implementation) the limit cone of a functor, implemented as flat sections of a pi type -/
def limit_ (F : J ‚•§ Type u) : cone F :=
{ X := F.sections,
  œÄ := { app := Œª j u, u.val j } }

local attribute [elab_simple] congr_fun
/-- (internal implementation) the fact that the proposed limit cone is the limit -/
def limit_is_limit_ (F : J ‚•§ Type u) : is_limit (limit_ F) :=
{ lift := Œª s v, ‚ü®Œª j, s.œÄ.app j v, Œª j j' f, congr_fun (cone.w s f) _‚ü©,
  uniq' :=
  begin
    intros, ext x, apply subtype.eq, ext j,
    exact congr_fun (w j) x
  end }

instance : has_limits.{u} (Type u) :=
{ has_limits_of_shape := Œª J ùí•,
  { has_limit := Œª F, by exactI { cone := limit_ F, is_limit := limit_is_limit_ F } } }

@[simp] lemma types_limit (F : J ‚•§ Type u) :
  limits.limit F = {u : Œ† j, F.obj j // ‚àÄ {j j'} f, F.map f (u j) = u j'} := rfl
@[simp] lemma types_limit_œÄ (F : J ‚•§ Type u) (j : J) (g : limit F) :
  limit.œÄ F j g = g.val j := rfl
@[simp] lemma types_limit_pre
  (F : J ‚•§ Type u) {K : Type u} [ùí¶ : small_category K] (E : K ‚•§ J) (g : limit F) :
  limit.pre F E g = (‚ü®Œª k, g.val (E.obj k), by obviously‚ü© : limit (E ‚ãô F)) := rfl
@[simp] lemma types_limit_map {F G : J ‚•§ Type u} (Œ± : F ‚ü∂ G) (g : limit F) :
  (lim.map Œ± : limit F ‚Üí limit G) g =
  (‚ü®Œª j, (Œ±.app j) (g.val j), Œª j j' f,
    by {rw ‚Üêfunctor_to_types.naturality, dsimp, rw ‚Üê(g.property f)}‚ü© : limit G) := rfl

@[simp] lemma types_limit_lift (F : J ‚•§ Type u) (c : cone F) (x : c.X) :
  limit.lift F c x = (‚ü®Œª j, c.œÄ.app j x, Œª j j' f, congr_fun (cone.w c f) x‚ü© : limit F) :=
rfl

/-- (internal implementation) the limit cone of a functor, implemented as a quotient of a sigma type -/
def colimit_ (F : J ‚•§ Type u) : cocone F :=
{ X := @quot (Œ£ j, F.obj j) (Œª p p', ‚àÉ f : p.1 ‚ü∂ p'.1, p'.2 = F.map f p.2),
  Œπ :=
  { app := Œª j x, quot.mk _ ‚ü®j, x‚ü©,
    naturality' := Œª j j' f, funext $ Œª x, eq.symm (quot.sound ‚ü®f, rfl‚ü©) } }

local attribute [elab_with_expected_type] quot.lift

/-- (internal implementation) the fact that the proposed colimit cocone is the colimit -/
def colimit_is_colimit_ (F : J ‚•§ Type u) : is_colimit (colimit_ F) :=
{ desc := Œª s, quot.lift (Œª (p : Œ£ j, F.obj j), s.Œπ.app p.1 p.2)
    (assume ‚ü®j, x‚ü© ‚ü®j', x'‚ü© ‚ü®f, hf‚ü©, by rw hf; exact (congr_fun (cocone.w s f) x).symm) }

instance : has_colimits.{u} (Type u) :=
{ has_colimits_of_shape := Œª J ùí•,
  { has_colimit := Œª F, by exactI { cocone := colimit_ F, is_colimit := colimit_is_colimit_ F } } }

@[simp] lemma types_colimit (F : J ‚•§ Type u) :
  limits.colimit F = @quot (Œ£ j, F.obj j) (Œª p p', ‚àÉ f : p.1 ‚ü∂ p'.1, p'.2 = F.map f p.2) := rfl
@[simp] lemma types_colimit_Œπ (F : J ‚•§ Type u) (j : J) :
  colimit.Œπ F j = Œª x, quot.mk _ ‚ü®j, x‚ü© := rfl
@[simp] lemma types_colimit_pre
  (F : J ‚•§ Type u) {K : Type u} [ùí¶ : small_category K] (E : K ‚•§ J) :
  colimit.pre F E =
  quot.lift (Œª p, quot.mk _ ‚ü®E.obj p.1, p.2‚ü©) (Œª p p' ‚ü®f, h‚ü©, quot.sound ‚ü®E.map f, h‚ü©) := rfl
@[simp] lemma types_colimit_map {F G : J ‚•§ Type u} (Œ± : F ‚ü∂ G) :
  (colim.map Œ± : colimit F ‚Üí colimit G) =
  quot.lift
    (Œª p, quot.mk _ ‚ü®p.1, (Œ±.app p.1) p.2‚ü©)
    (Œª p p' ‚ü®f, h‚ü©, quot.sound ‚ü®f, by rw h; exact functor_to_types.naturality _ _ Œ± f _‚ü©) := rfl

@[simp] lemma types_colimit_desc (F : J ‚•§ Type u) (c : cocone F) :
  colimit.desc F c =
  quot.lift
    (Œª p, c.Œπ.app p.1 p.2)
    (Œª p p' ‚ü®f, h‚ü©, by rw h; exact (functor_to_types.naturality _ _ c.Œπ f _).symm) := rfl


variables {Œ± Œ≤ : Type u} (f : Œ± ‚ü∂ Œ≤)

section -- implementation of `has_image`
/-- the image of a morphism in Type is just `set.range f` -/
def image : Type u := set.range f

instance [inhabited Œ±] : inhabited (image f) :=
{ default := ‚ü®f (default Œ±), ‚ü®_, rfl‚ü©‚ü© }

/-- the inclusion of `image f` into the target -/
def image.Œπ : image f ‚ü∂ Œ≤ := subtype.val

instance : mono (image.Œπ f) :=
(mono_iff_injective _).2 subtype.val_injective

variables {f}

/-- the universal property for the image factorisation -/
noncomputable def image.lift (F' : mono_factorisation f) : image f ‚ü∂ F'.I :=
(Œª x, F'.e (classical.indefinite_description _ x.2).1 : image f ‚Üí F'.I)

lemma image.lift_fac (F' : mono_factorisation f) : image.lift F' ‚â´ F'.m = image.Œπ f :=
begin
  ext x,
  change (F'.e ‚â´ F'.m) _ = _,
  rw [F'.fac, (classical.indefinite_description _ x.2).2],
  refl,
end
end

/-- the factorisation of any morphism in AddCommGroup through a mono. -/
def mono_factorisation : mono_factorisation f :=
{ I := image f,
  m := image.Œπ f,
  e := set.range_factorization f }

noncomputable instance : has_image f :=
{ F := mono_factorisation f,
  is_image :=
  { lift := image.lift,
    lift_fac' := image.lift_fac } }

noncomputable instance : has_images.{u} (Type u) :=
{ has_image := infer_instance }

end category_theory.limits.types
