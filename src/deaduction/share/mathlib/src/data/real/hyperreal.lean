/-
Copyright (c) 2019 Abhimanyu Pallavi Sudhir. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Abhimanyu Pallavi Sudhir
Construction of the hyperreal numbers as an ultraproduct of real sequences.
-/
import order.filter.filter_product
import analysis.specific_limits

open filter filter.filter_product
open_locale topological_space classical

/-- Hyperreal numbers on the ultrafilter extending the cofinite filter -/
@[reducible] def hyperreal := filter.filterprod ‚Ñù (@hyperfilter ‚Ñï)

namespace hyperreal

notation `‚Ñù*` := hyperreal

private def U : is_ultrafilter (@hyperfilter ‚Ñï) := is_ultrafilter_hyperfilter
noncomputable instance : discrete_linear_ordered_field ‚Ñù* :=
filter_product.discrete_linear_ordered_field U

@[simp] lemma hyperfilter_ne_bot {Œ±} [infinite Œ±] : ¬¨ @hyperfilter Œ± = ‚ä• :=
is_ultrafilter_hyperfilter.1

@[simp] lemma hyperfilter_ne_bot' {Œ±} [infinite Œ±] : ¬¨ ‚ä• = @hyperfilter Œ± :=
hyperfilter_ne_bot ‚àò eq.symm

@[simp, norm_cast]
lemma coe_eq_coe (x y : ‚Ñù) : (x : ‚Ñù*) = y ‚Üî x = y :=
filter_product.coe_inj _ _ (by simp)

@[simp, norm_cast]
lemma cast_div (x y : ‚Ñù) : ((x / y : ‚Ñù) : ‚Ñù*) = x / y :=
filter_product.of_div is_ultrafilter_hyperfilter _ _

@[simp, norm_cast]
lemma coe_lt_coe (x y : ‚Ñù) : (x : ‚Ñù*) < y ‚Üî x < y :=
(filter_product.of_lt is_ultrafilter_hyperfilter).symm

@[simp, norm_cast]
lemma coe_le_coe (x y : ‚Ñù) : (x : ‚Ñù*) ‚â§ y ‚Üî x ‚â§ y :=
(filter_product.of_le hyperfilter_ne_bot).symm

@[simp, norm_cast]
lemma coe_abs (x : ‚Ñù) : ((abs x : ‚Ñù) : ‚Ñù*) = abs x :=
filter_product.of_abs _ _

@[simp, norm_cast]
lemma coe_max (x y : ‚Ñù) : ((max x y : ‚Ñù) : ‚Ñù*) = max x y :=
filter_product.of_max _ _ _

@[simp, norm_cast]
lemma coe_min (x y : ‚Ñù) : ((min x y : ‚Ñù) : ‚Ñù*) = min x y :=
filter_product.of_min _ _ _

/-- A sample infinitesimal hyperreal-/
noncomputable def epsilon : ‚Ñù* := of_seq (Œª n, n‚Åª¬π)

/-- A sample infinite hyperreal-/
noncomputable def omega : ‚Ñù* := of_seq (Œª n, n)

localized "notation `Œµ` := hyperreal.epsilon" in hyperreal
localized "notation `œâ` := hyperreal.omega" in hyperreal

lemma epsilon_eq_inv_omega : Œµ = œâ‚Åª¬π := rfl

lemma inv_epsilon_eq_omega : Œµ‚Åª¬π = œâ := @inv_inv' _ _ œâ

lemma epsilon_pos : 0 < Œµ :=
suffices ‚àÄ·∂† i in hyperfilter, (0 : ‚Ñù) < (i : ‚Ñï)‚Åª¬π, by rwa lt_def U,
have h0' : {n : ‚Ñï | ¬¨ n > 0} = {0} :=
by simp only [not_lt, (set.set_of_eq_eq_singleton).symm]; ext; exact nat.le_zero_iff,
begin
  simp only [inv_pos, nat.cast_pos],
  exact mem_hyperfilter_of_finite_compl (by convert set.finite_singleton _),
end

lemma epsilon_ne_zero : Œµ ‚â† 0 := ne_of_gt epsilon_pos

lemma omega_pos : 0 < œâ := by rw ‚Üêinv_epsilon_eq_omega; exact inv_pos.2 epsilon_pos

lemma omega_ne_zero : œâ ‚â† 0 := ne_of_gt omega_pos

theorem epsilon_mul_omega : Œµ * œâ = 1 := @inv_mul_cancel _ _ œâ omega_ne_zero

lemma lt_of_tendsto_zero_of_pos {f : ‚Ñï ‚Üí ‚Ñù} (hf : tendsto f at_top (ùìù 0)) :
  ‚àÄ {r : ‚Ñù}, r > 0 ‚Üí of_seq f < (r : ‚Ñù*) :=
begin
  simp only [metric.tendsto_at_top, dist_zero_right, norm, lt_def U] at hf ‚ä¢,
  intros r hr, cases hf r hr with N hf',
  have hs : -{i : ‚Ñï | f i < r} ‚äÜ {i : ‚Ñï | i ‚â§ N} :=
    Œª i hi1, le_of_lt (by simp only [lt_iff_not_ge];
    exact Œª hi2, hi1 (lt_of_le_of_lt (le_abs_self _) (hf' i hi2)) : i < N),
  exact mem_hyperfilter_of_finite_compl
    ((set.finite_le_nat N).subset hs)
end

lemma neg_lt_of_tendsto_zero_of_pos {f : ‚Ñï ‚Üí ‚Ñù} (hf : tendsto f at_top (ùìù 0)) :
  ‚àÄ {r : ‚Ñù}, r > 0 ‚Üí (-r : ‚Ñù*) < of_seq f :=
Œª r hr, have hg : _ := hf.neg,
neg_lt_of_neg_lt (by rw [neg_zero] at hg; exact lt_of_tendsto_zero_of_pos hg hr)

lemma gt_of_tendsto_zero_of_neg {f : ‚Ñï ‚Üí ‚Ñù} (hf : tendsto f at_top (ùìù 0)) :
  ‚àÄ {r : ‚Ñù}, r < 0 ‚Üí (r : ‚Ñù*) < of_seq f :=
Œª r hr, by rw [‚Üêneg_neg r, of_neg];
exact neg_lt_of_tendsto_zero_of_pos hf (neg_pos.mpr hr)

lemma epsilon_lt_pos (x : ‚Ñù) : x > 0 ‚Üí Œµ < of x :=
lt_of_tendsto_zero_of_pos tendsto_inverse_at_top_nhds_0_nat

/-- Standard part predicate -/
def is_st (x : ‚Ñù*) (r : ‚Ñù) := ‚àÄ Œ¥ : ‚Ñù, Œ¥ > 0 ‚Üí (r - Œ¥ : ‚Ñù*) < x ‚àß x < r + Œ¥

/-- Standard part function: like a "round" to ‚Ñù instead of ‚Ñ§ -/
noncomputable def st : ‚Ñù* ‚Üí ‚Ñù :=
Œª x, if h : ‚àÉ r, is_st x r then classical.some h else 0

/-- A hyperreal number is infinitesimal if its standard part is 0 -/
def infinitesimal (x : ‚Ñù*) := is_st x 0

/-- A hyperreal number is positive infinite if it is larger than all real numbers -/
def infinite_pos (x : ‚Ñù*) := ‚àÄ r : ‚Ñù, x > r

/-- A hyperreal number is negative infinite if it is smaller than all real numbers -/
def infinite_neg (x : ‚Ñù*) := ‚àÄ r : ‚Ñù, x < r

/-- A hyperreal number is infinite if it is infinite positive or infinite negative -/
def infinite (x : ‚Ñù*) := infinite_pos x ‚à® infinite_neg x

-- SOME FACTS ABOUT ST

private lemma is_st_unique' (x : ‚Ñù*) (r s : ‚Ñù) (hr : is_st x r) (hs : is_st x s) (hrs : r < s) :
  false :=
have hrs' : _ := half_pos $ sub_pos_of_lt hrs,
have hr' : _ := (hr _ hrs').2,
have hs' : _ := (hs _ hrs').1,
have h : s - ((s - r) / 2) = r + (s - r) / 2 := by linarith,
begin
  norm_cast at *,
  rw h at hs',
  exact not_lt_of_lt hs' hr'
end

theorem is_st_unique {x : ‚Ñù*} {r s : ‚Ñù} (hr : is_st x r) (hs : is_st x s) : r = s :=
begin
  rcases lt_trichotomy r s with h | h | h,
  { exact false.elim (is_st_unique' x r s hr hs h) },
  { exact h },
  { exact false.elim (is_st_unique' x s r hs hr h) }
end

theorem not_infinite_of_exists_st {x : ‚Ñù*} : (‚àÉ r : ‚Ñù, is_st x r) ‚Üí ¬¨ infinite x :=
Œª he hi, Exists.dcases_on he $ Œª r hr, hi.elim
   (Œª hip, not_lt_of_lt (hr 2 two_pos).2 (hip $ r + 2))
   (Œª hin, not_lt_of_lt (hr 2 two_pos).1 (hin $ r - 2))

theorem is_st_Sup {x : ‚Ñù*} (hni : ¬¨ infinite x) : is_st x (Sup {y : ‚Ñù | of y < x}) :=
let S : set ‚Ñù := {y : ‚Ñù | of y < x} in
let R : _ := Sup S in
have hnile : _ := not_forall.mp (not_or_distrib.mp hni).1,
have hnige : _ := not_forall.mp (not_or_distrib.mp hni).2,
Exists.dcases_on hnile $ Exists.dcases_on hnige $ Œª r‚ÇÅ hr‚ÇÅ r‚ÇÇ hr‚ÇÇ,
have HR‚ÇÅ : ‚àÉ y : ‚Ñù, y ‚àà S :=
  ‚ü® r‚ÇÅ - 1, lt_of_lt_of_le (of_lt_of_lt U (sub_one_lt _)) (not_lt.mp hr‚ÇÅ) ‚ü©,
have HR‚ÇÇ : ‚àÉ z : ‚Ñù, ‚àÄ y ‚àà S, y ‚â§ z :=
  ‚ü® r‚ÇÇ, Œª y hy, le_of_lt ((of_lt U).mpr (lt_of_lt_of_le hy (not_lt.mp hr‚ÇÇ))) ‚ü©,
Œª Œ¥ hŒ¥,
  ‚ü® lt_of_not_ge' $ Œª c,
      have hc : ‚àÄ y ‚àà S, y ‚â§ R - Œ¥ := Œª y hy, (of_le U.1).mpr $ le_of_lt $ lt_of_lt_of_le hy c,
      not_lt_of_le ((real.Sup_le _ HR‚ÇÅ HR‚ÇÇ).mpr hc) $ sub_lt_self R hŒ¥,
    lt_of_not_ge' $ Œª c,
      have hc : of (R + Œ¥ / 2) < x :=
        lt_of_lt_of_le (add_lt_add_left (of_lt_of_lt U (half_lt_self hŒ¥)) (of R)) c,
      not_lt_of_le (real.le_Sup _ HR‚ÇÇ hc) $ (lt_add_iff_pos_right _).mpr $ half_pos hŒ¥‚ü©

theorem exists_st_of_not_infinite {x : ‚Ñù*} (hni : ¬¨ infinite x) : ‚àÉ r : ‚Ñù, is_st x r :=
‚ü® Sup {y : ‚Ñù | of y < x}, is_st_Sup hni ‚ü©

theorem st_eq_Sup {x : ‚Ñù*} : st x = Sup {y : ‚Ñù | of y < x} :=
begin
unfold st, split_ifs,
{ exact is_st_unique (classical.some_spec h) (is_st_Sup (not_infinite_of_exists_st h)) },
{ cases not_imp_comm.mp exists_st_of_not_infinite h with H H,
  { rw (set.ext (Œª i, ‚ü®Œª hi, set.mem_univ i, Œª hi, H i‚ü©) : {y : ‚Ñù | of y < x} = set.univ),
    exact (real.Sup_univ).symm },
  { rw (set.ext (Œª i, ‚ü®Œª hi, false.elim (not_lt_of_lt (H i) hi),
    Œª hi, false.elim (set.not_mem_empty i hi)‚ü©) : {y : ‚Ñù | of y < x} = ‚àÖ),
    exact (real.Sup_empty).symm } }
end

theorem exists_st_iff_not_infinite {x : ‚Ñù*} : (‚àÉ r : ‚Ñù, is_st x r) ‚Üî ¬¨ infinite x :=
‚ü® not_infinite_of_exists_st, exists_st_of_not_infinite ‚ü©

theorem infinite_iff_not_exists_st {x : ‚Ñù*} : infinite x ‚Üî ¬¨ ‚àÉ r : ‚Ñù, is_st x r :=
iff_not_comm.mp exists_st_iff_not_infinite

theorem st_infinite {x : ‚Ñù*} (hi : infinite x) : st x = 0 :=
begin
  unfold st, split_ifs,
  { exact false.elim ((infinite_iff_not_exists_st.mp hi) h) },
  { refl }
end

lemma st_of_is_st {x : ‚Ñù*} {r : ‚Ñù} (hxr : is_st x r) : st x = r :=
begin
  unfold st, split_ifs,
  { exact is_st_unique (classical.some_spec h) hxr },
  { exact false.elim (h ‚ü®r, hxr‚ü©) }
end

lemma is_st_st_of_is_st {x : ‚Ñù*} {r : ‚Ñù} (hxr : is_st x r) : is_st x (st x) :=
by rwa [st_of_is_st hxr]

lemma is_st_st_of_exists_st {x : ‚Ñù*} (hx : ‚àÉ r : ‚Ñù, is_st x r) : is_st x (st x) :=
Exists.dcases_on hx (Œª r, is_st_st_of_is_st)

lemma is_st_st {x : ‚Ñù*} (hx : st x ‚â† 0) : is_st x (st x) :=
begin
  unfold st, split_ifs,
  { exact classical.some_spec h },
  { exact false.elim (hx (by unfold st; split_ifs; refl)) }
end

lemma is_st_st' {x : ‚Ñù*} (hx : ¬¨ infinite x) : is_st x (st x) :=
is_st_st_of_exists_st $ exists_st_of_not_infinite hx

lemma is_st_refl_real (r : ‚Ñù) : is_st r r :=
Œª Œ¥ hŒ¥, ‚ü® sub_lt_self _ (of_lt_of_lt U hŒ¥), (lt_add_of_pos_right _ (of_lt_of_lt U hŒ¥)) ‚ü©

lemma st_id_real (r : ‚Ñù) : st r = r := st_of_is_st (is_st_refl_real r)

lemma eq_of_is_st_real {r s : ‚Ñù} : is_st r s ‚Üí r = s := is_st_unique (is_st_refl_real r)

lemma is_st_real_iff_eq {r s : ‚Ñù} : is_st r s ‚Üî r = s :=
‚ü®eq_of_is_st_real, Œª hrs, by rw [hrs]; exact is_st_refl_real s‚ü©

lemma is_st_symm_real {r s : ‚Ñù} : is_st r s ‚Üî is_st s r :=
by rw [is_st_real_iff_eq, is_st_real_iff_eq, eq_comm]

lemma is_st_trans_real {r s t : ‚Ñù} : is_st r s ‚Üí is_st s t ‚Üí is_st r t :=
by rw [is_st_real_iff_eq, is_st_real_iff_eq, is_st_real_iff_eq]; exact eq.trans

lemma is_st_inj_real {r‚ÇÅ r‚ÇÇ s : ‚Ñù} (h1 : is_st r‚ÇÅ s) (h2 : is_st r‚ÇÇ s) : r‚ÇÅ = r‚ÇÇ :=
eq.trans (eq_of_is_st_real h1) (eq_of_is_st_real h2).symm

lemma is_st_iff_abs_sub_lt_delta {x : ‚Ñù*} {r : ‚Ñù} :
  is_st x r ‚Üî ‚àÄ (Œ¥ : ‚Ñù), Œ¥ > 0 ‚Üí abs (x - r) < Œ¥ :=
by simp only [abs_sub_lt_iff, @sub_lt _ _ (r : ‚Ñù*) x _,
    @sub_lt_iff_lt_add' _ _ x (r : ‚Ñù*) _, and_comm]; refl

lemma is_st_add {x y : ‚Ñù*} {r s : ‚Ñù} : is_st x r ‚Üí is_st y s ‚Üí is_st (x + y) (r + s) :=
Œª hxr hys d hd,
have hxr' : _ := hxr (d / 2) (half_pos hd),
have hys' : _ := hys (d / 2) (half_pos hd),
‚ü®by convert add_lt_add hxr'.1 hys'.1 using 1; norm_cast; linarith,
 by convert add_lt_add hxr'.2 hys'.2 using 1; norm_cast; linarith‚ü©

lemma is_st_neg {x : ‚Ñù*} {r : ‚Ñù} (hxr : is_st x r) : is_st (-x) (-r) :=
Œª d hd, by show -(r : ‚Ñù*) - d < -x ‚àß -x < -r + d; cases (hxr d hd); split; linarith

lemma is_st_sub {x y : ‚Ñù*} {r s : ‚Ñù} : is_st x r ‚Üí is_st y s ‚Üí is_st (x - y) (r - s) :=
Œª hxr hys, by rw [sub_eq_add_neg, sub_eq_add_neg]; exact is_st_add hxr (is_st_neg hys)

/- (st x < st y) ‚Üí (x < y) ‚Üí (x ‚â§ y) ‚Üí (st x ‚â§ st y) -/

lemma lt_of_is_st_lt {x y : ‚Ñù*} {r s : ‚Ñù} (hxr : is_st x r) (hys : is_st y s) :
  r < s ‚Üí x < y :=
Œª hrs, have hrs' : 0 < (s - r) / 2 := half_pos (sub_pos.mpr hrs),
have hxr' : _ := (hxr _ hrs').2, have hys' : _ := (hys _ hrs').1,
have H1 : r + ((s - r) / 2) = (r + s) / 2 := by linarith,
have H2 : s - ((s - r) / 2) = (r + s) / 2 := by linarith,
begin
  norm_cast at *,
  rw H1 at hxr',
  rw H2 at hys',
  exact lt_trans hxr' hys'
end

lemma is_st_le_of_le {x y : ‚Ñù*} {r s : ‚Ñù} (hrx : is_st x r) (hsy : is_st y s) :
  x ‚â§ y ‚Üí r ‚â§ s := by rw [‚Üênot_lt, ‚Üênot_lt, not_imp_not]; exact lt_of_is_st_lt hsy hrx

lemma st_le_of_le {x y : ‚Ñù*} (hix : ¬¨ infinite x) (hiy : ¬¨ infinite y) :
  x ‚â§ y ‚Üí st x ‚â§ st y :=
have hx' : _ := is_st_st' hix, have hy' : _ := is_st_st' hiy,
is_st_le_of_le hx' hy'

lemma lt_of_st_lt {x y : ‚Ñù*} (hix : ¬¨ infinite x) (hiy : ¬¨ infinite y) :
  st x < st y ‚Üí x < y :=
have hx' : _ := is_st_st' hix, have hy' : _ := is_st_st' hiy,
lt_of_is_st_lt hx' hy'

-- BASIC LEMMAS ABOUT INFINITE

lemma infinite_pos_def {x : ‚Ñù*} : infinite_pos x ‚Üî ‚àÄ r : ‚Ñù, x > r := by rw iff_eq_eq; refl

lemma infinite_neg_def {x : ‚Ñù*} : infinite_neg x ‚Üî ‚àÄ r : ‚Ñù, x < r := by rw iff_eq_eq; refl

lemma ne_zero_of_infinite {x : ‚Ñù*} : infinite x ‚Üí x ‚â† 0 :=
Œª hI h0, or.cases_on hI
  (Œª hip, lt_irrefl (0 : ‚Ñù*) ((by rwa ‚Üêh0 : infinite_pos 0) 0))
  (Œª hin, lt_irrefl (0 : ‚Ñù*) ((by rwa ‚Üêh0 : infinite_neg 0) 0))

lemma not_infinite_zero : ¬¨ infinite 0 := Œª hI, ne_zero_of_infinite hI rfl

lemma pos_of_infinite_pos {x : ‚Ñù*} : infinite_pos x ‚Üí x > 0 := Œª hip, hip 0

lemma neg_of_infinite_neg {x : ‚Ñù*} : infinite_neg x ‚Üí x < 0 := Œª hin, hin 0

lemma not_infinite_pos_of_infinite_neg {x : ‚Ñù*} : infinite_neg x ‚Üí ¬¨ infinite_pos x :=
Œª hn hp, not_lt_of_lt (hn 1) (hp 1)

lemma not_infinite_neg_of_infinite_pos {x : ‚Ñù*} : infinite_pos x ‚Üí ¬¨ infinite_neg x :=
imp_not_comm.mp not_infinite_pos_of_infinite_neg

lemma infinite_neg_neg_of_infinite_pos {x : ‚Ñù*} : infinite_pos x ‚Üí infinite_neg (-x) :=
Œª hp r, neg_lt.mp (hp (-r))

lemma infinite_pos_neg_of_infinite_neg {x : ‚Ñù*} : infinite_neg x ‚Üí infinite_pos (-x) :=
Œª hp r, lt_neg.mp (hp (-r))

lemma infinite_pos_iff_infinite_neg_neg {x : ‚Ñù*} : infinite_pos x ‚Üî infinite_neg (-x) :=
‚ü® infinite_neg_neg_of_infinite_pos, Œª hin, neg_neg x ‚ñ∏ infinite_pos_neg_of_infinite_neg hin ‚ü©

lemma infinite_neg_iff_infinite_pos_neg {x : ‚Ñù*} : infinite_neg x ‚Üî infinite_pos (-x) :=
‚ü® infinite_pos_neg_of_infinite_neg, Œª hin, neg_neg x ‚ñ∏ infinite_neg_neg_of_infinite_pos hin ‚ü©

lemma infinite_iff_infinite_neg {x : ‚Ñù*} : infinite x ‚Üî infinite (-x) :=
‚ü® Œª hi, or.cases_on hi
  (Œª hip, or.inr (infinite_neg_neg_of_infinite_pos hip))
  (Œª hin, or.inl (infinite_pos_neg_of_infinite_neg hin)),
 Œª hi, or.cases_on hi
  (Œª hipn, or.inr (infinite_neg_iff_infinite_pos_neg.mpr hipn))
  (Œª hinp, or.inl (infinite_pos_iff_infinite_neg_neg.mpr hinp))‚ü©

lemma not_infinite_of_infinitesimal {x : ‚Ñù*} : infinitesimal x ‚Üí ¬¨ infinite x :=
Œª hi hI, have hi' : _ := (hi 2 two_pos), or.dcases_on hI
  (Œª hip, have hip' : _ := hip 2, not_lt_of_lt hip' (by convert hi'.2; exact (zero_add 2).symm))
  (Œª hin, have hin' : _ := hin (-2), not_lt_of_lt hin' (by convert hi'.1; exact (zero_sub 2).symm))

lemma not_infinitesimal_of_infinite {x : ‚Ñù*} : infinite x ‚Üí ¬¨ infinitesimal x :=
imp_not_comm.mp not_infinite_of_infinitesimal

lemma not_infinitesimal_of_infinite_pos {x : ‚Ñù*} : infinite_pos x ‚Üí ¬¨ infinitesimal x :=
Œª hp, not_infinitesimal_of_infinite (or.inl hp)

lemma not_infinitesimal_of_infinite_neg {x : ‚Ñù*} : infinite_neg x ‚Üí ¬¨ infinitesimal x :=
Œª hn, not_infinitesimal_of_infinite (or.inr hn)

lemma infinite_pos_iff_infinite_and_pos {x : ‚Ñù*} : infinite_pos x ‚Üî (infinite x ‚àß x > 0) :=
‚ü® Œª hip, ‚ü®or.inl hip, hip 0‚ü©,
  Œª ‚ü®hi, hp‚ü©, hi.cases_on (Œª hip, hip) (Œª hin, false.elim (not_lt_of_lt hp (hin 0))) ‚ü©

lemma infinite_neg_iff_infinite_and_neg {x : ‚Ñù*} : infinite_neg x ‚Üî (infinite x ‚àß x < 0) :=
‚ü® Œª hip, ‚ü®or.inr hip, hip 0‚ü©,
  Œª ‚ü®hi, hp‚ü©, hi.cases_on (Œª hin, false.elim (not_lt_of_lt hp (hin 0))) (Œª hip, hip) ‚ü©

lemma infinite_pos_iff_infinite_of_pos {x : ‚Ñù*} (hp : x > 0) : infinite_pos x ‚Üî infinite x :=
by rw [infinite_pos_iff_infinite_and_pos]; exact ‚ü®Œª hI, hI.1, Œª hI, ‚ü®hI, hp‚ü©‚ü©

lemma infinite_pos_iff_infinite_of_nonneg {x : ‚Ñù*} (hp : x ‚â• 0) : infinite_pos x ‚Üî infinite x :=
or.cases_on (lt_or_eq_of_le hp) (infinite_pos_iff_infinite_of_pos)
  (Œª h, by rw h.symm; exact
  ‚ü®Œª hIP, false.elim (not_infinite_zero (or.inl hIP)), Œª hI, false.elim (not_infinite_zero hI)‚ü©)

lemma infinite_neg_iff_infinite_of_neg {x : ‚Ñù*} (hn : x < 0) : infinite_neg x ‚Üî infinite x :=
by rw [infinite_neg_iff_infinite_and_neg]; exact ‚ü®Œª hI, hI.1, Œª hI, ‚ü®hI, hn‚ü©‚ü©

lemma infinite_pos_abs_iff_infinite_abs {x : ‚Ñù*} : infinite_pos (abs x) ‚Üî infinite (abs x) :=
infinite_pos_iff_infinite_of_nonneg (abs_nonneg _)

lemma infinite_iff_infinite_pos_abs {x : ‚Ñù*} : infinite x ‚Üî infinite_pos (abs x) :=
‚ü® Œª hi d, or.cases_on hi
   (Œª hip, by rw [abs_of_pos (hip 0)]; exact hip d)
   (Œª hin, by rw [abs_of_neg (hin 0)]; exact lt_neg.mp (hin (-d))),
  Œª hipa, by { rcases (lt_trichotomy x 0) with h | h | h,
    { exact or.inr (infinite_neg_iff_infinite_pos_neg.mpr (by rwa abs_of_neg h at hipa)) },
    { exact false.elim (ne_zero_of_infinite (or.inl (by rw [h]; rwa [h, abs_zero] at hipa)) h) },
    { exact or.inl (by rwa abs_of_pos h at hipa) } } ‚ü©

lemma infinite_iff_infinite_abs {x : ‚Ñù*} : infinite x ‚Üî infinite (abs x) :=
by rw [‚Üêinfinite_pos_iff_infinite_of_nonneg (abs_nonneg _), infinite_iff_infinite_pos_abs]

lemma infinite_iff_abs_lt_abs {x : ‚Ñù*} : infinite x ‚Üî ‚àÄ r : ‚Ñù, (abs r : ‚Ñù*) < abs x :=
‚ü® Œª hI r, (of_abs U r) ‚ñ∏ infinite_iff_infinite_pos_abs.mp hI (abs r),
  Œª hR, or.cases_on (max_choice x (-x))
  (Œª h, or.inl $ Œª r, lt_of_le_of_lt (le_abs_self _) (h ‚ñ∏ (hR r)))
  (Œª h, or.inr $ Œª r, neg_lt_neg_iff.mp $ lt_of_le_of_lt (neg_le_abs_self _) (h ‚ñ∏ (hR r)))‚ü©

lemma infinite_pos_add_not_infinite_neg {x y : ‚Ñù*} :
  infinite_pos x ‚Üí ¬¨ infinite_neg y ‚Üí infinite_pos (x + y) :=
begin
  intros hip hnin r,
  cases not_forall.mp hnin with r‚ÇÇ hr‚ÇÇ,
  convert add_lt_add_of_lt_of_le (hip (r + -r‚ÇÇ)) (not_lt.mp hr‚ÇÇ) using 1,
  simp
end

lemma not_infinite_neg_add_infinite_pos {x y : ‚Ñù*} :
  ¬¨ infinite_neg x ‚Üí infinite_pos y ‚Üí infinite_pos (x + y) :=
Œª hx hy, by rw [add_comm]; exact infinite_pos_add_not_infinite_neg hy hx

lemma infinite_neg_add_not_infinite_pos {x y : ‚Ñù*} :
  infinite_neg x ‚Üí ¬¨ infinite_pos y ‚Üí infinite_neg (x + y) :=
by rw [@infinite_neg_iff_infinite_pos_neg x, @infinite_pos_iff_infinite_neg_neg y,
       @infinite_neg_iff_infinite_pos_neg (x + y), neg_add];
exact infinite_pos_add_not_infinite_neg

lemma not_infinite_pos_add_infinite_neg {x y : ‚Ñù*} :
  ¬¨ infinite_pos x ‚Üí infinite_neg y ‚Üí infinite_neg (x + y) :=
Œª hx hy, by rw [add_comm]; exact infinite_neg_add_not_infinite_pos hy hx

lemma infinite_pos_add_infinite_pos {x y : ‚Ñù*} :
  infinite_pos x ‚Üí infinite_pos y ‚Üí infinite_pos (x + y) :=
Œª hx hy, infinite_pos_add_not_infinite_neg hx (not_infinite_neg_of_infinite_pos hy)

lemma infinite_neg_add_infinite_neg {x y : ‚Ñù*} :
  infinite_neg x ‚Üí infinite_neg y ‚Üí infinite_neg (x + y) :=
Œª hx hy, infinite_neg_add_not_infinite_pos hx (not_infinite_pos_of_infinite_neg hy)

lemma infinite_pos_add_not_infinite {x y : ‚Ñù*} :
  infinite_pos x ‚Üí ¬¨ infinite y ‚Üí infinite_pos (x + y) :=
Œª hx hy, infinite_pos_add_not_infinite_neg hx (not_or_distrib.mp hy).2

lemma infinite_neg_add_not_infinite {x y : ‚Ñù*} :
  infinite_neg x ‚Üí ¬¨ infinite y ‚Üí infinite_neg (x + y) :=
Œª hx hy, infinite_neg_add_not_infinite_pos hx (not_or_distrib.mp hy).1

theorem infinite_pos_of_tendsto_top {f : ‚Ñï ‚Üí ‚Ñù} (hf : tendsto f at_top at_top) :
  infinite_pos (of_seq f) :=
Œª r, have hf' : _ := (tendsto_at_top_at_top _).mp hf,
Exists.cases_on (hf' (r + 1)) $ Œª i hi,
  have hi' : ‚àÄ (a : ‚Ñï), f a < (r + 1) ‚Üí a < i :=
    Œª a, by rw [‚Üênot_le, ‚Üênot_le]; exact not_imp_not.mpr (hi a),
  have hS : - {a : ‚Ñï | r < f a} ‚äÜ {a : ‚Ñï | a ‚â§ i} :=
    by simp only [set.compl_set_of, not_lt];
    exact Œª a har, le_of_lt (hi' a (lt_of_le_of_lt har (lt_add_one _))),
  (lt_def U).mpr $ mem_hyperfilter_of_finite_compl $
  (set.finite_le_nat _).subset hS

theorem infinite_neg_of_tendsto_bot {f : ‚Ñï ‚Üí ‚Ñù} (hf : tendsto f at_top at_bot) :
  infinite_neg (of_seq f) :=
Œª r, have hf' : _ := (tendsto_at_top_at_bot _).mp hf,
Exists.cases_on (hf' (r - 1)) $ Œª i hi,
  have hi' : ‚àÄ (a : ‚Ñï), r - 1 < f a ‚Üí a < i :=
    Œª a, by rw [‚Üênot_le, ‚Üênot_le]; exact not_imp_not.mpr (hi a),
  have hS : - {a : ‚Ñï | f a < r} ‚äÜ {a : ‚Ñï | a ‚â§ i} :=
    by simp only [set.compl_set_of, not_lt];
    exact Œª a har, le_of_lt (hi' a (lt_of_lt_of_le (sub_one_lt _) har)),
  (lt_def U).mpr $ mem_hyperfilter_of_finite_compl $
  (set.finite_le_nat _).subset hS

lemma not_infinite_neg {x : ‚Ñù*} : ¬¨ infinite x ‚Üí ¬¨ infinite (-x) :=
not_imp_not.mpr infinite_iff_infinite_neg.mpr

lemma not_infinite_add {x y : ‚Ñù*} (hx : ¬¨ infinite x) (hy : ¬¨ infinite y) :
  ¬¨ infinite (x + y) :=
have hx' : _ := exists_st_of_not_infinite hx, have hy' : _ := exists_st_of_not_infinite hy,
Exists.cases_on hx' $ Exists.cases_on hy' $
Œª r hr s hs, not_infinite_of_exists_st $ ‚ü®s + r, is_st_add hs hr‚ü©

theorem not_infinite_iff_exist_lt_gt {x : ‚Ñù*} : ¬¨ infinite x ‚Üî ‚àÉ r s : ‚Ñù, (r : ‚Ñù*) < x ‚àß x < s :=
‚ü® Œª hni,
Exists.dcases_on (not_forall.mp (not_or_distrib.mp hni).1) $
Exists.dcases_on (not_forall.mp (not_or_distrib.mp hni).2) $ Œª r hr s hs,
by rw [not_lt] at hr hs; exact ‚ü®r - 1, s + 1,
  ‚ü® lt_of_lt_of_le (by rw sub_eq_add_neg; norm_num) hr,
    lt_of_le_of_lt hs (by norm_num)‚ü© ‚ü©,
Œª hrs, Exists.dcases_on hrs $ Œª r hr, Exists.dcases_on hr $ Œª s hs,
  not_or_distrib.mpr ‚ü®not_forall.mpr ‚ü®s, lt_asymm (hs.2)‚ü©, not_forall.mpr ‚ü®r, lt_asymm (hs.1) ‚ü©‚ü©‚ü©

theorem not_infinite_real (r : ‚Ñù) : ¬¨ infinite r := by rw not_infinite_iff_exist_lt_gt; exact
‚ü® r - 1, r + 1,
  by rw [‚Üêof_eq_coe, ‚Üêof_eq_coe, ‚Üêof_lt U]; exact sub_one_lt _,
  by rw [‚Üêof_eq_coe, ‚Üêof_eq_coe, ‚Üêof_lt U]; exact lt_add_one _‚ü©

theorem not_real_of_infinite {x : ‚Ñù*} : infinite x ‚Üí ‚àÄ r : ‚Ñù, x ‚â† of r :=
Œª hi r hr,  not_infinite_real r $ @eq.subst _ infinite _ _ hr hi

-- FACTS ABOUT ST THAT REQUIRE SOME INFINITE MACHINERY

private lemma is_st_mul' {x y : ‚Ñù*} {r s : ‚Ñù} (hxr : is_st x r) (hys : is_st y s) (hs : s ‚â† 0) :
  is_st (x * y) (r * s) :=
have hxr' : _ := is_st_iff_abs_sub_lt_delta.mp hxr,
have hys' : _ := is_st_iff_abs_sub_lt_delta.mp hys,
have h : _ := not_infinite_iff_exist_lt_gt.mp $ not_imp_not.mpr infinite_iff_infinite_abs.mpr $
not_infinite_of_exists_st ‚ü®r, hxr‚ü©,
Exists.cases_on h $ Œª u h', Exists.cases_on h' $ Œª t ‚ü®hu, ht‚ü©,
is_st_iff_abs_sub_lt_delta.mpr $ Œª d hd,
   calc abs (x * y - of (r * s))
      = abs (x * y - (of r) * (of s)) : by simp
  ... = abs (x * (y - of s) + (x - of r) * (of s)) :
        by rw [mul_sub, sub_mul, add_sub, sub_add_cancel]
  ... ‚â§ abs (x * (y - of s)) + abs ((x - of r) * (of s)) : abs_add _ _
  ... ‚â§ abs x * abs (y - of s) + abs (x - of r) * abs (of s) : by simp only [abs_mul]
  ... ‚â§ abs x * ((d / t) / 2 : ‚Ñù) + ((d / abs s) / 2 : ‚Ñù) * abs s : add_le_add
        (mul_le_mul_of_nonneg_left (le_of_lt $ hys' _ $ half_pos $ div_pos hd $
          (of_lt U).mpr $ lt_of_le_of_lt (abs_nonneg _) ht) $ abs_nonneg _ )
        (mul_le_mul_of_nonneg_right (le_of_lt $ hxr' _ $ half_pos $ div_pos hd $
          abs_pos_of_ne_zero hs) $ abs_nonneg _)
  ... = (d / 2 * (abs x / t) + d / 2 : ‚Ñù*) : by
      { rw [div_div_eq_div_mul, mul_comm t 2, ‚Üêdiv_div_eq_div_mul,
            of_div U, div_div_eq_div_mul, mul_comm (abs s) 2,
        ‚Üêdiv_div_eq_div_mul, mul_div_comm, of_div U, of_div U, of_div U, of_abs U,
        div_mul_cancel _ (ne_of_gt (abs_pos_of_ne_zero ((of_ne_zero U.1 _).mp hs)))], refl }
  ... < (d / 2 * 1 + d / 2 : ‚Ñù*) :
        add_lt_add_right (mul_lt_mul_of_pos_left
        ((div_lt_one_iff_lt $ lt_of_le_of_lt (abs_nonneg x) ht).mpr ht) $
        half_pos $ of_lt_of_lt U hd) _
  ... = (d : ‚Ñù*) : by rw [mul_one, add_halves]

lemma is_st_mul {x y : ‚Ñù*} {r s : ‚Ñù} (hxr : is_st x r) (hys : is_st y s) :
  is_st (x * y) (r * s) :=
have h : _ := not_infinite_iff_exist_lt_gt.mp $
  not_imp_not.mpr infinite_iff_infinite_abs.mpr $ not_infinite_of_exists_st ‚ü®r, hxr‚ü©,
Exists.cases_on h $ Œª u h', Exists.cases_on h' $ Œª t ‚ü®hu, ht‚ü©,
begin
  by_cases hs : s = 0,
  { apply is_st_iff_abs_sub_lt_delta.mpr, intros d hd,
    have hys' : _ := is_st_iff_abs_sub_lt_delta.mp hys (d / t)
      (div_pos hd ((of_lt U).mpr (lt_of_le_of_lt (abs_nonneg x) ht))),
    rw [hs, of_zero, sub_zero] at hys',
    rw [hs, mul_zero, of_zero, sub_zero, abs_mul, mul_comm,
        ‚Üêdiv_mul_cancel (d : ‚Ñù*) (ne_of_gt (lt_of_le_of_lt (abs_nonneg x) ht)),
        ‚Üêof_div U],
    exact mul_lt_mul'' hys' ht (abs_nonneg _) (abs_nonneg _) },
  exact is_st_mul' hxr hys hs,
end

--AN INFINITE LEMMA THAT REQUIRES SOME MORE ST MACHINERY
lemma not_infinite_mul {x y : ‚Ñù*} (hx : ¬¨ infinite x) (hy : ¬¨ infinite y) :
  ¬¨ infinite (x * y) :=
have hx' : _ := exists_st_of_not_infinite hx, have hy' : _ := exists_st_of_not_infinite hy,
Exists.cases_on hx' $ Exists.cases_on hy' $ Œª r hr s hs, not_infinite_of_exists_st $
‚ü®s * r, is_st_mul hs hr‚ü©
---

lemma st_add {x y : ‚Ñù*} (hx : ¬¨infinite x) (hy : ¬¨infinite y) : st (x + y) = st x + st y :=
have hx' : _ := is_st_st' hx,
have hy' : _ := is_st_st' hy,
have hxy : _ := is_st_st' (not_infinite_add hx hy),
have hxy' : _ := is_st_add hx' hy',
is_st_unique hxy hxy'

lemma st_neg (x : ‚Ñù*) : st (-x) = - st x :=
if h : infinite x
then by rw [st_infinite h, st_infinite (infinite_iff_infinite_neg.mp h), neg_zero]
else is_st_unique (is_st_st' (not_infinite_neg h)) (is_st_neg (is_st_st' h))

lemma st_mul {x y : ‚Ñù*} (hx : ¬¨infinite x) (hy : ¬¨infinite y) : st (x * y) = (st x) * (st y) :=
have hx' : _ := is_st_st' hx,
have hy' : _ := is_st_st' hy,
have hxy : _ := is_st_st' (not_infinite_mul hx hy),
have hxy' : _ := is_st_mul hx' hy',
is_st_unique hxy hxy'

-- BASIC LEMMAS ABOUT INFINITESIMAL

theorem infinitesimal_def {x : ‚Ñù*} :
  infinitesimal x ‚Üî (‚àÄ r : ‚Ñù, r > 0 ‚Üí -(r : ‚Ñù*) < x ‚àß x < r) :=
‚ü® Œª hi r hr, by { convert (hi r hr), exact (zero_sub (of r)).symm, exact (zero_add (of r)).symm },
  Œª hi d hd, by { convert (hi d hd), exact zero_sub (of d), exact zero_add (of d) } ‚ü©

theorem lt_of_pos_of_infinitesimal {x : ‚Ñù*} : infinitesimal x ‚Üí ‚àÄ r : ‚Ñù, r > 0 ‚Üí x < r :=
Œª hi r hr, ((infinitesimal_def.mp hi) r hr).2

theorem lt_neg_of_pos_of_infinitesimal {x : ‚Ñù*} : infinitesimal x ‚Üí ‚àÄ r : ‚Ñù, r > 0 ‚Üí x > -r :=
Œª hi r hr, ((infinitesimal_def.mp hi) r hr).1

theorem gt_of_neg_of_infinitesimal {x : ‚Ñù*} : infinitesimal x ‚Üí ‚àÄ r : ‚Ñù, r < 0 ‚Üí x > r :=
Œª hi r hr, by convert ((infinitesimal_def.mp hi) (-r) (neg_pos.mpr hr)).1;
exact (neg_neg (of r)).symm

theorem abs_lt_real_iff_infinitesimal {x : ‚Ñù*} :
  infinitesimal x ‚Üî ‚àÄ r : ‚Ñù, r ‚â† 0 ‚Üí abs x < abs r :=
‚ü® Œª hi r hr, abs_lt.mpr (by rw ‚Üêof_abs U;
  exact infinitesimal_def.mp hi (abs r) (abs_pos_of_ne_zero hr)),
  Œª hR, infinitesimal_def.mpr $ Œª r hr, abs_lt.mp $
  (abs_of_pos $ of_lt_of_lt U hr : abs (r : ‚Ñù*) = r) ‚ñ∏ hR r $ ne_of_gt hr ‚ü©

lemma infinitesimal_zero : infinitesimal 0 := is_st_refl_real 0

lemma zero_of_infinitesimal_real {r : ‚Ñù} : infinitesimal r ‚Üí r = 0 := eq_of_is_st_real

lemma zero_iff_infinitesimal_real {r : ‚Ñù} : infinitesimal r ‚Üî r = 0 :=
‚ü®zero_of_infinitesimal_real, Œª hr, by rw hr; exact infinitesimal_zero‚ü©

lemma infinitesimal_add {x y : ‚Ñù*} (hx : infinitesimal x) (hy : infinitesimal y) :
  infinitesimal (x + y) :=
by simpa only [add_zero] using is_st_add hx hy

lemma infinitesimal_neg {x : ‚Ñù*} (hx : infinitesimal x) : infinitesimal (-x) :=
by simpa only [neg_zero] using is_st_neg hx

lemma infinitesimal_neg_iff {x : ‚Ñù*} : infinitesimal x ‚Üî infinitesimal (-x) :=
‚ü®infinitesimal_neg, Œª h, (neg_neg x) ‚ñ∏ @infinitesimal_neg (-x) h‚ü©

lemma infinitesimal_mul {x y : ‚Ñù*} (hx : infinitesimal x) (hy : infinitesimal y) :
  infinitesimal (x * y) :=
by simpa only [mul_zero] using is_st_mul hx hy

theorem infinitesimal_of_tendsto_zero {f : ‚Ñï ‚Üí ‚Ñù} :
  tendsto f at_top (ùìù 0) ‚Üí infinitesimal (of_seq f) :=
Œª hf d hd, by rw [sub_eq_add_neg, ‚Üêof_neg, ‚Üêof_add, ‚Üêof_add, zero_add, zero_add];
exact ‚ü®neg_lt_of_tendsto_zero_of_pos hf hd, lt_of_tendsto_zero_of_pos hf hd‚ü©

theorem infinitesimal_epsilon : infinitesimal Œµ :=
infinitesimal_of_tendsto_zero tendsto_inverse_at_top_nhds_0_nat

lemma not_real_of_infinitesimal_ne_zero (x : ‚Ñù*) :
  infinitesimal x ‚Üí x ‚â† 0 ‚Üí ‚àÄ r : ‚Ñù, x ‚â† of r :=
Œª hi hx r hr, hx (is_st_unique (hr.symm ‚ñ∏ is_st_refl_real r : is_st x r) hi ‚ñ∏ hr : x = of 0)

theorem infinitesimal_sub_is_st {x : ‚Ñù*} {r : ‚Ñù} (hxr : is_st x r) : infinitesimal (x - r) :=
show is_st (x + -r) 0, by rw ‚Üêadd_neg_self r; exact is_st_add hxr (is_st_refl_real (-r))

theorem infinitesimal_sub_st {x : ‚Ñù*} (hx : ¬¨infinite x) : infinitesimal (x - st x) :=
infinitesimal_sub_is_st $ is_st_st' hx

lemma infinite_pos_iff_infinitesimal_inv_pos {x : ‚Ñù*} :
  infinite_pos x ‚Üî (infinitesimal x‚Åª¬π ‚àß x‚Åª¬π > 0) :=
‚ü® Œª hip, ‚ü® infinitesimal_def.mpr $ Œª r hr,
  ‚ü® lt_trans (of_lt_of_lt U (neg_neg_of_pos hr)) (inv_pos.2 (hip 0)),
    (inv_lt (of_lt_of_lt U hr) (hip 0)).mp (by convert hip r‚Åª¬π) ‚ü©,
  inv_pos.2 $ hip 0 ‚ü©,
  Œª ‚ü®hi, hp‚ü© r, @classical.by_cases (r = 0) (x > (r : ‚Ñù*)) (Œª h, eq.substr h (inv_pos.mp hp)) $
  Œª h, lt_of_le_of_lt (of_le_of_le (le_abs_self r))
  ((inv_lt_inv (inv_pos.mp hp) (of_lt_of_lt U (abs_pos_of_ne_zero h))).mp
  ((infinitesimal_def.mp hi) ((abs r)‚Åª¬π) (inv_pos.2 (abs_pos_of_ne_zero h))).2) ‚ü©

lemma infinite_neg_iff_infinitesimal_inv_neg {x : ‚Ñù*} :
  infinite_neg x ‚Üî (infinitesimal x‚Åª¬π ‚àß x‚Åª¬π < 0) :=
‚ü® Œª hin, have hin' : _ := infinite_pos_iff_infinitesimal_inv_pos.mp
  (infinite_pos_neg_of_infinite_neg hin),
  by rwa [infinitesimal_neg_iff, ‚Üêneg_pos, neg_inv],
  Œª hin, have h0 : x ‚â† 0 := Œª h0, (lt_irrefl (0 : ‚Ñù*) (by convert hin.2; rw [h0, inv_zero])),
  by rwa [‚Üêneg_pos, infinitesimal_neg_iff, neg_inv,
    ‚Üêinfinite_pos_iff_infinitesimal_inv_pos, ‚Üêinfinite_neg_iff_infinite_pos_neg] at hin ‚ü©

theorem infinitesimal_inv_of_infinite {x : ‚Ñù*} : infinite x ‚Üí infinitesimal x‚Åª¬π :=
Œª hi, or.cases_on hi
 (Œª hip, (infinite_pos_iff_infinitesimal_inv_pos.mp hip).1)
 (Œª hin, (infinite_neg_iff_infinitesimal_inv_neg.mp hin).1)

theorem infinite_of_infinitesimal_inv {x : ‚Ñù*} (h0 : x ‚â† 0) (hi : infinitesimal x‚Åª¬π ) :
  infinite x :=
begin
  cases (lt_or_gt_of_ne h0) with hn hp,
  { exact or.inr (infinite_neg_iff_infinitesimal_inv_neg.mpr ‚ü®hi, inv_lt_zero.mpr hn‚ü©) },
  { exact or.inl (infinite_pos_iff_infinitesimal_inv_pos.mpr ‚ü®hi, inv_pos.mpr hp‚ü©) }
end

theorem infinite_iff_infinitesimal_inv {x : ‚Ñù*} (h0 : x ‚â† 0) : infinite x ‚Üî infinitesimal x‚Åª¬π :=
‚ü® infinitesimal_inv_of_infinite, infinite_of_infinitesimal_inv h0 ‚ü©

lemma infinitesimal_pos_iff_infinite_pos_inv {x : ‚Ñù*} :
  infinite_pos x‚Åª¬π ‚Üî (infinitesimal x ‚àß x > 0) :=
by convert infinite_pos_iff_infinitesimal_inv_pos; simp only [inv_inv']

lemma infinitesimal_neg_iff_infinite_neg_inv {x : ‚Ñù*} :
  infinite_neg x‚Åª¬π ‚Üî (infinitesimal x ‚àß x < 0) :=
by convert infinite_neg_iff_infinitesimal_inv_neg; simp only [inv_inv']

theorem infinitesimal_iff_infinite_inv {x : ‚Ñù*} (h : x ‚â† 0) : infinitesimal x ‚Üî infinite x‚Åª¬π :=
by convert (infinite_iff_infinitesimal_inv (inv_ne_zero h)).symm; simp only [inv_inv']

-- ST STUFF THAT REQUIRES INFINITESIMAL MACHINERY

theorem is_st_of_tendsto {f : ‚Ñï ‚Üí ‚Ñù} {r : ‚Ñù} (hf : tendsto f at_top (ùìù r)) :
  is_st (of_seq f) r :=
have hg : tendsto (Œª n, f n - r) at_top (ùìù 0) :=
  (sub_self r) ‚ñ∏ (hf.sub tendsto_const_nhds),
by rw [‚Üê(zero_add r), ‚Üê(sub_add_cancel f (Œª n, r))];
exact is_st_add (infinitesimal_of_tendsto_zero hg) (is_st_refl_real r)

lemma is_st_inv {x : ‚Ñù*} {r : ‚Ñù} (hi : ¬¨ infinitesimal x) : is_st x r ‚Üí is_st x‚Åª¬π r‚Åª¬π :=
Œª hxr, have h : x ‚â† 0 := (Œª h, hi (h.symm ‚ñ∏ infinitesimal_zero)),
have H : _ := exists_st_of_not_infinite $ not_imp_not.mpr (infinitesimal_iff_infinite_inv h).mpr hi,
Exists.cases_on H $ Œª s hs,
have H' : is_st 1 (r * s) := mul_inv_cancel h ‚ñ∏ is_st_mul hxr hs,
have H'' : s = r‚Åª¬π := one_div_eq_inv r ‚ñ∏ eq_one_div_of_mul_eq_one (eq_of_is_st_real H').symm,
H'' ‚ñ∏ hs

lemma st_inv (x : ‚Ñù*) : st x‚Åª¬π = (st x)‚Åª¬π :=
begin
  by_cases h0 : x = 0,
  rw [h0, inv_zero, ‚Üêof_zero, st_id_real, inv_zero],
  by_cases h1 : infinitesimal x,
  rw [st_infinite ((infinitesimal_iff_infinite_inv h0).mp h1), st_of_is_st h1, inv_zero],
  by_cases h2 : infinite x,
  rw [st_of_is_st (infinitesimal_inv_of_infinite h2), st_infinite h2, inv_zero],
  exact st_of_is_st (is_st_inv h1 (is_st_st' h2)),
end

-- INFINITE STUFF THAT REQUIRES INFINITESIMAL MACHINERY

lemma infinite_pos_omega : infinite_pos œâ :=
infinite_pos_iff_infinitesimal_inv_pos.mpr ‚ü®infinitesimal_epsilon, epsilon_pos‚ü©

lemma infinite_omega : infinite œâ :=
(infinite_iff_infinitesimal_inv omega_ne_zero).mpr infinitesimal_epsilon

lemma infinite_pos_mul_of_infinite_pos_not_infinitesimal_pos {x y : ‚Ñù*} :
  infinite_pos x ‚Üí ¬¨ infinitesimal y ‚Üí y > 0 ‚Üí infinite_pos (x * y) :=
Œª hx hy‚ÇÅ hy‚ÇÇ r, have hy‚ÇÅ' : _ := not_forall.mp (by rw infinitesimal_def at hy‚ÇÅ; exact hy‚ÇÅ),
Exists.dcases_on hy‚ÇÅ' $ Œª r‚ÇÅ hy‚ÇÅ'',
have hyr : _ := by rw [not_imp, ‚Üêabs_lt, not_lt, abs_of_pos hy‚ÇÇ] at hy‚ÇÅ''; exact hy‚ÇÅ'',
by rw [‚Üêdiv_mul_cancel r (ne_of_gt hyr.1), of_mul];
exact mul_lt_mul (hx (r / r‚ÇÅ)) hyr.2 (of_lt_of_lt U hyr.1) (le_of_lt (hx 0))

lemma infinite_pos_mul_of_not_infinitesimal_pos_infinite_pos {x y : ‚Ñù*} :
  ¬¨ infinitesimal x ‚Üí 0 < x ‚Üí infinite_pos y ‚Üí infinite_pos (x * y) :=
Œª hx hp hy, by rw mul_comm; exact infinite_pos_mul_of_infinite_pos_not_infinitesimal_pos hy hx hp

lemma infinite_pos_mul_of_infinite_neg_not_infinitesimal_neg {x y : ‚Ñù*} :
  infinite_neg x ‚Üí ¬¨ infinitesimal y ‚Üí y < 0 ‚Üí infinite_pos (x * y) :=
by rw [infinite_neg_iff_infinite_pos_neg, ‚Üêneg_pos, ‚Üêneg_mul_neg, infinitesimal_neg_iff];
exact infinite_pos_mul_of_infinite_pos_not_infinitesimal_pos

lemma infinite_pos_mul_of_not_infinitesimal_neg_infinite_neg {x y : ‚Ñù*} :
  ¬¨ infinitesimal x ‚Üí x < 0 ‚Üí infinite_neg y ‚Üí infinite_pos (x * y) :=
Œª hx hp hy, by rw mul_comm; exact infinite_pos_mul_of_infinite_neg_not_infinitesimal_neg hy hx hp

lemma infinite_neg_mul_of_infinite_pos_not_infinitesimal_neg {x y : ‚Ñù*} :
  infinite_pos x ‚Üí ¬¨ infinitesimal y ‚Üí y < 0 ‚Üí infinite_neg (x * y) :=
by rw [infinite_neg_iff_infinite_pos_neg, ‚Üêneg_pos, neg_mul_eq_mul_neg, infinitesimal_neg_iff];
exact infinite_pos_mul_of_infinite_pos_not_infinitesimal_pos

lemma infinite_neg_mul_of_not_infinitesimal_neg_infinite_pos {x y : ‚Ñù*} :
  ¬¨ infinitesimal x ‚Üí x < 0 ‚Üí infinite_pos y ‚Üí infinite_neg (x * y) :=
Œª hx hp hy, by rw mul_comm; exact infinite_neg_mul_of_infinite_pos_not_infinitesimal_neg hy hx hp

lemma infinite_neg_mul_of_infinite_neg_not_infinitesimal_pos {x y : ‚Ñù*} :
  infinite_neg x ‚Üí ¬¨ infinitesimal y ‚Üí 0 < y ‚Üí infinite_neg (x * y) :=
by rw [infinite_neg_iff_infinite_pos_neg, infinite_neg_iff_infinite_pos_neg, neg_mul_eq_neg_mul];
exact infinite_pos_mul_of_infinite_pos_not_infinitesimal_pos

lemma infinite_neg_mul_of_not_infinitesimal_pos_infinite_neg {x y : ‚Ñù*} :
  ¬¨ infinitesimal x ‚Üí x > 0 ‚Üí infinite_neg y ‚Üí infinite_neg (x * y) :=
Œª hx hp hy, by rw mul_comm; exact infinite_neg_mul_of_infinite_neg_not_infinitesimal_pos hy hx hp

lemma infinite_pos_mul_infinite_pos {x y : ‚Ñù*} :
  infinite_pos x ‚Üí infinite_pos y ‚Üí infinite_pos (x * y) :=
Œª hx hy, infinite_pos_mul_of_infinite_pos_not_infinitesimal_pos
hx (not_infinitesimal_of_infinite_pos hy) (hy 0)

lemma infinite_neg_mul_infinite_neg {x y : ‚Ñù*} :
  infinite_neg x ‚Üí infinite_neg y ‚Üí infinite_pos (x * y) :=
Œª hx hy, infinite_pos_mul_of_infinite_neg_not_infinitesimal_neg
hx (not_infinitesimal_of_infinite_neg hy) (hy 0)

lemma infinite_pos_mul_infinite_neg {x y : ‚Ñù*} :
  infinite_pos x ‚Üí infinite_neg y ‚Üí infinite_neg (x * y) :=
Œª hx hy, infinite_neg_mul_of_infinite_pos_not_infinitesimal_neg
hx (not_infinitesimal_of_infinite_neg hy) (hy 0)

lemma infinite_neg_mul_infinite_pos {x y : ‚Ñù*} :
  infinite_neg x ‚Üí infinite_pos y ‚Üí infinite_neg (x * y) :=
Œª hx hy, infinite_neg_mul_of_infinite_neg_not_infinitesimal_pos
hx (not_infinitesimal_of_infinite_pos hy) (hy 0)

lemma infinite_mul_of_infinite_not_infinitesimal {x y : ‚Ñù*} :
  infinite x ‚Üí ¬¨ infinitesimal y ‚Üí infinite (x * y) :=
Œª hx hy, have h0 : y < 0 ‚à® y > 0 := lt_or_gt_of_ne (Œª H0, hy (eq.substr H0 (is_st_refl_real 0))),
or.dcases_on hx
  (or.dcases_on h0
    (Œª H0 Hx, or.inr (infinite_neg_mul_of_infinite_pos_not_infinitesimal_neg Hx hy H0))
    (Œª H0 Hx, or.inl (infinite_pos_mul_of_infinite_pos_not_infinitesimal_pos Hx hy H0)))
  (or.dcases_on h0
    (Œª H0 Hx, or.inl (infinite_pos_mul_of_infinite_neg_not_infinitesimal_neg Hx hy H0))
    (Œª H0 Hx, or.inr (infinite_neg_mul_of_infinite_neg_not_infinitesimal_pos Hx hy H0)))

lemma infinite_mul_of_not_infinitesimal_infinite {x y : ‚Ñù*} :
  ¬¨ infinitesimal x ‚Üí infinite y ‚Üí infinite (x * y) :=
Œª hx hy, by rw [mul_comm]; exact infinite_mul_of_infinite_not_infinitesimal hy hx

lemma infinite_mul_infinite {x y : ‚Ñù*} : infinite x ‚Üí infinite y ‚Üí infinite (x * y) :=
Œª hx hy, infinite_mul_of_infinite_not_infinitesimal hx (not_infinitesimal_of_infinite hy)

end hyperreal
