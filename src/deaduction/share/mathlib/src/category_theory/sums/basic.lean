/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.eq_to_hom

/-#
Disjoint unions of categories, functors, and natural transformations.
-/

namespace category_theory

universes v‚ÇÅ u‚ÇÅ -- declare the `v`'s first; see `category_theory.category` for an explanation

open sum

section
variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÅ) [category.{v‚ÇÅ} D]

/--
`sum C D` gives the direct sum of two categories.
-/
instance sum : category.{v‚ÇÅ} (C ‚äï D) :=
{ hom :=
    Œª X Y, match X, Y with
    | inl X, inl Y := X ‚ü∂ Y
    | inl X, inr Y := pempty
    | inr X, inl Y := pempty
    | inr X, inr Y := X ‚ü∂ Y
    end,
  id :=
    Œª X, match X with
    | inl X := ùüô X
    | inr X := ùüô X
    end,
  comp :=
    Œª X Y Z f g, match X, Y, Z, f, g with
    | inl X, inl Y, inl Z, f, g := f ‚â´ g
    | inr X, inr Y, inr Z, f, g := f ‚â´ g
    end }

@[simp] lemma sum_comp_inl {P Q R : C} (f : (inl P : C ‚äï D) ‚ü∂ inl Q) (g : inl Q ‚ü∂ inl R) :
  f ‚â´ g = (f : P ‚ü∂ Q) ‚â´ (g : Q ‚ü∂ R) := rfl
@[simp] lemma sum_comp_inr {P Q R : D} (f : (inr P : C ‚äï D) ‚ü∂ inr Q) (g : inr Q ‚ü∂ inr R) :
  f ‚â´ g = (f : P ‚ü∂ Q) ‚â´ (g : Q ‚ü∂ R) := rfl
end

namespace sum

variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÅ) [category.{v‚ÇÅ} D]

/-- `inl_` is the functor `X ‚Ü¶ inl X`. -/
-- Unfortunate naming here, suggestions welcome.
@[simps] def inl_ : C ‚•§ C ‚äï D :=
{ obj := Œª X, inl X,
  map := Œª X Y f, f }

/-- `inr_` is the functor `X ‚Ü¶ inr X`. -/
@[simps] def inr_ : D ‚•§ C ‚äï D :=
{ obj := Œª X, inr X,
  map := Œª X Y f, f }

/-- The functor exchanging two direct summand categories. -/
def swap : C ‚äï D ‚•§ D ‚äï C :=
{ obj :=
    Œª X, match X with
    | inl X := inr X
    | inr X := inl X
    end,
  map :=
    Œª X Y f, match X, Y, f with
    | inl X, inl Y, f := f
    | inr X, inr Y, f := f
    end }

@[simp] lemma swap_obj_inl (X : C) : (swap C D).obj (inl X) = inr X := rfl
@[simp] lemma swap_obj_inr (X : D) : (swap C D).obj (inr X) = inl X := rfl
@[simp] lemma swap_map_inl {X Y : C} {f : inl X ‚ü∂ inl Y} : (swap C D).map f = f := rfl
@[simp] lemma swap_map_inr {X Y : D} {f : inr X ‚ü∂ inr Y} : (swap C D).map f = f := rfl

namespace swap

/-- `swap` gives an equivalence between `C ‚äï D` and `D ‚äï C`. -/
def equivalence : C ‚äï D ‚âå D ‚äï C :=
equivalence.mk (swap C D) (swap D C)
  (nat_iso.of_components (Œª X, eq_to_iso (by { cases X; refl })) (by tidy))
  (nat_iso.of_components (Œª X, eq_to_iso (by { cases X; refl })) (by tidy))

instance is_equivalence : is_equivalence (swap C D) :=
(by apply_instance : is_equivalence (equivalence C D).functor)

/-- The double swap on `C ‚äï D` is naturally isomorphic to the identity functor. -/
def symmetry : swap C D ‚ãô swap D C ‚âÖ ùü≠ (C ‚äï D) :=
(equivalence C D).unit_iso.symm

end swap

end sum

variables {A : Type u‚ÇÅ} [category.{v‚ÇÅ} A]
          {B : Type u‚ÇÅ} [category.{v‚ÇÅ} B]
          {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]
          {D : Type u‚ÇÅ} [category.{v‚ÇÅ} D]

namespace functor

/-- The sum of two functors. -/
def sum (F : A ‚•§ B) (G : C ‚•§ D) : A ‚äï C ‚•§ B ‚äï D :=
{ obj :=
    Œª X, match X with
    | inl X := inl (F.obj X)
    | inr X := inr (G.obj X)
    end,
  map :=
    Œª X Y f, match X, Y, f with
    | inl X, inl Y, f := F.map f
    | inr X, inr Y, f := G.map f
    end,
  map_id' := Œª X, begin cases X; unfold_aux, erw F.map_id, refl, erw G.map_id, refl end,
  map_comp' :=
    Œª X Y Z f g, match X, Y, Z, f, g with
    | inl X, inl Y, inl Z, f, g := by { unfold_aux, erw F.map_comp, refl }
    | inr X, inr Y, inr Z, f, g := by { unfold_aux, erw G.map_comp, refl }
    end }

@[simp] lemma sum_obj_inl (F : A ‚•§ B) (G : C ‚•§ D) (a : A) :
  (F.sum G).obj (inl a) = inl (F.obj a) := rfl
@[simp] lemma sum_obj_inr (F : A ‚•§ B) (G : C ‚•§ D) (c : C) :
  (F.sum G).obj (inr c) = inr (G.obj c) := rfl
@[simp] lemma sum_map_inl (F : A ‚•§ B) (G : C ‚•§ D) {a a' : A} (f : inl a ‚ü∂ inl a') :
  (F.sum G).map f = F.map f := rfl
@[simp] lemma sum_map_inr (F : A ‚•§ B) (G : C ‚•§ D) {c c' : C} (f : inr c ‚ü∂ inr c') :
  (F.sum G).map f = G.map f := rfl
end functor

namespace nat_trans

/-- The sum of two natural transformations. -/
def sum {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) : F.sum H ‚ü∂ G.sum I :=
{ app         :=
    Œª X, match X with
    | inl X := Œ±.app X
    | inr X := Œ≤.app X
    end,
  naturality' :=
    Œª X Y f, match X, Y, f with
    | inl X, inl Y, f := begin unfold_aux, erw Œ±.naturality, refl, end
    | inr X, inr Y, f := begin unfold_aux, erw Œ≤.naturality, refl, end
    end }

@[simp] lemma sum_app_inl {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (a : A) :
  (sum Œ± Œ≤).app (inl a) = Œ±.app a := rfl
@[simp] lemma sum_app_inr {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (c : C) :
  (sum Œ± Œ≤).app (inr c) = Œ≤.app c := rfl
end nat_trans

end category_theory
