/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison, Floris van Doorn
-/
import data.ulift
import data.fintype.basic
import category_theory.eq_to_hom

namespace category_theory

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ -- declare the `v`'s first; see `category_theory.category` for an explanation

/--
A type synonym for promoting any type to a category,
with the only morphisms being equalities.
-/
def discrete (Œ± : Type u‚ÇÅ) := Œ±

instance discrete_category (Œ± : Type u‚ÇÅ) : small_category (discrete Œ±) :=
{ hom  := Œª X Y, ulift (plift (X = Y)),
  id   := Œª X, ulift.up (plift.up rfl),
  comp := Œª X Y Z g f, by { rcases f with ‚ü®‚ü®rfl‚ü©‚ü©, exact g } }

namespace discrete

variables {Œ± : Type u‚ÇÅ}

instance [inhabited Œ±] : inhabited (discrete Œ±) :=
by { dsimp [discrete], apply_instance }

instance [fintype Œ±] : fintype (discrete Œ±) :=
by { dsimp [discrete], apply_instance }

instance fintype_fun [decidable_eq Œ±] (X Y : discrete Œ±) : fintype (X ‚ü∂ Y) :=
by { apply ulift.fintype }

@[simp] lemma id_def (X : discrete Œ±) : ulift.up (plift.up (eq.refl X)) = ùüô X := rfl

variables {C : Type u‚ÇÇ} [category.{v‚ÇÇ} C]

/--
Any function `I ‚Üí C` gives a functor `discrete I ‚•§ C`.
-/
def functor {I : Type u‚ÇÅ} (F : I ‚Üí C) : discrete I ‚•§ C :=
{ obj := F,
  map := Œª X Y f, begin cases f, cases f, cases f, exact ùüô (F X) end }

@[simp] lemma functor_obj  {I : Type u‚ÇÅ} (F : I ‚Üí C) (i : I) :
  (discrete.functor F).obj i = F i := rfl

lemma functor_map  {I : Type u‚ÇÅ} (F : I ‚Üí C) {i : discrete I} (f : i ‚ü∂ i) :
  (discrete.functor F).map f = ùüô (F i) :=
by { cases f, cases f, cases f, refl }

/--
For functors out of a discrete category,
a natural transformation is just a collection of maps,
as the naturality squares are trivial.
-/
def nat_trans {I : Type u‚ÇÅ} {F G : discrete I ‚•§ C}
  (f : Œ† i : discrete I, F.obj i ‚ü∂ G.obj i) : F ‚ü∂ G :=
{ app := f }

@[simp] lemma nat_trans_app  {I : Type u‚ÇÅ} {F G : discrete I ‚•§ C}
  (f : Œ† i : discrete I, F.obj i ‚ü∂ G.obj i) (i) : (discrete.nat_trans f).app i = f i :=
rfl

/--
For functors out of a discrete category,
a natural isomorphism is just a collection of isomorphisms,
as the naturality squares are trivial.
-/
def nat_iso {I : Type u‚ÇÅ} {F G : discrete I ‚•§ C}
  (f : Œ† i : discrete I, F.obj i ‚âÖ G.obj i) : F ‚âÖ G :=
nat_iso.of_components f (by tidy)

@[simp]
lemma nat_iso_hom_app {I : Type u‚ÇÅ} {F G : discrete I ‚•§ C}
  (f : Œ† i : discrete I, F.obj i ‚âÖ G.obj i) (i : I) :
  (discrete.nat_iso f).hom.app i = (f i).hom :=
rfl

@[simp]
lemma nat_iso_inv_app {I : Type u‚ÇÅ} {F G : discrete I ‚•§ C}
  (f : Œ† i : discrete I, F.obj i ‚âÖ G.obj i) (i : I) :
  (discrete.nat_iso f).inv.app i = (f i).inv :=
rfl

@[simp]
lemma nat_iso_app {I : Type u‚ÇÅ} {F G : discrete I ‚•§ C}
  (f : Œ† i : discrete I, F.obj i ‚âÖ G.obj i) (i : I) :
  (discrete.nat_iso f).app i = f i :=
by tidy

/--
We can promote a type-level `equiv` to
an equivalence between the corresponding `discrete` categories.
-/
@[simps]
def equivalence {I J : Type u‚ÇÅ} (e : I ‚âÉ J) : discrete I ‚âå discrete J :=
{ functor := discrete.functor (e : I ‚Üí J),
  inverse := discrete.functor (e.symm : J ‚Üí I),
  unit_iso := discrete.nat_iso (Œª i, eq_to_iso (by simp)),
  counit_iso := discrete.nat_iso (Œª j, eq_to_iso (by simp)), }

end discrete

namespace discrete
variables {J : Type v‚ÇÅ}

open opposite

/-- A discrete category is equivalent to its opposite category. -/
protected def opposite (Œ± : Type u‚ÇÅ) : (discrete Œ±)·µí·µñ ‚âå discrete Œ± :=
let F : discrete Œ± ‚•§ (discrete Œ±)·µí·µñ := discrete.functor (Œª x, op x) in
begin
  refine equivalence.mk (functor.left_op F) F _ (discrete.nat_iso $ Œª X, by simp [F]),
  refine nat_iso.of_components (Œª X, by simp [F]) _,
  tidy
end

variables {C : Type u‚ÇÇ} [category.{v‚ÇÇ} C]

@[simp] lemma functor_map_id
  (F : discrete J ‚•§ C) {j : discrete J} (f : j ‚ü∂ j) : F.map f = ùüô (F.obj j) :=
begin
  have h : f = ùüô j, { cases f, cases f, ext, },
  rw h,
  simp,
end

end discrete

end category_theory
