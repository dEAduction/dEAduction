/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import algebra.category.CommRing.basic
import algebra.category.Module.basic
import ring_theory.algebra

open category_theory
open category_theory.limits

universe u

variables (R : Type u) [comm_ring R]

/-- The category of R-modules and their morphisms. -/
structure Algebra :=
(carrier : Type u)
[is_ring : ring carrier]
[is_algebra : algebra R carrier]

attribute [instance] Algebra.is_ring Algebra.is_algebra

namespace Algebra

instance : has_coe_to_sort (Algebra R) :=
{ S := Type u, coe := Algebra.carrier }

instance : category (Algebra.{u} R) :=
{ hom   := Œª A B, A ‚Üí‚Çê[R] B,
  id    := Œª A, alg_hom.id R A,
  comp  := Œª A B C f g, g.comp f }

instance : concrete_category (Algebra.{u} R) :=
{ forget := { obj := Œª R, R, map := Œª R S f, (f : R ‚Üí S) },
  forget_faithful := { } }

instance has_forget_to_Ring : has_forget‚ÇÇ (Algebra R) Ring :=
{ forget‚ÇÇ :=
  { obj := Œª A, Ring.of A,
    map := Œª A‚ÇÅ A‚ÇÇ f, alg_hom.to_ring_hom f, } }

instance has_forget_to_Module : has_forget‚ÇÇ (Algebra R) (Module R) :=
{ forget‚ÇÇ :=
  { obj := Œª M, Module.of R M,
    map := Œª M‚ÇÅ M‚ÇÇ f, alg_hom.to_linear_map f, } }

/-- The object in the category of R-algebras associated to a type equipped with the appropriate typeclasses. -/
def of (X : Type u) [ring X] [algebra R X] : Algebra R := ‚ü®X‚ü©

instance : inhabited (Algebra R) := ‚ü®of R R‚ü©

@[simp]
lemma of_apply (X : Type u) [ring X] [algebra R X] :
  (of R X : Type u) = X := rfl

variables {R}

/-- Forgetting to the underlying type and then building the bundled object returns the original algebra. -/
@[simps]
def of_self_iso (M : Algebra R) : Algebra.of R M ‚âÖ M :=
{ hom := ùüô M, inv := ùüô M }

variables {R} {M N U : Module R}

@[simp] lemma id_apply (m : M) : (ùüô M : M ‚Üí M) m = m := rfl

@[simp] lemma coe_comp (f : M ‚ü∂ N) (g : N ‚ü∂ U) :
  ((f ‚â´ g) : M ‚Üí U) = g ‚àò f := rfl

end Algebra

variables {R}
variables {X‚ÇÅ X‚ÇÇ : Type u}

/-- Build an isomorphism in the category `Algebra R` from a `alg_equiv` between `algebra`s. -/
@[simps]
def alg_equiv.to_Algebra_iso
  {g‚ÇÅ : ring X‚ÇÅ} {g‚ÇÇ : ring X‚ÇÇ} {m‚ÇÅ : algebra R X‚ÇÅ} {m‚ÇÇ : algebra R X‚ÇÇ} (e : X‚ÇÅ ‚âÉ‚Çê[R] X‚ÇÇ) :
  Algebra.of R X‚ÇÅ ‚âÖ Algebra.of R X‚ÇÇ :=
{ hom := (e : X‚ÇÅ ‚Üí‚Çê[R] X‚ÇÇ),
  inv := (e.symm : X‚ÇÇ ‚Üí‚Çê[R] X‚ÇÅ),
  hom_inv_id' := begin ext, exact e.left_inv x, end,
  inv_hom_id' := begin ext, exact e.right_inv x, end, }

namespace category_theory.iso

/-- Build a `alg_equiv` from an isomorphism in the category `Algebra R`. -/
@[simps]
def to_alg_equiv {X Y : Algebra.{u} R} (i : X ‚âÖ Y) : X ‚âÉ‚Çê[R] Y :=
{ to_fun    := i.hom,
  inv_fun   := i.inv,
  left_inv  := by tidy,
  right_inv := by tidy,
  map_add'  := by tidy,
  map_mul'  := by tidy,
  commutes' := by tidy, }.

end category_theory.iso

/-- algebra equivalences between `algebras`s are the same as (isomorphic to) isomorphisms in `Algebra` -/
@[simps]
def alg_equiv_iso_Algebra_iso {X Y : Type u}
  [ring X] [ring Y] [algebra R X] [algebra R Y] :
  (X ‚âÉ‚Çê[R] Y) ‚âÖ (Algebra.of R X ‚âÖ Algebra.of R Y) :=
{ hom := Œª e, e.to_Algebra_iso,
  inv := Œª i, i.to_alg_equiv, }

instance (X : Type u) [ring X] [algebra R X] : has_coe (subalgebra R X) (Algebra R) :=
‚ü® Œª N, Algebra.of R N ‚ü©
