/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl

Hausdorff completions of uniform spaces.

The goal is to construct a left-adjoint to the inclusion of complete Hausdorff uniform spaces
into all uniform spaces. Any uniform space `Œ±` gets a completion `completion Œ±` and a morphism
(ie. uniformly continuous map) `completion : Œ± ‚Üí completion Œ±` which solves the universal
mapping problem of factorizing morphisms from `Œ±` to any complete Hausdorff uniform space `Œ≤`.
It means any uniformly continuous `f : Œ± ‚Üí Œ≤` gives rise to a unique morphism
`completion.extension f : completion Œ± ‚Üí Œ≤` such that `f = completion.extension f ‚àò completion Œ±`.
Actually `completion.extension f` is defined for all maps from `Œ±` to `Œ≤` but it has the desired
properties only if `f` is uniformly continuous.

Beware that `completion Œ±` is not injective if `Œ±` is not Hausdorff. But its image is always
dense. The adjoint functor acting on morphisms is then constructed by the usual abstract nonsense.
For every uniform spaces `Œ±` and `Œ≤`, it turns `f : Œ± ‚Üí Œ≤` into a morphism
  `completion.map f : completion Œ± ‚Üí completion Œ≤`
such that
  `coe ‚àò f = (completion.map f) ‚àò coe`
provided `f` is uniformly continuous. This construction is compatible with composition.

In this file we introduce the following concepts:

* `Cauchy Œ±` the uniform completion of the uniform space `Œ±` (using Cauchy filters). These are not
  minimal filters.

* `completion Œ± := quotient (separation_setoid (Cauchy Œ±))` the Hausdorff completion.

This formalization is mostly based on
  N. Bourbaki: General Topology
  I. M. James: Topologies and Uniformities
From a slightly different perspective in order to reuse material in topology.uniform_space.basic.
-/
import topology.uniform_space.abstract_completion

noncomputable theory
open filter set
universes u v w x

open_locale uniformity classical topological_space filter

/-- Space of Cauchy filters

This is essentially the completion of a uniform space. The embeddings are the neighbourhood filters.
This space is not minimal, the separated uniform space (i.e. quotiented on the intersection of all
entourages) is necessary for this.
-/
def Cauchy (Œ± : Type u) [uniform_space Œ±] : Type u := { f : filter Œ± // cauchy f }

namespace Cauchy

section
parameters {Œ± : Type u} [uniform_space Œ±]
variables {Œ≤ : Type v} {Œ≥ : Type w}
variables [uniform_space Œ≤] [uniform_space Œ≥]

def gen (s : set (Œ± √ó Œ±)) : set (Cauchy Œ± √ó Cauchy Œ±) :=
{p | s ‚àà filter.prod (p.1.val) (p.2.val) }

lemma monotone_gen : monotone gen :=
monotone_set_of $ assume p, @monotone_mem_sets (Œ±√óŒ±) (filter.prod (p.1.val) (p.2.val))

private lemma symm_gen : map prod.swap ((ùì§ Œ±).lift' gen) ‚â§ (ùì§ Œ±).lift' gen :=
calc map prod.swap ((ùì§ Œ±).lift' gen) =
  (ùì§ Œ±).lift' (Œªs:set (Œ±√óŒ±), {p | s ‚àà filter.prod (p.2.val) (p.1.val) }) :
  begin
    delta gen,
    simp [map_lift'_eq, monotone_set_of, monotone_mem_sets,
          function.comp, image_swap_eq_preimage_swap]
  end
  ... ‚â§ (ùì§ Œ±).lift' gen :
    uniformity_lift_le_swap
      (monotone_principal.comp (monotone_set_of $ assume p,
        @monotone_mem_sets (Œ±√óŒ±) ((filter.prod ((p.2).val) ((p.1).val)))))
      begin
        have h := Œª(p:Cauchy Œ±√óCauchy Œ±), @filter.prod_comm _ _ (p.2.val) (p.1.val),
        simp [function.comp, h],
        exact le_refl _
      end

private lemma comp_rel_gen_gen_subset_gen_comp_rel {s t : set (Œ±√óŒ±)} : comp_rel (gen s) (gen t) ‚äÜ
  (gen (comp_rel s t) : set (Cauchy Œ± √ó Cauchy Œ±)) :=
assume ‚ü®f, g‚ü© ‚ü®h, h‚ÇÅ, h‚ÇÇ‚ü©,
let ‚ü®t‚ÇÅ, (ht‚ÇÅ : t‚ÇÅ ‚àà f.val), t‚ÇÇ, (ht‚ÇÇ : t‚ÇÇ ‚àà h.val), (h‚ÇÅ : set.prod t‚ÇÅ t‚ÇÇ ‚äÜ s)‚ü© :=
  mem_prod_iff.mp h‚ÇÅ in
let ‚ü®t‚ÇÉ, (ht‚ÇÉ : t‚ÇÉ ‚àà h.val), t‚ÇÑ, (ht‚ÇÑ : t‚ÇÑ ‚àà g.val), (h‚ÇÇ : set.prod t‚ÇÉ t‚ÇÑ ‚äÜ t)‚ü© :=
  mem_prod_iff.mp h‚ÇÇ in
have t‚ÇÇ ‚à© t‚ÇÉ ‚àà h.val,
  from inter_mem_sets ht‚ÇÇ ht‚ÇÉ,
let ‚ü®x, xt‚ÇÇ, xt‚ÇÉ‚ü© :=
  nonempty_of_mem_sets (h.property.left) this in
(filter.prod f.val g.val).sets_of_superset
  (prod_mem_prod ht‚ÇÅ ht‚ÇÑ)
  (assume ‚ü®a, b‚ü© ‚ü®(ha : a ‚àà t‚ÇÅ), (hb : b ‚àà t‚ÇÑ)‚ü©,
    ‚ü®x,
      h‚ÇÅ (show (a, x) ‚àà set.prod t‚ÇÅ t‚ÇÇ, from ‚ü®ha, xt‚ÇÇ‚ü©),
      h‚ÇÇ (show (x, b) ‚àà set.prod t‚ÇÉ t‚ÇÑ, from ‚ü®xt‚ÇÉ, hb‚ü©)‚ü©)

private lemma comp_gen :
  ((ùì§ Œ±).lift' gen).lift' (Œªs, comp_rel s s) ‚â§ (ùì§ Œ±).lift' gen :=
calc ((ùì§ Œ±).lift' gen).lift' (Œªs, comp_rel s s) =
    (ùì§ Œ±).lift' (Œªs, comp_rel (gen s) (gen s)) :
  begin
    rw [lift'_lift'_assoc],
    exact monotone_gen,
    exact (monotone_comp_rel monotone_id monotone_id)
  end
  ... ‚â§ (ùì§ Œ±).lift' (Œªs, gen $ comp_rel s s) :
    lift'_mono' $ assume s hs, comp_rel_gen_gen_subset_gen_comp_rel
  ... = ((ùì§ Œ±).lift' $ Œªs:set(Œ±√óŒ±), comp_rel s s).lift' gen :
  begin
    rw [lift'_lift'_assoc],
    exact (monotone_comp_rel monotone_id monotone_id),
    exact monotone_gen
  end
  ... ‚â§ (ùì§ Œ±).lift' gen : lift'_mono comp_le_uniformity (le_refl _)

instance : uniform_space (Cauchy Œ±) :=
uniform_space.of_core
{ uniformity  := (ùì§ Œ±).lift' gen,
  refl        := principal_le_lift' $ assume s hs ‚ü®a, b‚ü© (a_eq_b : a = b),
    a_eq_b ‚ñ∏ a.property.right hs,
  symm        := symm_gen,
  comp        := comp_gen }

theorem mem_uniformity {s : set (Cauchy Œ± √ó Cauchy Œ±)} :
  s ‚àà ùì§ (Cauchy Œ±) ‚Üî ‚àÉ t ‚àà ùì§ Œ±, gen t ‚äÜ s :=
mem_lift'_sets monotone_gen

theorem mem_uniformity' {s : set (Cauchy Œ± √ó Cauchy Œ±)} :
  s ‚àà ùì§ (Cauchy Œ±) ‚Üî ‚àÉ t ‚àà ùì§ Œ±,
    ‚àÄ f g : Cauchy Œ±, t ‚àà filter.prod f.1 g.1 ‚Üí (f, g) ‚àà s :=
mem_uniformity.trans $ bex_congr $ Œª t h, prod.forall

/-- Embedding of `Œ±` into its completion -/
def pure_cauchy (a : Œ±) : Cauchy Œ± :=
‚ü®pure a, cauchy_pure‚ü©

lemma uniform_inducing_pure_cauchy : uniform_inducing (pure_cauchy : Œ± ‚Üí Cauchy Œ±) :=
‚ü®have (preimage (Œª (x : Œ± √ó Œ±), (pure_cauchy (x.fst), pure_cauchy (x.snd))) ‚àò gen) = id,
      from funext $ assume s, set.ext $ assume ‚ü®a‚ÇÅ, a‚ÇÇ‚ü©,
        by simp [preimage, gen, pure_cauchy, prod_principal_principal],
    calc comap (Œª (x : Œ± √ó Œ±), (pure_cauchy (x.fst), pure_cauchy (x.snd))) ((ùì§ Œ±).lift' gen)
          = (ùì§ Œ±).lift' (preimage (Œª (x : Œ± √ó Œ±), (pure_cauchy (x.fst), pure_cauchy (x.snd))) ‚àò gen) :
        comap_lift'_eq monotone_gen
      ... = ùì§ Œ± : by simp [this]‚ü©

lemma uniform_embedding_pure_cauchy : uniform_embedding (pure_cauchy : Œ± ‚Üí Cauchy Œ±) :=
{ inj := assume a‚ÇÅ a‚ÇÇ h, pure_injective $ subtype.ext.1 h,
  ..uniform_inducing_pure_cauchy }

lemma pure_cauchy_dense : ‚àÄx, x ‚àà closure (range pure_cauchy) :=
assume f,
have h_ex : ‚àÄ s ‚àà ùì§ (Cauchy Œ±), ‚àÉy:Œ±, (f, pure_cauchy y) ‚àà s, from
  assume s hs,
  let ‚ü®t'', ht''‚ÇÅ, (ht''‚ÇÇ : gen t'' ‚äÜ s)‚ü© := (mem_lift'_sets monotone_gen).mp hs in
  let ‚ü®t', ht'‚ÇÅ, ht'‚ÇÇ‚ü© := comp_mem_uniformity_sets ht''‚ÇÅ in
  have t' ‚àà filter.prod (f.val) (f.val),
    from f.property.right ht'‚ÇÅ,
  let ‚ü®t, ht, (h : set.prod t t ‚äÜ t')‚ü© := mem_prod_same_iff.mp this in
  let ‚ü®x, (hx : x ‚àà t)‚ü© := nonempty_of_mem_sets f.property.left ht in
  have t'' ‚àà filter.prod f.val (pure x),
    from mem_prod_iff.mpr ‚ü®t, ht, {y:Œ± | (x, y) ‚àà t'},
      h $ mk_mem_prod hx hx,
      assume ‚ü®a, b‚ü© ‚ü®(h‚ÇÅ : a ‚àà t), (h‚ÇÇ : (x, b) ‚àà t')‚ü©,
        ht'‚ÇÇ $ prod_mk_mem_comp_rel (@h (a, x) ‚ü®h‚ÇÅ, hx‚ü©) h‚ÇÇ‚ü©,
  ‚ü®x, ht''‚ÇÇ $ by dsimp [gen]; exact this‚ü©,
begin
  simp [closure_eq_cluster_pts, cluster_pt, nhds_eq_uniformity, lift'_inf_principal_eq, set.inter_comm],
  exact (lift'_ne_bot_iff $ monotone_inter monotone_const monotone_preimage).mpr
    (assume s hs,
      let ‚ü®y, hy‚ü© := h_ex s hs in
      have pure_cauchy y ‚àà range pure_cauchy ‚à© {y : Cauchy Œ± | (f, y) ‚àà s},
        from ‚ü®mem_range_self y, hy‚ü©,
      ‚ü®_, this‚ü©)
end

lemma dense_inducing_pure_cauchy : dense_inducing pure_cauchy :=
uniform_inducing_pure_cauchy.dense_inducing pure_cauchy_dense

lemma dense_embedding_pure_cauchy : dense_embedding pure_cauchy :=
uniform_embedding_pure_cauchy.dense_embedding pure_cauchy_dense

lemma nonempty_Cauchy_iff : nonempty (Cauchy Œ±) ‚Üî nonempty Œ± :=
begin
  split ; rintro ‚ü®c‚ü©,
  { have := eq_univ_iff_forall.1 dense_embedding_pure_cauchy.to_dense_inducing.closure_range c,
    obtain ‚ü®_, ‚ü®_, a, _‚ü©‚ü© := mem_closure_iff.1 this _ is_open_univ trivial,
    exact ‚ü®a‚ü© },
  { exact ‚ü®pure_cauchy c‚ü© }
end

section
set_option eqn_compiler.zeta true
instance : complete_space (Cauchy Œ±) :=
complete_space_extension
  uniform_inducing_pure_cauchy
  pure_cauchy_dense $
  assume f hf,
  let f' : Cauchy Œ± := ‚ü®f, hf‚ü© in
  have map pure_cauchy f ‚â§ (ùì§ $ Cauchy Œ±).lift' (preimage (prod.mk f')),
    from le_lift' $ assume s hs,
    let ‚ü®t, ht‚ÇÅ, (ht‚ÇÇ : gen t ‚äÜ s)‚ü© := (mem_lift'_sets monotone_gen).mp hs in
    let ‚ü®t', ht', (h : set.prod t' t' ‚äÜ t)‚ü© := mem_prod_same_iff.mp (hf.right ht‚ÇÅ) in
    have t' ‚äÜ { y : Œ± | (f', pure_cauchy y) ‚àà gen t },
      from assume x hx, (filter.prod f (pure x)).sets_of_superset (prod_mem_prod ht' hx) h,
    f.sets_of_superset ht' $ subset.trans this (preimage_mono ht‚ÇÇ),
  ‚ü®f', by simp [nhds_eq_uniformity]; assumption‚ü©
end

instance [inhabited Œ±] : inhabited (Cauchy Œ±) :=
‚ü®pure_cauchy $ default Œ±‚ü©

instance [h : nonempty Œ±] : nonempty (Cauchy Œ±) :=
h.rec_on $ assume a, nonempty.intro $ Cauchy.pure_cauchy a

section extend

def extend (f : Œ± ‚Üí Œ≤) : (Cauchy Œ± ‚Üí Œ≤) :=
if uniform_continuous f then
  dense_inducing_pure_cauchy.extend f
else
  Œª x, f (classical.inhabited_of_nonempty $ nonempty_Cauchy_iff.1 ‚ü®x‚ü©).default

variables [separated_space Œ≤]

lemma extend_pure_cauchy {f : Œ± ‚Üí Œ≤} (hf : uniform_continuous f) (a : Œ±) :
  extend f (pure_cauchy a) = f a :=
begin
  rw [extend, if_pos hf],
  exact uniformly_extend_of_ind uniform_inducing_pure_cauchy pure_cauchy_dense hf _
end

variables [_root_.complete_space Œ≤]

lemma uniform_continuous_extend {f : Œ± ‚Üí Œ≤} : uniform_continuous (extend f) :=
begin
  by_cases hf : uniform_continuous f,
  { rw [extend, if_pos hf],
    exact uniform_continuous_uniformly_extend uniform_inducing_pure_cauchy pure_cauchy_dense hf },
  { rw [extend, if_neg hf],
    exact uniform_continuous_of_const (assume a b, by congr) }
end

end extend

end

theorem Cauchy_eq
  {Œ± : Type*} [inhabited Œ±] [uniform_space Œ±] [complete_space Œ±] [separated_space Œ±] {f g : Cauchy Œ±} :
  Lim f.1 = Lim g.1 ‚Üî (f, g) ‚àà separation_rel (Cauchy Œ±) :=
begin
  split,
  { intros e s hs,
    rcases Cauchy.mem_uniformity'.1 hs with ‚ü®t, tu, ts‚ü©,
    apply ts,
    rcases comp_mem_uniformity_sets tu with ‚ü®d, du, dt‚ü©,
    refine mem_prod_iff.2
      ‚ü®_, f.2.le_nhds_Lim (mem_nhds_right (Lim f.1) du),
       _, g.2.le_nhds_Lim (mem_nhds_left (Lim g.1) du), Œª x h, _‚ü©,
    cases x with a b, cases h with h‚ÇÅ h‚ÇÇ,
    rw ‚Üê e at h‚ÇÇ,
    exact dt ‚ü®_, h‚ÇÅ, h‚ÇÇ‚ü© },
  { intros H,
    refine separated_def.1 (by apply_instance) _ _ (Œª t tu, _),
    rcases mem_uniformity_is_closed tu with ‚ü®d, du, dc, dt‚ü©,
    refine H {p | (Lim p.1.1, Lim p.2.1) ‚àà t}
      (Cauchy.mem_uniformity'.2 ‚ü®d, du, Œª f g h, _‚ü©),
    rcases mem_prod_iff.1 h with ‚ü®x, xf, y, yg, h‚ü©,
    have limc : ‚àÄ (f : Cauchy Œ±) (x ‚àà f.1), Lim f.1 ‚àà closure x,
    { intros f x xf,
      rw closure_eq_cluster_pts,
      exact ne_bot_of_le_ne_bot f.2.1
        (le_inf f.2.le_nhds_Lim (le_principal_iff.2 xf)) },
    have := (closure_subset_iff_subset_of_is_closed dc).2 h,
    rw closure_prod_eq at this,
    refine dt (this ‚ü®_, _‚ü©); dsimp; apply limc; assumption }
end

section
local attribute [instance] uniform_space.separation_setoid

lemma separated_pure_cauchy_injective {Œ± : Type*} [uniform_space Œ±] [s : separated_space Œ±] :
  function.injective (Œªa:Œ±, ‚ü¶pure_cauchy a‚üß) | a b h :=
separated_def.1 s _ _ $ assume s hs,
let ‚ü®t, ht, hts‚ü© :=
  by rw [‚Üê (@uniform_embedding_pure_cauchy Œ± _).comap_uniformity, filter.mem_comap_sets] at hs; exact hs in
have (pure_cauchy a, pure_cauchy b) ‚àà t, from quotient.exact h t ht,
@hts (a, b) this

end

end Cauchy

local attribute [instance] uniform_space.separation_setoid

open Cauchy set

namespace uniform_space
variables (Œ± : Type*) [uniform_space Œ±]
variables {Œ≤ : Type*} [uniform_space Œ≤]
variables {Œ≥ : Type*} [uniform_space Œ≥]

instance complete_space_separation [h : complete_space Œ±] :
  complete_space (quotient (separation_setoid Œ±)) :=
‚ü®assume f, assume hf : cauchy f,
  have cauchy (f.comap (Œªx, ‚ü¶x‚üß)), from
    cauchy_comap comap_quotient_le_uniformity hf $
      comap_ne_bot_of_surj hf.left $ assume b, quotient.exists_rep _,
  let ‚ü®x, (hx : f.comap (Œªx, ‚ü¶x‚üß) ‚â§ ùìù x)‚ü© := complete_space.complete this in
  ‚ü®‚ü¶x‚üß, calc f = map (Œªx, ‚ü¶x‚üß) (f.comap (Œªx, ‚ü¶x‚üß)) :
      (map_comap $ univ_mem_sets' $ assume b, quotient.exists_rep _).symm
    ... ‚â§ map (Œªx, ‚ü¶x‚üß) (ùìù x) : map_mono hx
    ... ‚â§ _ : continuous_iff_continuous_at.mp uniform_continuous_quotient_mk.continuous _‚ü©‚ü©


/-- Hausdorff completion of `Œ±` -/
def completion := quotient (separation_setoid $ Cauchy Œ±)

namespace completion

instance [inhabited Œ±] : inhabited (completion Œ±) :=
by unfold completion; apply_instance

@[priority 50]
instance : uniform_space (completion Œ±) := by dunfold completion ; apply_instance

instance : complete_space (completion Œ±) := by dunfold completion ; apply_instance

instance : separated_space (completion Œ±) := by dunfold completion ; apply_instance

instance : regular_space (completion Œ±) := separated_regular

/-- Automatic coercion from `Œ±` to its completion. Not always injective. -/
instance : has_coe_t Œ± (completion Œ±) := ‚ü®quotient.mk ‚àò pure_cauchy‚ü© -- note [use has_coe_t]

protected lemma coe_eq : (coe : Œ± ‚Üí completion Œ±) = quotient.mk ‚àò pure_cauchy := rfl

lemma comap_coe_eq_uniformity :
  (ùì§ _).comap (Œª(p:Œ±√óŒ±), ((p.1 : completion Œ±), (p.2 : completion Œ±))) = ùì§ Œ± :=
begin
  have : (Œªx:Œ±√óŒ±, ((x.1 : completion Œ±), (x.2 : completion Œ±))) =
    (Œªx:(Cauchy Œ±)√ó(Cauchy Œ±), (‚ü¶x.1‚üß, ‚ü¶x.2‚üß)) ‚àò (Œªx:Œ±√óŒ±, (pure_cauchy x.1, pure_cauchy x.2)),
  { ext ‚ü®a, b‚ü©; simp; refl },
  rw [this, ‚Üê filter.comap_comap_comp],
  change filter.comap _ (filter.comap _ (ùì§ $ quotient $ separation_setoid $ Cauchy Œ±)) = ùì§ Œ±,
  rw [comap_quotient_eq_uniformity, uniform_embedding_pure_cauchy.comap_uniformity]
end

lemma uniform_inducing_coe : uniform_inducing  (coe : Œ± ‚Üí completion Œ±) :=
‚ü®comap_coe_eq_uniformity Œ±‚ü©

variables {Œ±}

lemma dense : dense_range (coe : Œ± ‚Üí completion Œ±) :=
begin
  rw [dense_range_iff_closure_range, completion.coe_eq, range_comp],
  exact quotient_dense_of_dense pure_cauchy_dense
end

variables (Œ±)

def cpkg {Œ± : Type*} [uniform_space Œ±] : abstract_completion Œ± :=
{ space := completion Œ±,
  coe := coe,
  uniform_struct := by apply_instance,
  complete := by apply_instance,
  separation := by apply_instance,
  uniform_inducing := completion.uniform_inducing_coe Œ±,
  dense := completion.dense }

instance abstract_completion.inhabited : inhabited (abstract_completion Œ±) :=
‚ü®cpkg‚ü©

local attribute [instance]
abstract_completion.uniform_struct abstract_completion.complete abstract_completion.separation

lemma nonempty_completion_iff : nonempty (completion Œ±) ‚Üî nonempty Œ± :=
(dense_range.nonempty (cpkg.dense)).symm

lemma uniform_continuous_coe : uniform_continuous (coe : Œ± ‚Üí completion Œ±) :=
cpkg.uniform_continuous_coe

lemma continuous_coe : continuous (coe : Œ± ‚Üí completion Œ±) :=
cpkg.continuous_coe

lemma uniform_embedding_coe [separated_space Œ±] : uniform_embedding  (coe : Œ± ‚Üí completion Œ±) :=
{ comap_uniformity := comap_coe_eq_uniformity Œ±,
  inj := separated_pure_cauchy_injective }

variable {Œ±}

lemma dense_inducing_coe : dense_inducing (coe : Œ± ‚Üí completion Œ±) :=
{ dense := dense,
  ..(uniform_inducing_coe Œ±).inducing }

lemma dense_embedding_coe [separated_space Œ±]: dense_embedding (coe : Œ± ‚Üí completion Œ±) :=
{ inj := separated_pure_cauchy_injective,
  ..dense_inducing_coe }

lemma dense‚ÇÇ : dense_range (Œªx:Œ± √ó Œ≤, ((x.1 : completion Œ±), (x.2 : completion Œ≤))) :=
dense.prod dense

lemma dense‚ÇÉ :
  dense_range (Œªx:Œ± √ó (Œ≤ √ó Œ≥), ((x.1 : completion Œ±), ((x.2.1 : completion Œ≤), (x.2.2 : completion Œ≥)))) :=
dense.prod dense‚ÇÇ

@[elab_as_eliminator]
lemma induction_on {p : completion Œ± ‚Üí Prop}
  (a : completion Œ±) (hp : is_closed {a | p a}) (ih : ‚àÄa:Œ±, p a) : p a :=
is_closed_property dense hp ih a

@[elab_as_eliminator]
lemma induction_on‚ÇÇ {p : completion Œ± ‚Üí completion Œ≤ ‚Üí Prop}
  (a : completion Œ±) (b : completion Œ≤)
  (hp : is_closed {x : completion Œ± √ó completion Œ≤ | p x.1 x.2})
  (ih : ‚àÄ(a:Œ±) (b:Œ≤), p a b) : p a b :=
have ‚àÄx : completion Œ± √ó completion Œ≤, p x.1 x.2, from
  is_closed_property dense‚ÇÇ hp $ assume ‚ü®a, b‚ü©, ih a b,
this (a, b)

@[elab_as_eliminator]
lemma induction_on‚ÇÉ {p : completion Œ± ‚Üí completion Œ≤ ‚Üí completion Œ≥ ‚Üí Prop}
  (a : completion Œ±) (b : completion Œ≤) (c : completion Œ≥)
  (hp : is_closed {x : completion Œ± √ó completion Œ≤ √ó completion Œ≥ | p x.1 x.2.1 x.2.2})
  (ih : ‚àÄ(a:Œ±) (b:Œ≤) (c:Œ≥), p a b c) : p a b c :=
have ‚àÄx : completion Œ± √ó completion Œ≤ √ó completion Œ≥, p x.1 x.2.1 x.2.2, from
  is_closed_property dense‚ÇÉ hp $ assume ‚ü®a, b, c‚ü©, ih a b c,
this (a, b, c)

lemma ext [t2_space Œ≤] {f g : completion Œ± ‚Üí Œ≤} (hf : continuous f) (hg : continuous g)
  (h : ‚àÄa:Œ±, f a = g a) : f = g :=
cpkg.funext hf hg h

section extension
variables {f : Œ± ‚Üí Œ≤}

/-- "Extension" to the completion. It is defined for any map `f` but
returns an arbitrary constant value if `f` is not uniformly continuous -/
protected def extension (f : Œ± ‚Üí Œ≤) : completion Œ± ‚Üí Œ≤ :=
cpkg.extend f

variables [separated_space Œ≤]

@[simp] lemma extension_coe (hf : uniform_continuous f) (a : Œ±) : (completion.extension f) a = f a :=
cpkg.extend_coe hf a

variables [complete_space Œ≤]

lemma uniform_continuous_extension : uniform_continuous (completion.extension f) :=
cpkg.uniform_continuous_extend

lemma continuous_extension : continuous (completion.extension f) :=
cpkg.continuous_extend

lemma extension_unique (hf : uniform_continuous f) {g : completion Œ± ‚Üí Œ≤} (hg : uniform_continuous g)
  (h : ‚àÄ a : Œ±, f a = g (a : completion Œ±)) : completion.extension f = g :=
cpkg.extend_unique hf hg h

@[simp] lemma extension_comp_coe {f : completion Œ± ‚Üí Œ≤} (hf : uniform_continuous f) :
  completion.extension (f ‚àò coe) = f :=
cpkg.extend_comp_coe hf
end extension

section map
variables {f : Œ± ‚Üí Œ≤}

/-- Completion functor acting on morphisms -/
protected def map (f : Œ± ‚Üí Œ≤) : completion Œ± ‚Üí completion Œ≤ :=
cpkg.map cpkg f

lemma uniform_continuous_map : uniform_continuous (completion.map f) :=
cpkg.uniform_continuous_map cpkg f

lemma continuous_map : continuous (completion.map f) :=
cpkg.continuous_map cpkg f

@[simp] lemma map_coe (hf : uniform_continuous f) (a : Œ±) : (completion.map f) a = f a :=
cpkg.map_coe cpkg hf a

lemma map_unique {f : Œ± ‚Üí Œ≤} {g : completion Œ± ‚Üí completion Œ≤}
  (hg : uniform_continuous g) (h : ‚àÄa:Œ±, ‚Üë(f a) = g a) : completion.map f = g :=
cpkg.map_unique cpkg hg h

@[simp] lemma map_id : completion.map (@id Œ±) = id :=
cpkg.map_id

lemma extension_map [complete_space Œ≥] [separated_space Œ≥] {f : Œ≤ ‚Üí Œ≥} {g : Œ± ‚Üí Œ≤}
  (hf : uniform_continuous f) (hg : uniform_continuous g) :
  completion.extension f ‚àò completion.map g = completion.extension (f ‚àò g) :=
completion.ext (continuous_extension.comp continuous_map) continuous_extension $
  by intro a; simp only [hg, hf, hf.comp hg, (‚àò), map_coe, extension_coe]

lemma map_comp {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : uniform_continuous g) (hf : uniform_continuous f) :
  completion.map g ‚àò completion.map f = completion.map (g ‚àò f) :=
extension_map ((uniform_continuous_coe _).comp hg) hf

end map

/- In this section we construct isomorphisms between the completion of a uniform space and the
completion of its separation quotient -/
section separation_quotient_completion

def completion_separation_quotient_equiv (Œ± : Type u) [uniform_space Œ±] :
  completion (separation_quotient Œ±) ‚âÉ completion Œ± :=
begin
  refine ‚ü®completion.extension (separation_quotient.lift (coe : Œ± ‚Üí completion Œ±)),
    completion.map quotient.mk, _, _‚ü©,
  { assume a,
    refine induction_on a (is_closed_eq (continuous_map.comp continuous_extension) continuous_id) _,
    rintros ‚ü®a‚ü©,
    show completion.map quotient.mk (completion.extension (separation_quotient.lift coe) ‚Üë‚ü¶a‚üß) = ‚Üë‚ü¶a‚üß,
    rw [extension_coe (separation_quotient.uniform_continuous_lift _),
      separation_quotient.lift_mk (uniform_continuous_coe Œ±),
      completion.map_coe uniform_continuous_quotient_mk] ; apply_instance },
  { assume a,
    refine completion.induction_on a (is_closed_eq (continuous_extension.comp continuous_map) continuous_id) _,
    assume a,
    rw [map_coe uniform_continuous_quotient_mk,
      extension_coe (separation_quotient.uniform_continuous_lift _),
      separation_quotient.lift_mk (uniform_continuous_coe Œ±) _] ; apply_instance }
end

lemma uniform_continuous_completion_separation_quotient_equiv :
  uniform_continuous ‚áë(completion_separation_quotient_equiv Œ±) :=
uniform_continuous_extension

lemma uniform_continuous_completion_separation_quotient_equiv_symm :
  uniform_continuous ‚áë(completion_separation_quotient_equiv Œ±).symm :=
uniform_continuous_map

end separation_quotient_completion

section extension‚ÇÇ
variables (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥)
open function

protected def extension‚ÇÇ (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) : completion Œ± ‚Üí completion Œ≤ ‚Üí Œ≥ :=
cpkg.extend‚ÇÇ cpkg f

variables [separated_space Œ≥] {f}

@[simp] lemma extension‚ÇÇ_coe_coe (hf : uniform_continuous‚ÇÇ f) (a : Œ±) (b : Œ≤) :
  completion.extension‚ÇÇ f a b = f a b :=
cpkg.extension‚ÇÇ_coe_coe cpkg hf a b

variables [complete_space Œ≥] (f)

lemma uniform_continuous_extension‚ÇÇ : uniform_continuous‚ÇÇ (completion.extension‚ÇÇ f) :=
cpkg.uniform_continuous_extension‚ÇÇ cpkg f

end extension‚ÇÇ

section map‚ÇÇ
open function

protected def map‚ÇÇ (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) : completion Œ± ‚Üí completion Œ≤ ‚Üí completion Œ≥ :=
cpkg.map‚ÇÇ cpkg cpkg f

lemma uniform_continuous_map‚ÇÇ (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) : uniform_continuous‚ÇÇ (completion.map‚ÇÇ f) :=
cpkg.uniform_continuous_map‚ÇÇ cpkg cpkg f

lemma continuous_map‚ÇÇ {Œ¥} [topological_space Œ¥] {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥}
  {a : Œ¥ ‚Üí completion Œ±} {b : Œ¥ ‚Üí completion Œ≤} (ha : continuous a) (hb : continuous b) :
  continuous (Œªd:Œ¥, completion.map‚ÇÇ f (a d) (b d)) :=
cpkg.continuous_map‚ÇÇ cpkg cpkg ha hb

lemma map‚ÇÇ_coe_coe (a : Œ±) (b : Œ≤) (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) (hf : uniform_continuous‚ÇÇ f) :
  completion.map‚ÇÇ f (a : completion Œ±) (b : completion Œ≤) = f a b :=
cpkg.map‚ÇÇ_coe_coe cpkg cpkg a b f hf

end map‚ÇÇ
end completion
end uniform_space
