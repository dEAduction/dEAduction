/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import topology.metric_space.baire
import analysis.normed_space.operator_norm

/-!
# Banach open mapping theorem

This file contains the Banach open mapping theorem, i.e., the fact that a bijective
bounded linear map between Banach spaces has a bounded inverse.
-/

open function metric set filter finset
open_locale classical topological_space big_operators

variables {ùïú : Type*} [nondiscrete_normed_field ùïú]
{E : Type*} [normed_group E] [normed_space ùïú E]
{F : Type*} [normed_group F] [normed_space ùïú F]
(f : E ‚ÜíL[ùïú] F)
include ùïú


variable [complete_space F]

/--
First step of the proof of the Banach open mapping theorem (using completeness of `F`):
by Baire's theorem, there exists a ball in `E` whose image closure has nonempty interior.
Rescaling everything, it follows that any `y ‚àà F` is arbitrarily well approached by
images of elements of norm at most `C * ‚à•y‚à•`.
For further use, we will only need such an element whose image
is within distance `‚à•y‚à•/2` of `y`, to apply an iterative process. -/
@[nolint ge_or_gt] -- see Note [nolint_ge]
lemma exists_approx_preimage_norm_le (surj : surjective f) :
  ‚àÉC ‚â• 0, ‚àÄy, ‚àÉx, dist (f x) y ‚â§ 1/2 * ‚à•y‚à• ‚àß ‚à•x‚à• ‚â§ C * ‚à•y‚à• :=
begin
  have A : (‚ãÉn:‚Ñï, closure (f '' (ball 0 n))) = univ,
  { refine subset.antisymm (subset_univ _) (Œªy hy, _),
    rcases surj y with ‚ü®x, hx‚ü©,
    rcases exists_nat_gt (‚à•x‚à•) with ‚ü®n, hn‚ü©,
    refine mem_Union.2 ‚ü®n, subset_closure _‚ü©,
    refine (mem_image _ _ _).2 ‚ü®x, ‚ü®_, hx‚ü©‚ü©,
    rwa [mem_ball, dist_eq_norm, sub_zero] },
  have : ‚àÉ (n : ‚Ñï) x, x ‚àà interior (closure (f '' (ball 0 n))) :=
    nonempty_interior_of_Union_of_closed (Œªn, is_closed_closure) A,
  simp only [mem_interior_iff_mem_nhds, mem_nhds_iff] at this,
  rcases this with ‚ü®n, a, Œµ, ‚ü®Œµpos, H‚ü©‚ü©,
  rcases normed_field.exists_one_lt_norm ùïú with ‚ü®c, hc‚ü©,
  refine ‚ü®(Œµ/2)‚Åª¬π * ‚à•c‚à• * 2 * n, _, Œªy, _‚ü©,
  { refine mul_nonneg (mul_nonneg (mul_nonneg _ (norm_nonneg _)) (by norm_num)) _,
    refine inv_nonneg.2 (div_nonneg' (le_of_lt Œµpos) (by norm_num)),
    exact nat.cast_nonneg n },
  { by_cases hy : y = 0,
    { use 0, simp [hy] },
    { rcases rescale_to_shell hc (half_pos Œµpos) hy with ‚ü®d, hd, ydle, leyd, dinv‚ü©,
      let Œ¥ := ‚à•d‚à• * ‚à•y‚à•/4,
      have Œ¥pos : 0 < Œ¥ :=
        div_pos (mul_pos (norm_pos_iff.2 hd) (norm_pos_iff.2 hy)) (by norm_num),
      have : a + d ‚Ä¢ y ‚àà ball a Œµ,
        by simp [dist_eq_norm, lt_of_le_of_lt ydle (half_lt_self Œµpos)],
      rcases metric.mem_closure_iff.1 (H this) _ Œ¥pos with ‚ü®z‚ÇÅ, z‚ÇÅim, h‚ÇÅ‚ü©,
      rcases (mem_image _ _ _).1 z‚ÇÅim with ‚ü®x‚ÇÅ, hx‚ÇÅ, xz‚ÇÅ‚ü©,
      rw ‚Üê xz‚ÇÅ at h‚ÇÅ,
      rw [mem_ball, dist_eq_norm, sub_zero] at hx‚ÇÅ,
      have : a ‚àà ball a Œµ, by { simp, exact Œµpos },
      rcases metric.mem_closure_iff.1 (H this) _ Œ¥pos with ‚ü®z‚ÇÇ, z‚ÇÇim, h‚ÇÇ‚ü©,
      rcases (mem_image _ _ _).1 z‚ÇÇim with ‚ü®x‚ÇÇ, hx‚ÇÇ, xz‚ÇÇ‚ü©,
      rw ‚Üê xz‚ÇÇ at h‚ÇÇ,
      rw [mem_ball, dist_eq_norm, sub_zero] at hx‚ÇÇ,
      let x := x‚ÇÅ - x‚ÇÇ,
      have I : ‚à•f x - d ‚Ä¢ y‚à• ‚â§ 2 * Œ¥ := calc
        ‚à•f x - d ‚Ä¢ y‚à• = ‚à•f x‚ÇÅ - (a + d ‚Ä¢ y) - (f x‚ÇÇ - a)‚à• :
          by { congr' 1, simp only [x, f.map_sub], abel }
        ... ‚â§ ‚à•f x‚ÇÅ - (a + d ‚Ä¢ y)‚à• + ‚à•f x‚ÇÇ - a‚à• :
          norm_sub_le _ _
        ... ‚â§ Œ¥ + Œ¥ : begin
            apply add_le_add,
            { rw [‚Üê dist_eq_norm, dist_comm], exact le_of_lt h‚ÇÅ },
            { rw [‚Üê dist_eq_norm, dist_comm], exact le_of_lt h‚ÇÇ }
          end
        ... = 2 * Œ¥ : (two_mul _).symm,
      have J : ‚à•f (d‚Åª¬π ‚Ä¢ x) - y‚à• ‚â§ 1/2 * ‚à•y‚à• := calc
        ‚à•f (d‚Åª¬π ‚Ä¢ x) - y‚à• = ‚à•d‚Åª¬π ‚Ä¢ f x - (d‚Åª¬π * d) ‚Ä¢ y‚à• :
          by rwa [f.map_smul _, inv_mul_cancel, one_smul]
        ... = ‚à•d‚Åª¬π ‚Ä¢ (f x - d ‚Ä¢ y)‚à• : by rw [mul_smul, smul_sub]
        ... = ‚à•d‚à•‚Åª¬π * ‚à•f x - d ‚Ä¢ y‚à• : by rw [norm_smul, normed_field.norm_inv]
        ... ‚â§ ‚à•d‚à•‚Åª¬π * (2 * Œ¥) : begin
            apply mul_le_mul_of_nonneg_left I,
            rw inv_nonneg,
            exact norm_nonneg _
          end
        ... = (‚à•d‚à•‚Åª¬π * ‚à•d‚à•) * ‚à•y‚à• /2 : by { simp only [Œ¥], ring }
        ... = ‚à•y‚à•/2 : by { rw [inv_mul_cancel, one_mul],  simp [norm_eq_zero, hd] }
        ... = (1/2) * ‚à•y‚à• : by ring,
      rw ‚Üê dist_eq_norm at J,
      have ùïú : ‚à•d‚Åª¬π ‚Ä¢ x‚à• ‚â§ (Œµ / 2)‚Åª¬π * ‚à•c‚à• * 2 * ‚Üën * ‚à•y‚à• := calc
        ‚à•d‚Åª¬π ‚Ä¢ x‚à• = ‚à•d‚à•‚Åª¬π * ‚à•x‚ÇÅ - x‚ÇÇ‚à• : by rw [norm_smul, normed_field.norm_inv]
        ... ‚â§ ((Œµ / 2)‚Åª¬π * ‚à•c‚à• * ‚à•y‚à•) * (n + n) : begin
            refine mul_le_mul dinv _ (norm_nonneg _) _,
            { exact le_trans (norm_sub_le _ _) (add_le_add (le_of_lt hx‚ÇÅ) (le_of_lt hx‚ÇÇ)) },
            { apply mul_nonneg (mul_nonneg _ (norm_nonneg _)) (norm_nonneg _),
              exact inv_nonneg.2 (le_of_lt (half_pos Œµpos)) }
          end
        ... = (Œµ / 2)‚Åª¬π * ‚à•c‚à• * 2 * ‚Üën * ‚à•y‚à• : by ring,
      exact ‚ü®d‚Åª¬π ‚Ä¢ x, J, ùïú‚ü© } },
end

variable [complete_space E]

/-- The Banach open mapping theorem: if a bounded linear map between Banach spaces is onto, then
any point has a preimage with controlled norm. -/
@[nolint ge_or_gt] -- see Note [nolint_ge]
theorem exists_preimage_norm_le (surj : surjective f) :
  ‚àÉC > 0, ‚àÄy, ‚àÉx, f x = y ‚àß ‚à•x‚à• ‚â§ C * ‚à•y‚à• :=
begin
  obtain ‚ü®C, C0, hC‚ü© := exists_approx_preimage_norm_le f surj,
  /- Second step of the proof: starting from `y`, we want an exact preimage of `y`. Let `g y` be
  the approximate preimage of `y` given by the first step, and `h y = y - f(g y)` the part that
  has no preimage yet. We will iterate this process, taking the approximate preimage of `h y`,
  leaving only `h^2 y` without preimage yet, and so on. Let `u n` be the approximate preimage
  of `h^n y`. Then `u` is a converging series, and by design the sum of the series is a
  preimage of `y`. This uses completeness of `E`. -/
  choose g hg using hC,
  let h := Œªy, y - f (g y),
  have hle : ‚àÄy, ‚à•h y‚à• ‚â§ (1/2) * ‚à•y‚à•,
  { assume y,
    rw [‚Üê dist_eq_norm, dist_comm],
    exact (hg y).1 },
  refine ‚ü®2 * C + 1, by linarith, Œªy, _‚ü©,
  have hnle : ‚àÄn:‚Ñï, ‚à•(h^[n]) y‚à• ‚â§ (1/2)^n * ‚à•y‚à•,
  { assume n,
    induction n with n IH,
    { simp only [one_div_eq_inv, nat.nat_zero_eq_zero, one_mul, iterate_zero_apply,
        pow_zero] },
    { rw [iterate_succ'],
      apply le_trans (hle _) _,
      rw [pow_succ, mul_assoc],
      apply mul_le_mul_of_nonneg_left IH,
      norm_num } },
  let u := Œªn, g((h^[n]) y),
  have ule : ‚àÄn, ‚à•u n‚à• ‚â§ (1/2)^n * (C * ‚à•y‚à•),
  { assume n,
    apply le_trans (hg _).2 _,
    calc C * ‚à•(h^[n]) y‚à• ‚â§ C * ((1/2)^n * ‚à•y‚à•) : mul_le_mul_of_nonneg_left (hnle n) C0
         ... = (1 / 2) ^ n * (C * ‚à•y‚à•) : by ring },
  have sNu : summable (Œªn, ‚à•u n‚à•),
  { refine summable_of_nonneg_of_le (Œªn, norm_nonneg _) ule _,
    exact summable.mul_right _ (summable_geometric_of_lt_1 (by norm_num) (by norm_num)) },
  have su : summable u := summable_of_summable_norm sNu,
  let x := tsum u,
  have x_ineq : ‚à•x‚à• ‚â§ (2 * C + 1) * ‚à•y‚à• := calc
    ‚à•x‚à• ‚â§ (‚àë'n, ‚à•u n‚à•) : norm_tsum_le_tsum_norm sNu
    ... ‚â§ (‚àë'n, (1/2)^n * (C * ‚à•y‚à•)) :
      tsum_le_tsum ule sNu (summable.mul_right _ summable_geometric_two)
    ... = (‚àë'n, (1/2)^n) * (C * ‚à•y‚à•) : by { rw tsum_mul_right, exact summable_geometric_two }
    ... = 2 * (C * ‚à•y‚à•) : by rw tsum_geometric_two
    ... = 2 * C * ‚à•y‚à• + 0 : by rw [add_zero, mul_assoc]
    ... ‚â§ 2 * C * ‚à•y‚à• + ‚à•y‚à• : add_le_add (le_refl _) (norm_nonneg _)
    ... = (2 * C + 1) * ‚à•y‚à• : by ring,
  have fsumeq : ‚àÄn:‚Ñï, f(‚àë i in finset.range n, u i) = y - (h^[n]) y,
  { assume n,
    induction n with n IH,
    { simp [f.map_zero] },
    { rw [sum_range_succ, f.map_add, IH, iterate_succ'],
      simp [u, h, sub_eq_add_neg, add_comm, add_left_comm] } },
  have : tendsto (Œªn, ‚àë i in range n, u i) at_top (ùìù x) :=
    su.has_sum.tendsto_sum_nat,
  have L‚ÇÅ : tendsto (Œªn, f(‚àë i in range n, u i)) at_top (ùìù (f x)) :=
    (f.continuous.tendsto _).comp this,
  simp only [fsumeq] at L‚ÇÅ,
  have L‚ÇÇ : tendsto (Œªn, y - (h^[n]) y) at_top (ùìù (y - 0)),
  { refine tendsto_const_nhds.sub _,
    rw tendsto_iff_norm_tendsto_zero,
    simp only [sub_zero],
    refine squeeze_zero (Œª_, norm_nonneg _) hnle _,
    have : 0 = 0 * ‚à•y‚à•, by rw zero_mul,
    rw this,
    refine tendsto.mul _ tendsto_const_nhds,
    exact tendsto_pow_at_top_nhds_0_of_lt_1 (by norm_num) (by norm_num) },
  have feq : f x = y - 0,
  { apply tendsto_nhds_unique _ L‚ÇÅ L‚ÇÇ,
    simp },
  rw sub_zero at feq,
  exact ‚ü®x, feq, x_ineq‚ü©
end

/-- The Banach open mapping theorem: a surjective bounded linear map between Banach spaces is open. -/
theorem open_mapping (surj : surjective f) : is_open_map f :=
begin
  assume s hs,
  rcases exists_preimage_norm_le f surj with ‚ü®C, Cpos, hC‚ü©,
  refine is_open_iff.2 (Œªy yfs, _),
  rcases mem_image_iff_bex.1 yfs with ‚ü®x, xs, fxy‚ü©,
  rcases is_open_iff.1 hs x xs with ‚ü®Œµ, Œµpos, hŒµ‚ü©,
  refine ‚ü®Œµ/C, div_pos Œµpos Cpos, Œªz hz, _‚ü©,
  rcases hC (z-y) with ‚ü®w, wim, wnorm‚ü©,
  have : f (x + w) = z, by { rw [f.map_add, wim, fxy, add_sub_cancel'_right] },
  rw ‚Üê this,
  have : x + w ‚àà ball x Œµ := calc
    dist (x+w) x = ‚à•w‚à• : by { rw dist_eq_norm, simp }
    ... ‚â§ C * ‚à•z - y‚à• : wnorm
    ... < C * (Œµ/C) : begin
        apply mul_lt_mul_of_pos_left _ Cpos,
        rwa [mem_ball, dist_eq_norm] at hz,
      end
    ... = Œµ : mul_div_cancel' _ (ne_of_gt Cpos),
  exact set.mem_image_of_mem _ (hŒµ this)
end

namespace linear_equiv

/-- If a bounded linear map is a bijection, then its inverse is also a bounded linear map. -/
theorem continuous_symm (e : E ‚âÉ‚Çó[ùïú] F) (h : continuous e) :
  continuous e.symm :=
begin
  intros s hs,
  rw [‚Üê e.image_eq_preimage],
  rw [‚Üê e.coe_coe] at h ‚ä¢,
  exact open_mapping ‚ü®‚Üëe, h‚ü© e.surjective s hs
end

/-- Associating to a linear equivalence between Banach spaces a continuous linear equivalence when
the direct map is continuous, thanks to the Banach open mapping theorem that ensures that the
inverse map is also continuous. -/
def to_continuous_linear_equiv_of_continuous (e : E ‚âÉ‚Çó[ùïú] F) (h : continuous e) :
  E ‚âÉL[ùïú] F :=
{ continuous_to_fun := h,
  continuous_inv_fun := e.continuous_symm h,
  ..e }

@[simp] lemma coe_fn_to_continuous_linear_equiv_of_continuous (e : E ‚âÉ‚Çó[ùïú] F) (h : continuous e) :
  ‚áë(e.to_continuous_linear_equiv_of_continuous h) = e := rfl

@[simp] lemma coe_fn_to_continuous_linear_equiv_of_continuous_symm (e : E ‚âÉ‚Çó[ùïú] F)
  (h : continuous e) :
  ‚áë(e.to_continuous_linear_equiv_of_continuous h).symm = e.symm := rfl

end linear_equiv

namespace continuous_linear_equiv

/-- Convert a bijective continuous linear map `f : E ‚ÜíL[ùïú] F` between two Banach spaces
to a continuous linear equivalence. -/
noncomputable def of_bijective (f : E ‚ÜíL[ùïú] F) (hinj : f.ker = ‚ä•) (hsurj : f.range = ‚ä§) :
  E ‚âÉL[ùïú] F :=
(linear_equiv.of_bijective ‚Üëf hinj hsurj).to_continuous_linear_equiv_of_continuous f.continuous

@[simp] lemma coe_fn_of_bijective (f : E ‚ÜíL[ùïú] F) (hinj : f.ker = ‚ä•) (hsurj : f.range = ‚ä§) :
  ‚áë(of_bijective f hinj hsurj) = f := rfl

@[simp] lemma of_bijective_symm_apply_apply (f : E ‚ÜíL[ùïú] F) (hinj : f.ker = ‚ä•)
  (hsurj : f.range = ‚ä§) (x : E) :
  (of_bijective f hinj hsurj).symm (f x) = x :=
(of_bijective f hinj hsurj).symm_apply_apply x

@[simp] lemma of_bijective_apply_symm_apply (f : E ‚ÜíL[ùïú] F) (hinj : f.ker = ‚ä•)
  (hsurj : f.range = ‚ä§) (y : F) :
  f ((of_bijective f hinj hsurj).symm y) = y :=
(of_bijective f hinj hsurj).apply_symm_apply y

end continuous_linear_equiv
