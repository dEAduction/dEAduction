/-
Copyright (c) 2019 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import category_theory.endomorphism
import category_theory.category.Cat
import algebra.category.Mon.basic

/-!
# Single-object category

Single object category with a given monoid of endomorphisms.  It is defined to facilitate transfering
some definitions and lemmas (e.g., conjugacy etc.) from category theory to monoids and groups.

## Main definitions

Given a type `Œ±` with a monoid structure, `single_obj Œ±` is `unit` type with `category` structure
such that `End (single_obj Œ±).star` is the monoid `Œ±`.  This can be extended to a functor `Mon ‚•§
Cat`.

If `Œ±` is a group, then `single_obj Œ±` is a groupoid.

An element `x : Œ±` can be reinterpreted as an element of `End (single_obj.star Œ±)` using
`single_obj.to_End`.

## Implementation notes

- `category_struct.comp` on `End (single_obj.star Œ±)` is `flip (*)`, not `(*)`. This way
  multiplication on `End` agrees with the multiplication on `Œ±`.

- By default, Lean puts instances into `category_theory` namespace instead of
  `category_theory.single_obj`, so we give all names explicitly.
-/

universes u v w

namespace category_theory
/-- Type tag on `unit` used to define single-object categories and groupoids. -/
def single_obj (Œ± : Type u) : Type := unit

namespace single_obj

variables (Œ± : Type u)

/-- One and `flip (*)` become `id` and `comp` for morphisms of the single object category. -/
instance category_struct [has_one Œ±] [has_mul Œ±] : category_struct (single_obj Œ±) :=
{ hom := Œª _ _, Œ±,
  comp := Œª _ _ _ x y, y * x,
  id := Œª _, 1 }

/-- Monoid laws become category laws for the single object category. -/
instance category [monoid Œ±] : category (single_obj Œ±) :=
{ comp_id' := Œª _ _, one_mul,
  id_comp' := Œª _ _, mul_one,
  assoc' := Œª _ _ _ _ x y z, (mul_assoc z y x).symm }

/-- Groupoid structure on `single_obj Œ±` -/
instance groupoid [group Œ±] : groupoid (single_obj Œ±) :=
{ inv := Œª _ _ x, x‚Åª¬π,
  inv_comp' := Œª _ _, mul_right_inv,
  comp_inv' := Œª _ _, mul_left_inv }

protected def star : single_obj Œ± := unit.star

/-- The endomorphisms monoid of the only object in `single_obj Œ±` is equivalent to the original
     monoid Œ±. -/
def to_End [monoid Œ±] : Œ± ‚âÉ* End (single_obj.star Œ±) :=
{ map_mul' := Œª x y, rfl,
  .. equiv.refl Œ± }

lemma to_End_def [monoid Œ±] (x : Œ±) : to_End Œ± x = x := rfl

/-- There is a 1-1 correspondence between monoid homomorphisms `Œ± ‚Üí Œ≤` and functors between the
    corresponding single-object categories. It means that `single_obj` is a fully faithful
    functor. -/
def map_hom (Œ± : Type u) (Œ≤ : Type v) [monoid Œ±] [monoid Œ≤] :
  (Œ± ‚Üí* Œ≤) ‚âÉ (single_obj Œ±) ‚•§ (single_obj Œ≤) :=
{ to_fun := Œª f,
  { obj := id,
    map := Œª _ _, ‚áëf,
    map_id' := Œª _, f.map_one,
    map_comp' := Œª _ _ _ x y, f.map_mul y x },
  inv_fun := Œª f,
    { to_fun := @functor.map _ _ _ _ f (single_obj.star Œ±) (single_obj.star Œ±),
      map_one' := f.map_id _,
      map_mul' := Œª x y, f.map_comp y x },
  left_inv := Œª ‚ü®f, h‚ÇÅ, h‚ÇÇ‚ü©, rfl,
  right_inv := Œª f, by cases f; obviously }

lemma map_hom_id (Œ± : Type u) [monoid Œ±] : map_hom Œ± Œ± (monoid_hom.id Œ±) = ùü≠ _ := rfl

lemma map_hom_comp {Œ± : Type u} {Œ≤ : Type v} [monoid Œ±] [monoid Œ≤] (f : Œ± ‚Üí* Œ≤)
  {Œ≥ : Type w} [monoid Œ≥] (g : Œ≤ ‚Üí* Œ≥) :
  map_hom Œ± Œ≥ (g.comp f) = map_hom Œ± Œ≤ f ‚ãô map_hom Œ≤ Œ≥ g :=
rfl

end single_obj

end category_theory

open category_theory

namespace monoid_hom

/-- Reinterpret a monoid homomorphism `f : Œ± ‚Üí Œ≤` as a functor `(single_obj Œ±) ‚•§ (single_obj Œ≤)`.
See also `category_theory.single_obj.map_hom` for an equivalence between these types. -/
@[reducible] def to_functor {Œ± : Type u} {Œ≤ : Type v} [monoid Œ±] [monoid Œ≤] (f : Œ± ‚Üí* Œ≤) :
  (single_obj Œ±) ‚•§ (single_obj Œ≤) :=
single_obj.map_hom Œ± Œ≤ f

@[simp] lemma id_to_functor (Œ± : Type u) [monoid Œ±] : (id Œ±).to_functor = ùü≠ _ := rfl
@[simp] lemma comp_to_functor {Œ± : Type u} {Œ≤ : Type v} [monoid Œ±] [monoid Œ≤] (f : Œ± ‚Üí* Œ≤)
  {Œ≥ : Type w} [monoid Œ≥] (g : Œ≤ ‚Üí* Œ≥) :
  (g.comp f).to_functor = f.to_functor ‚ãô g.to_functor :=
rfl

end monoid_hom

namespace units

variables (Œ± : Type u) [monoid Œ±]

/--
The units in a monoid are (multiplicatively) equivalent to
the automorphisms of `star` when we think of the monoid as a single-object category. -/
def to_Aut : units Œ± ‚âÉ* Aut (single_obj.star Œ±) :=
(units.map_equiv (single_obj.to_End Œ±)).trans $
  Aut.units_End_equiv_Aut _

@[simp] lemma to_Aut_hom (x : units Œ±) : (to_Aut Œ± x).hom = single_obj.to_End Œ± x := rfl
@[simp] lemma to_Aut_inv (x : units Œ±) :
  (to_Aut Œ± x).inv = single_obj.to_End Œ± (x‚Åª¬π : units Œ±) :=
rfl
end units

namespace Mon

open category_theory

/-- The fully faithful functor from `Mon` to `Cat`. -/
def to_Cat : Mon ‚•§ Cat :=
{ obj := Œª x, Cat.of (single_obj x),
  map := Œª x y f, single_obj.map_hom x y f }

instance to_Cat_full : full to_Cat :=
{ preimage := Œª x y, (single_obj.map_hom x y).inv_fun,
  witness' := Œª x y, by apply equiv.right_inv }

instance to_Cat_faithful : faithful to_Cat :=
{ map_injective' := Œª x y, by apply equiv.injective }

end Mon
