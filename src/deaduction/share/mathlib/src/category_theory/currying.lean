/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.products.bifunctor

namespace category_theory

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]
          {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
          {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E]

def uncurry : (C ‚•§ (D ‚•§ E)) ‚•§ ((C √ó D) ‚•§ E) :=
{ obj := Œª F,
  { obj := Œª X, (F.obj X.1).obj X.2,
    map := Œª X Y f, (F.map f.1).app X.2 ‚â´ (F.obj Y.1).map f.2,
    map_comp' := Œª X Y Z f g,
    begin
      simp only [prod_comp_fst, prod_comp_snd, functor.map_comp,
                 nat_trans.comp_app, category.assoc],
      slice_lhs 2 3 { rw ‚Üê nat_trans.naturality },
      rw category.assoc,
    end },
  map := Œª F G T,
  { app := Œª X, (T.app X.1).app X.2,
    naturality' := Œª X Y f,
    begin
      simp only [prod_comp_fst, prod_comp_snd, category.comp_id, category.assoc,
        functor.map_id, functor.map_comp, nat_trans.id_app, nat_trans.comp_app],
      slice_lhs 2 3 { rw nat_trans.naturality },
      slice_lhs 1 2 {
        rw [‚Üênat_trans.comp_app, nat_trans.naturality,
            nat_trans.comp_app],
      },
      rw category.assoc,
    end } }.

def curry_obj (F : (C √ó D) ‚•§ E) : C ‚•§ (D ‚•§ E) :=
{ obj := Œª X,
    { obj := Œª Y, F.obj (X, Y),
      map := Œª Y Y' g, F.map (ùüô X, g) },
    map := Œª X X' f, { app := Œª Y, F.map (f, ùüô Y) } }

def curry : ((C √ó D) ‚•§ E) ‚•§ (C ‚•§ (D ‚•§ E)) :=
{ obj := Œª F, curry_obj F,
  map := Œª F G T,
  { app := Œª X,
    { app := Œª Y, T.app (X, Y),
      naturality' := Œª Y Y' g,
      begin
        dsimp [curry_obj],
        rw nat_trans.naturality,
      end },
    naturality' := Œª X X' f,
    begin
      ext, dsimp [curry_obj],
      rw nat_trans.naturality,
    end } }.

@[simp] lemma uncurry.obj_obj {F : C ‚•§ (D ‚•§ E)} {X : C √ó D} :
  (uncurry.obj F).obj X = (F.obj X.1).obj X.2 := rfl
@[simp] lemma uncurry.obj_map {F : C ‚•§ (D ‚•§ E)} {X Y : C √ó D} {f : X ‚ü∂ Y} :
  (uncurry.obj F).map f = ((F.map f.1).app X.2) ‚â´ ((F.obj Y.1).map f.2) := rfl
@[simp] lemma uncurry.map_app {F G : C ‚•§ (D ‚•§ E)} {Œ± : F ‚ü∂ G} {X : C √ó D} :
  (uncurry.map Œ±).app X = (Œ±.app X.1).app X.2 := rfl
@[simp] lemma curry.obj_obj_obj
  {F : (C √ó D) ‚•§ E} {X : C} {Y : D} :
  ((curry.obj F).obj X).obj Y = F.obj (X, Y) := rfl
@[simp] lemma curry.obj_obj_map
  {F : (C √ó D) ‚•§ E} {X : C} {Y Y' : D} {g : Y ‚ü∂ Y'} :
  ((curry.obj F).obj X).map g = F.map (ùüô X, g) := rfl
@[simp] lemma curry.obj_map_app {F : (C √ó D) ‚•§ E} {X X' : C} {f : X ‚ü∂ X'} {Y} :
  ((curry.obj F).map f).app Y = F.map (f, ùüô Y) := rfl
@[simp] lemma curry.map_app_app {F G : (C √ó D) ‚•§ E} {Œ± : F ‚ü∂ G} {X} {Y} :
  ((curry.map Œ±).app X).app Y = Œ±.app (X, Y) := rfl

def currying : (C ‚•§ (D ‚•§ E)) ‚âå ((C √ó D) ‚•§ E) :=
equivalence.mk uncurry curry
  (nat_iso.of_components (Œª F, nat_iso.of_components
    (Œª X, nat_iso.of_components (Œª Y, as_iso (ùüô _)) (by tidy)) (by tidy)) (by tidy))
  (nat_iso.of_components (Œª F, nat_iso.of_components
    (Œª X, eq_to_iso (by {dsimp, simp})) (by tidy)) (by tidy))

end category_theory
