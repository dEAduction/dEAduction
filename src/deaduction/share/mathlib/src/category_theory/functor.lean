/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Tim Baumann, Stephen Morgan, Scott Morrison

Defines a functor between categories.

(As it is a 'bundled' object rather than the `is_functorial` typeclass parametrised
by the underlying function on objects, the name is capitalised.)

Introduces notations
  `C ‚•§ D` for the type of all functors from `C` to `D`.
    (I would like a better arrow here, unfortunately ‚áí (`\functor`) is taken by core.)
-/
import category_theory.category
import tactic.reassoc_axiom

namespace category_theory

universes v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ -- declare the `v`'s first; see `category_theory.category` for an explanation

/--
`functor C D` represents a functor between categories `C` and `D`.

To apply a functor `F` to an object use `F.obj X`, and to a morphism use `F.map f`.

The axiom `map_id` expresses preservation of identities, and
`map_comp` expresses functoriality.
-/
structure functor (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D] :
  Type (max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ) :=
(obj []    : C ‚Üí D)
(map       : Œ† {X Y : C}, (X ‚ü∂ Y) ‚Üí ((obj X) ‚ü∂ (obj Y)))
(map_id'   : ‚àÄ (X : C), map (ùüô X) = ùüô (obj X) . obviously)
(map_comp' : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (f ‚â´ g) = (map f) ‚â´ (map g) . obviously)

-- A functor is basically a function, so give ‚•§ a similar precedence to ‚Üí (25).
-- For example, `C √ó D ‚•§ E` should parse as `(C √ó D) ‚•§ E` not `C √ó (D ‚•§ E)`.
infixr ` ‚•§ `:26 := functor       -- type as \func --

restate_axiom functor.map_id'
attribute [simp] functor.map_id
restate_axiom functor.map_comp'
attribute [reassoc, simp] functor.map_comp

namespace functor

section
variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C]

/-- `ùü≠ C` is the identity functor on a category `C`. -/
protected def id : C ‚•§ C :=
{ obj := Œª X, X,
  map := Œª _ _ f, f }

notation `ùü≠` := functor.id

variable {C}

@[simp] lemma id_obj (X : C) : (ùü≠ C).obj X = X := rfl
@[simp] lemma id_map {X Y : C} (f : X ‚ü∂ Y) : (ùü≠ C).map f = f := rfl
end

section
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]
          {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
          {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E]

/--
`F ‚ãô G` is the composition of a functor `F` and a functor `G` (`F` first, then `G`).
-/
def comp (F : C ‚•§ D) (G : D ‚•§ E) : C ‚•§ E :=
{ obj := Œª X, G.obj (F.obj X),
  map := Œª _ _ f, G.map (F.map f) }

infixr ` ‚ãô `:80 := comp

@[simp] lemma comp_obj (F : C ‚•§ D) (G : D ‚•§ E) (X : C) : (F ‚ãô G).obj X = G.obj (F.obj X) := rfl
@[simp] lemma comp_map (F : C ‚•§ D) (G : D ‚•§ E) {X Y : C} (f : X ‚ü∂ Y) :
  (F ‚ãô G).map f = G.map (F.map f) := rfl

-- These are not simp lemmas because rewriting along equalities between functors
-- is not necessarily a good idea.
-- Natural isomorphisms are also provided in `whiskering.lean`.
protected lemma comp_id (F : C ‚•§ D) : F ‚ãô (ùü≠ D) = F := by cases F; refl
protected lemma id_comp (F : C ‚•§ D) : (ùü≠ C) ‚ãô F = F := by cases F; refl

end

section
variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C]

@[simp] def ulift_down : (ulift.{u‚ÇÇ} C) ‚•§ C :=
{ obj := Œª X, X.down,
  map := Œª X Y f, f }

@[simp] def ulift_up : C ‚•§ (ulift.{u‚ÇÇ} C) :=
{ obj := Œª X, ‚ü® X ‚ü©,
  map := Œª X Y f, f }

end

end functor

end category_theory
