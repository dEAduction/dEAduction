/-
Copyright (c) 2019 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl

Lift filters along filter and set functions.
-/
import order.filter.basic

open set

open_locale classical filter

namespace filter
variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Sort*}

section lift

/-- A variant on `bind` using a function `g` taking a set instead of a member of `Œ±`.
This is essentially a push-forward along a function mapping each set to a filter. -/
protected def lift (f : filter Œ±) (g : set Œ± ‚Üí filter Œ≤) :=
‚®Ös ‚àà f, g s

variables {f f‚ÇÅ f‚ÇÇ : filter Œ±} {g g‚ÇÅ g‚ÇÇ : set Œ± ‚Üí filter Œ≤}

lemma mem_lift_sets (hg : monotone g) {s : set Œ≤} :
  s ‚àà f.lift g ‚Üî ‚àÉt‚ààf, s ‚àà g t :=
mem_binfi
  (assume s hs t ht, ‚ü®s ‚à© t, inter_mem_sets hs ht,
    hg $ inter_subset_left s t, hg $ inter_subset_right s t‚ü©)
  ‚ü®univ, univ_mem_sets‚ü©

lemma mem_lift {s : set Œ≤} {t : set Œ±} (ht : t ‚àà f) (hs : s ‚àà g t) :
  s ‚àà f.lift g :=
le_principal_iff.mp $ show f.lift g ‚â§ ùìü s,
  from infi_le_of_le t $ infi_le_of_le ht $ le_principal_iff.mpr hs

lemma lift_le {f : filter Œ±} {g : set Œ± ‚Üí filter Œ≤} {h : filter Œ≤} {s : set Œ±}
  (hs : s ‚àà f) (hg : g s ‚â§ h) : f.lift g ‚â§ h :=
infi_le_of_le s $ infi_le_of_le hs $ hg

lemma le_lift {f : filter Œ±} {g : set Œ± ‚Üí filter Œ≤} {h : filter Œ≤}
  (hh : ‚àÄs‚ààf, h ‚â§ g s) : h ‚â§ f.lift g :=
le_infi $ assume s, le_infi $ assume hs, hh s hs

lemma lift_mono (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hg : g‚ÇÅ ‚â§ g‚ÇÇ) : f‚ÇÅ.lift g‚ÇÅ ‚â§ f‚ÇÇ.lift g‚ÇÇ :=
infi_le_infi $ assume s, infi_le_infi2 $ assume hs, ‚ü®hf hs, hg s‚ü©

lemma lift_mono' (hg : ‚àÄs‚ààf, g‚ÇÅ s ‚â§ g‚ÇÇ s) : f.lift g‚ÇÅ ‚â§ f.lift g‚ÇÇ :=
infi_le_infi $ assume s, infi_le_infi $ assume hs, hg s hs

lemma map_lift_eq {m : Œ≤ ‚Üí Œ≥} (hg : monotone g) : map m (f.lift g) = f.lift (map m ‚àò g) :=
have monotone (map m ‚àò g),
  from map_mono.comp hg,
filter_eq $ set.ext $
  by simp only [mem_lift_sets hg, mem_lift_sets this, exists_prop, forall_const, mem_map, iff_self, function.comp_app]

lemma comap_lift_eq {m : Œ≥ ‚Üí Œ≤} (hg : monotone g) : comap m (f.lift g) = f.lift (comap m ‚àò g) :=
have monotone (comap m ‚àò g),
  from comap_mono.comp hg,
filter_eq $ set.ext begin
  simp only [mem_lift_sets hg, mem_lift_sets this, comap, mem_lift_sets, mem_set_of_eq, exists_prop,
    function.comp_apply],
  exact Œª s,
   ‚ü®Œª ‚ü®b, ‚ü®a, ha, hb‚ü©, hs‚ü©, ‚ü®a, ha, b, hb, hs‚ü©,
    Œª ‚ü®a, ha, b, hb, hs‚ü©, ‚ü®b, ‚ü®a, ha, hb‚ü©, hs‚ü©‚ü©
end

theorem comap_lift_eq2 {m : Œ≤ ‚Üí Œ±} {g : set Œ≤ ‚Üí filter Œ≥} (hg : monotone g) :
  (comap m f).lift g = f.lift (g ‚àò preimage m) :=
le_antisymm
  (le_infi $ assume s, le_infi $ assume hs,
    infi_le_of_le (preimage m s) $ infi_le _ ‚ü®s, hs, subset.refl _‚ü©)
  (le_infi $ assume s, le_infi $ assume ‚ü®s', hs', (h_sub : preimage m s' ‚äÜ s)‚ü©,
    infi_le_of_le s' $ infi_le_of_le hs' $ hg h_sub)

lemma map_lift_eq2 {g : set Œ≤ ‚Üí filter Œ≥} {m : Œ± ‚Üí Œ≤} (hg : monotone g) :
  (map m f).lift g = f.lift (g ‚àò image m) :=
le_antisymm
  (infi_le_infi2 $ assume s, ‚ü®image m s,
    infi_le_infi2 $ assume hs, ‚ü®
      f.sets_of_superset hs $ assume a h, mem_image_of_mem _ h,
      le_refl _‚ü©‚ü©)
  (infi_le_infi2 $ assume t, ‚ü®preimage m t,
    infi_le_infi2 $ assume ht, ‚ü®ht,
      hg $ assume x, assume h : x ‚àà m '' preimage m t,
        let ‚ü®y, hy, h_eq‚ü© := h in
        show x ‚àà t, from h_eq ‚ñ∏ hy‚ü©‚ü©)

lemma lift_comm {g : filter Œ≤} {h : set Œ± ‚Üí set Œ≤ ‚Üí filter Œ≥} :
  f.lift (Œªs, g.lift (h s)) = g.lift (Œªt, f.lift (Œªs, h s t)) :=
le_antisymm
  (le_infi $ assume i, le_infi $ assume hi, le_infi $ assume j, le_infi $ assume hj,
    infi_le_of_le j $ infi_le_of_le hj $ infi_le_of_le i $ infi_le _ hi)
  (le_infi $ assume i, le_infi $ assume hi, le_infi $ assume j, le_infi $ assume hj,
    infi_le_of_le j $ infi_le_of_le hj $ infi_le_of_le i $ infi_le _ hi)

lemma lift_assoc {h : set Œ≤ ‚Üí filter Œ≥} (hg : monotone g)  :
  (f.lift g).lift h = f.lift (Œªs, (g s).lift h) :=
le_antisymm
  (le_infi $ assume s, le_infi $ assume hs, le_infi $ assume t, le_infi $ assume ht,
    infi_le_of_le t $ infi_le _ $ (mem_lift_sets hg).mpr ‚ü®_, hs, ht‚ü©)
  (le_infi $ assume t, le_infi $ assume ht,
    let ‚ü®s, hs, h'‚ü© := (mem_lift_sets hg).mp ht in
    infi_le_of_le s $ infi_le_of_le hs $ infi_le_of_le t $ infi_le _ h')

lemma lift_lift_same_le_lift {g : set Œ± ‚Üí set Œ± ‚Üí filter Œ≤} :
  f.lift (Œªs, f.lift (g s)) ‚â§ f.lift (Œªs, g s s) :=
le_infi $ assume s, le_infi $ assume hs, infi_le_of_le s $ infi_le_of_le hs $ infi_le_of_le s $ infi_le _ hs

lemma lift_lift_same_eq_lift {g : set Œ± ‚Üí set Œ± ‚Üí filter Œ≤}
  (hg‚ÇÅ : ‚àÄs, monotone (Œªt, g s t)) (hg‚ÇÇ : ‚àÄt, monotone (Œªs, g s t)) :
  f.lift (Œªs, f.lift (g s)) = f.lift (Œªs, g s s) :=
le_antisymm
  lift_lift_same_le_lift
  (le_infi $ assume s, le_infi $ assume hs, le_infi $ assume t, le_infi $ assume ht,
    infi_le_of_le (s ‚à© t) $
    infi_le_of_le (inter_mem_sets hs ht) $
    calc g (s ‚à© t) (s ‚à© t) ‚â§ g s (s ‚à© t) : hg‚ÇÇ (s ‚à© t) (inter_subset_left _ _)
      ... ‚â§ g s t                        : hg‚ÇÅ s (inter_subset_right _ _))

lemma lift_principal {s : set Œ±} (hg : monotone g) :
  (ùìü s).lift g = g s :=
le_antisymm
  (infi_le_of_le s $ infi_le _ $ subset.refl _)
  (le_infi $ assume t, le_infi $ assume hi, hg hi)

theorem monotone_lift [preorder Œ≥] {f : Œ≥ ‚Üí filter Œ±} {g : Œ≥ ‚Üí set Œ± ‚Üí filter Œ≤}
  (hf : monotone f) (hg : monotone g) : monotone (Œªc, (f c).lift (g c)) :=
assume a b h, lift_mono (hf h) (hg h)

lemma lift_ne_bot_iff (hm : monotone g) : (f.lift g ‚â† ‚ä•) ‚Üî (‚àÄs‚ààf, g s ‚â† ‚ä•) :=
begin
  rw [filter.lift, infi_subtype', infi_ne_bot_iff_of_directed', subtype.forall'],
  { exact ‚ü®‚ü®univ, univ_mem_sets‚ü©‚ü© },
  { rintros ‚ü®s, hs‚ü© ‚ü®t, ht‚ü©,
    exact ‚ü®‚ü®s ‚à© t, inter_mem_sets hs ht‚ü©, hm (inter_subset_left s t), hm (inter_subset_right s t)‚ü© }
end

@[simp] lemma lift_const {f : filter Œ±} {g : filter Œ≤} : f.lift (Œªx, g) = g :=
le_antisymm (lift_le univ_mem_sets $ le_refl g) (le_lift $ assume s hs, le_refl g)

@[simp] lemma lift_inf {f : filter Œ±} {g h : set Œ± ‚Üí filter Œ≤} :
  f.lift (Œªx, g x ‚äì h x) = f.lift g ‚äì f.lift h :=
by simp only [filter.lift, infi_inf_eq, eq_self_iff_true]

@[simp] lemma lift_principal2 {f : filter Œ±} : f.lift ùìü = f :=
le_antisymm
  (assume s hs, mem_lift hs (mem_principal_self s))
  (le_infi $ assume s, le_infi $ assume hs, by simp only [hs, le_principal_iff])

lemma lift_infi {f : Œπ ‚Üí filter Œ±} {g : set Œ± ‚Üí filter Œ≤}
  (hŒπ : nonempty Œπ) (hg : ‚àÄ{s t}, g s ‚äì g t = g (s ‚à© t)) : (infi f).lift g = (‚®Öi, (f i).lift g) :=
le_antisymm
  (le_infi $ assume i, lift_mono (infi_le _ _) (le_refl _))
  (assume s,
    have g_mono : monotone g,
      from assume s t h, le_of_inf_eq $ eq.trans hg $ congr_arg g $ inter_eq_self_of_subset_left h,
    have ‚àÄt‚àà(infi f), (‚®Ö (i : Œπ), filter.lift (f i) g) ‚â§ g t,
      from assume t ht, infi_sets_induct ht
        (let ‚ü®i‚ü© := hŒπ in infi_le_of_le i $ infi_le_of_le univ $ infi_le _ univ_mem_sets)
        (assume i s‚ÇÅ s‚ÇÇ hs‚ÇÅ hs‚ÇÇ,
          @hg s‚ÇÅ s‚ÇÇ ‚ñ∏ le_inf (infi_le_of_le i $ infi_le_of_le s‚ÇÅ $ infi_le _ hs‚ÇÅ) hs‚ÇÇ)
        (assume s‚ÇÅ s‚ÇÇ hs‚ÇÅ hs‚ÇÇ, le_trans hs‚ÇÇ $ g_mono hs‚ÇÅ),
    begin
      simp only [mem_lift_sets g_mono,  exists_imp_distrib],
      exact assume t ht hs, this t ht hs
    end)

end lift

section lift'
/-- Specialize `lift` to functions `set Œ± ‚Üí set Œ≤`. This can be viewed as a generalization of `map`.
This is essentially a push-forward along a function mapping each set to a set. -/
protected def lift' (f : filter Œ±) (h : set Œ± ‚Üí set Œ≤) :=
f.lift (ùìü ‚àò h)

variables {f f‚ÇÅ f‚ÇÇ : filter Œ±} {h h‚ÇÅ h‚ÇÇ : set Œ± ‚Üí set Œ≤}

lemma mem_lift' {t : set Œ±} (ht : t ‚àà f) : h t ‚àà (f.lift' h) :=
le_principal_iff.mp $ show f.lift' h ‚â§ ùìü (h t),
  from infi_le_of_le t $ infi_le_of_le ht $ le_refl _

lemma mem_lift'_sets (hh : monotone h) {s : set Œ≤} : s ‚àà (f.lift' h) ‚Üî (‚àÉt‚ààf, h t ‚äÜ s) :=
mem_lift_sets $ monotone_principal.comp hh

lemma lift'_le {f : filter Œ±} {g : set Œ± ‚Üí set Œ≤} {h : filter Œ≤} {s : set Œ±}
  (hs : s ‚àà f) (hg : ùìü (g s) ‚â§ h) : f.lift' g ‚â§ h :=
lift_le hs hg

lemma lift'_mono (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hh : h‚ÇÅ ‚â§ h‚ÇÇ) : f‚ÇÅ.lift' h‚ÇÅ ‚â§ f‚ÇÇ.lift' h‚ÇÇ :=
lift_mono hf $ assume s, principal_mono.mpr $ hh s

lemma lift'_mono' (hh : ‚àÄs‚ààf, h‚ÇÅ s ‚äÜ h‚ÇÇ s) : f.lift' h‚ÇÅ ‚â§ f.lift' h‚ÇÇ :=
infi_le_infi $ assume s, infi_le_infi $ assume hs, principal_mono.mpr $ hh s hs

lemma lift'_cong (hh : ‚àÄs‚ààf, h‚ÇÅ s = h‚ÇÇ s) : f.lift' h‚ÇÅ = f.lift' h‚ÇÇ :=
le_antisymm (lift'_mono' $ assume s hs, le_of_eq $ hh s hs) (lift'_mono' $ assume s hs, le_of_eq $ (hh s hs).symm)

lemma map_lift'_eq {m : Œ≤ ‚Üí Œ≥} (hh : monotone h) : map m (f.lift' h) = f.lift' (image m ‚àò h) :=
calc map m (f.lift' h) = f.lift (map m ‚àò ùìü ‚àò h) :
    map_lift_eq $ monotone_principal.comp hh
  ... = f.lift' (image m ‚àò h) : by simp only [(‚àò), filter.lift', map_principal, eq_self_iff_true]

lemma map_lift'_eq2 {g : set Œ≤ ‚Üí set Œ≥} {m : Œ± ‚Üí Œ≤} (hg : monotone g) :
  (map m f).lift' g = f.lift' (g ‚àò image m) :=
map_lift_eq2 $ monotone_principal.comp hg

theorem comap_lift'_eq {m : Œ≥ ‚Üí Œ≤} (hh : monotone h) :
  comap m (f.lift' h) = f.lift' (preimage m ‚àò h) :=
calc comap m (f.lift' h) = f.lift (comap m ‚àò ùìü ‚àò h) :
    comap_lift_eq $ monotone_principal.comp hh
  ... = f.lift' (preimage m ‚àò h) : by simp only [(‚àò), filter.lift', comap_principal, eq_self_iff_true]

theorem comap_lift'_eq2 {m : Œ≤ ‚Üí Œ±} {g : set Œ≤ ‚Üí set Œ≥} (hg : monotone g) :
  (comap m f).lift' g = f.lift' (g ‚àò preimage m) :=
comap_lift_eq2 $ monotone_principal.comp hg

lemma lift'_principal {s : set Œ±} (hh : monotone h) :
  (ùìü s).lift' h = ùìü (h s) :=
lift_principal $ monotone_principal.comp hh

lemma principal_le_lift' {t : set Œ≤} (hh : ‚àÄs‚ààf, t ‚äÜ h s) :
  ùìü t ‚â§ f.lift' h :=
le_infi $ assume s, le_infi $ assume hs, principal_mono.mpr (hh s hs)

theorem monotone_lift' [preorder Œ≥] {f : Œ≥ ‚Üí filter Œ±} {g : Œ≥ ‚Üí set Œ± ‚Üí set Œ≤}
  (hf : monotone f) (hg : monotone g) : monotone (Œªc, (f c).lift' (g c)) :=
assume a b h, lift'_mono (hf h) (hg h)

lemma lift_lift'_assoc {g : set Œ± ‚Üí set Œ≤} {h : set Œ≤ ‚Üí filter Œ≥}
  (hg : monotone g) (hh : monotone h) :
  (f.lift' g).lift h = f.lift (Œªs, h (g s)) :=
calc (f.lift' g).lift h = f.lift (Œªs, (ùìü (g s)).lift h) :
    lift_assoc (monotone_principal.comp hg)
  ... = f.lift (Œªs, h (g s)) : by simp only [lift_principal, hh, eq_self_iff_true]

lemma lift'_lift'_assoc {g : set Œ± ‚Üí set Œ≤} {h : set Œ≤ ‚Üí set Œ≥}
  (hg : monotone g) (hh : monotone h) :
  (f.lift' g).lift' h = f.lift' (Œªs, h (g s)) :=
lift_lift'_assoc hg (monotone_principal.comp hh)

lemma lift'_lift_assoc {g : set Œ± ‚Üí filter Œ≤} {h : set Œ≤ ‚Üí set Œ≥}
  (hg : monotone g) : (f.lift g).lift' h = f.lift (Œªs, (g s).lift' h) :=
lift_assoc hg

lemma lift_lift'_same_le_lift' {g : set Œ± ‚Üí set Œ± ‚Üí set Œ≤} :
  f.lift (Œªs, f.lift' (g s)) ‚â§ f.lift' (Œªs, g s s) :=
lift_lift_same_le_lift

lemma lift_lift'_same_eq_lift' {g : set Œ± ‚Üí set Œ± ‚Üí set Œ≤}
  (hg‚ÇÅ : ‚àÄs, monotone (Œªt, g s t)) (hg‚ÇÇ : ‚àÄt, monotone (Œªs, g s t)) :
  f.lift (Œªs, f.lift' (g s)) = f.lift' (Œªs, g s s) :=
lift_lift_same_eq_lift
  (assume s, monotone_principal.comp (hg‚ÇÅ s))
  (assume t, monotone_principal.comp (hg‚ÇÇ t))

lemma lift'_inf_principal_eq {h : set Œ± ‚Üí set Œ≤} {s : set Œ≤} :
  f.lift' h ‚äì ùìü s = f.lift' (Œªt, h t ‚à© s) :=
le_antisymm
  (le_infi $ assume t, le_infi $ assume ht,
    calc filter.lift' f h ‚äì ùìü s ‚â§ ùìü (h t) ‚äì ùìü s :
        inf_le_inf_right _ (infi_le_of_le t $ infi_le _ ht)
      ... = _ : by simp only [principal_eq_iff_eq, inf_principal, eq_self_iff_true, function.comp_app])
  (le_inf
    (le_infi $ assume t, le_infi $ assume ht,
      infi_le_of_le t $ infi_le_of_le ht $
      by simp only [le_principal_iff, inter_subset_left, mem_principal_sets, function.comp_app]; exact inter_subset_right _ _)
    (infi_le_of_le univ $ infi_le_of_le univ_mem_sets $
    by simp only [le_principal_iff, inter_subset_right, mem_principal_sets, function.comp_app]; exact inter_subset_left _ _))

lemma lift'_ne_bot_iff (hh : monotone h) : (f.lift' h ‚â† ‚ä•) ‚Üî (‚àÄs‚ààf, (h s).nonempty) :=
calc (f.lift' h ‚â† ‚ä•) ‚Üî (‚àÄs‚ààf, ùìü (h s) ‚â† ‚ä•) :
    lift_ne_bot_iff (monotone_principal.comp hh)
  ... ‚Üî (‚àÄs‚ààf, (h s).nonempty) : by simp only [principal_ne_bot_iff]

@[simp] lemma lift'_id {f : filter Œ±} : f.lift' id = f :=
lift_principal2

lemma le_lift' {f : filter Œ±} {h : set Œ± ‚Üí set Œ≤} {g : filter Œ≤}
  (h_le : ‚àÄs‚ààf, h s ‚àà g) : g ‚â§ f.lift' h :=
le_infi $ assume s, le_infi $ assume hs, by simp only [h_le, le_principal_iff, function.comp_app]; exact h_le s hs

lemma lift_infi' {f : Œπ ‚Üí filter Œ±} {g : set Œ± ‚Üí filter Œ≤}
  (hŒπ : nonempty Œπ) (hf : directed (‚â•) f) (hg : monotone g) : (infi f).lift g = (‚®Öi, (f i).lift g) :=
le_antisymm
  (le_infi $ assume i, lift_mono (infi_le _ _) (le_refl _))
  (assume s,
  begin
    rw mem_lift_sets hg,
    simp only [exists_imp_distrib, mem_infi hf hŒπ],
    exact assume t i ht hs, mem_infi_sets i $ mem_lift ht hs
  end)

lemma lift'_infi {f : Œπ ‚Üí filter Œ±} {g : set Œ± ‚Üí set Œ≤}
  (hŒπ : nonempty Œπ) (hg : ‚àÄ{s t}, g s ‚à© g t = g (s ‚à© t)) : (infi f).lift' g = (‚®Öi, (f i).lift' g) :=
lift_infi hŒπ $ by simp only [principal_eq_iff_eq, inf_principal, function.comp_app]; apply assume s t, hg

theorem comap_eq_lift' {f : filter Œ≤} {m : Œ± ‚Üí Œ≤} :
  comap m f = f.lift' (preimage m) :=
filter_eq $ set.ext $ by simp only [mem_lift'_sets, monotone_preimage, comap, exists_prop, forall_const, iff_self, mem_set_of_eq]

end lift'

section prod
variables {f : filter Œ±}

lemma prod_def {f : filter Œ±} {g : filter Œ≤} : f.prod g = (f.lift $ Œªs, g.lift' $ set.prod s) :=
have ‚àÄ(s:set Œ±) (t : set Œ≤),
    ùìü (set.prod s t) = (ùìü s).comap prod.fst ‚äì (ùìü t).comap prod.snd,
  by simp only [principal_eq_iff_eq, comap_principal, inf_principal]; intros; refl,
begin
  simp only [filter.lift', function.comp, this, -comap_principal, lift_inf, lift_const, lift_inf],
  rw [‚Üê comap_lift_eq monotone_principal, ‚Üê comap_lift_eq monotone_principal],
  simp only [filter.prod, lift_principal2, eq_self_iff_true]
end

lemma prod_same_eq : filter.prod f f = f.lift' (Œªt, set.prod t t) :=
by rw [prod_def];
from lift_lift'_same_eq_lift'
  (assume s, set.monotone_prod monotone_const monotone_id)
  (assume t, set.monotone_prod monotone_id monotone_const)

lemma mem_prod_same_iff {s : set (Œ±√óŒ±)} :
  s ‚àà filter.prod f f ‚Üî (‚àÉt‚ààf, set.prod t t ‚äÜ s) :=
by rw [prod_same_eq, mem_lift'_sets]; exact set.monotone_prod monotone_id monotone_id

lemma tendsto_prod_self_iff {f : Œ± √ó Œ± ‚Üí Œ≤} {x : filter Œ±} {y : filter Œ≤} :
  filter.tendsto f (filter.prod x x) y ‚Üî
  ‚àÄ W ‚àà y, ‚àÉ U ‚àà x, ‚àÄ (x x' : Œ±), x ‚àà U ‚Üí x' ‚àà U ‚Üí f (x, x') ‚àà W :=
by simp only [tendsto_def, mem_prod_same_iff, prod_sub_preimage_iff, exists_prop, iff_self]

variables {Œ±‚ÇÅ : Type*} {Œ±‚ÇÇ : Type*} {Œ≤‚ÇÅ : Type*} {Œ≤‚ÇÇ : Type*}

lemma prod_lift_lift
  {f‚ÇÅ : filter Œ±‚ÇÅ} {f‚ÇÇ : filter Œ±‚ÇÇ} {g‚ÇÅ : set Œ±‚ÇÅ ‚Üí filter Œ≤‚ÇÅ} {g‚ÇÇ : set Œ±‚ÇÇ ‚Üí filter Œ≤‚ÇÇ}
  (hg‚ÇÅ : monotone g‚ÇÅ) (hg‚ÇÇ : monotone g‚ÇÇ) :
  filter.prod (f‚ÇÅ.lift g‚ÇÅ) (f‚ÇÇ.lift g‚ÇÇ) = f‚ÇÅ.lift (Œªs, f‚ÇÇ.lift (Œªt, filter.prod (g‚ÇÅ s) (g‚ÇÇ t))) :=
begin
  simp only [prod_def],
  rw [lift_assoc],
  apply congr_arg, funext x,
  rw [lift_comm],
  apply congr_arg, funext y,
  rw [lift'_lift_assoc],
  exact hg‚ÇÇ,
  exact hg‚ÇÅ
end

lemma prod_lift'_lift'
  {f‚ÇÅ : filter Œ±‚ÇÅ} {f‚ÇÇ : filter Œ±‚ÇÇ} {g‚ÇÅ : set Œ±‚ÇÅ ‚Üí set Œ≤‚ÇÅ} {g‚ÇÇ : set Œ±‚ÇÇ ‚Üí set Œ≤‚ÇÇ}
  (hg‚ÇÅ : monotone g‚ÇÅ) (hg‚ÇÇ : monotone g‚ÇÇ) :
  filter.prod (f‚ÇÅ.lift' g‚ÇÅ) (f‚ÇÇ.lift' g‚ÇÇ) = f‚ÇÅ.lift (Œªs, f‚ÇÇ.lift' (Œªt, set.prod (g‚ÇÅ s) (g‚ÇÇ t))) :=
begin
  rw [prod_def, lift_lift'_assoc],
  apply congr_arg, funext x,
  rw [lift'_lift'_assoc],
  exact hg‚ÇÇ,
  exact set.monotone_prod monotone_const monotone_id,
  exact hg‚ÇÅ,
  exact (monotone_lift' monotone_const $ monotone_lam $
    assume x, set.monotone_prod monotone_id monotone_const)
end

end prod

end filter
