/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: S√©bastien Gou√´zel
-/
import topology.metric_space.hausdorff_distance
import analysis.specific_limits

/-!
# Closed subsets

This file defines the metric and emetric space structure on the types of closed subsets and nonempty compact
subsets of a metric or emetric space.

The Hausdorff distance induces an emetric space structure on the type of closed subsets
of an emetric space, called `closeds`. Its completeness, resp. compactness, resp.
second-countability, follow from the corresponding properties of the original space.

In a metric space, the type of nonempty compact subsets (called `nonempty_compacts`) also
inherits a metric space structure from the Hausdorff distance, as the Hausdorff edistance is
always finite in this context.
-/

noncomputable theory
open_locale classical
open_locale topological_space

universe u
open classical set function topological_space filter

namespace emetric
section
variables {Œ± : Type u} [emetric_space Œ±] {s : set Œ±}

/-- In emetric spaces, the Hausdorff edistance defines an emetric space structure
on the type of closed subsets -/
instance closeds.emetric_space : emetric_space (closeds Œ±) :=
{ edist               := Œªs t, Hausdorff_edist s.val t.val,
  edist_self          := Œªs, Hausdorff_edist_self,
  edist_comm          := Œªs t, Hausdorff_edist_comm,
  edist_triangle      := Œªs t u, Hausdorff_edist_triangle,
  eq_of_edist_eq_zero :=
    Œªs t h, subtype.eq ((Hausdorff_edist_zero_iff_eq_of_closed s.property t.property).1 h) }

/-- The edistance to a closed set depends continuously on the point and the set -/
lemma continuous_inf_edist_Hausdorff_edist :
  continuous (Œªp : Œ± √ó (closeds Œ±), inf_edist p.1 (p.2).val) :=
begin
  refine continuous_of_le_add_edist 2 (by simp) _,
  rintros ‚ü®x, s‚ü© ‚ü®y, t‚ü©,
  calc inf_edist x (s.val) ‚â§ inf_edist x (t.val) + Hausdorff_edist (t.val) (s.val) :
    inf_edist_le_inf_edist_add_Hausdorff_edist
  ... ‚â§ (inf_edist y (t.val) + edist x y) + Hausdorff_edist (t.val) (s.val) :
    add_le_add_right' inf_edist_le_inf_edist_add_edist
  ... = inf_edist y (t.val) + (edist x y + Hausdorff_edist (s.val) (t.val)) :
    by simp [add_comm, add_left_comm, Hausdorff_edist_comm]
  ... ‚â§ inf_edist y (t.val) + (edist (x, s) (y, t) + edist (x, s) (y, t)) :
    add_le_add_left' (add_le_add (by simp [edist, le_refl]) (by simp [edist, le_refl]))
  ... = inf_edist y (t.val) + 2 * edist (x, s) (y, t) :
    by rw [‚Üê mul_two, mul_comm]
end

/-- Subsets of a given closed subset form a closed set -/
lemma is_closed_subsets_of_is_closed (hs : is_closed s) :
  is_closed {t : closeds Œ± | t.val ‚äÜ s} :=
begin
  refine is_closed_of_closure_subset (Œªt ht x hx, _),
  -- t : closeds Œ±,  ht : t ‚àà closure {t : closeds Œ± | t.val ‚äÜ s},
  -- x : Œ±,  hx : x ‚àà t.val
  -- goal : x ‚àà s
  have : x ‚àà closure s,
  { refine mem_closure_iff.2 (ŒªŒµ Œµpos, _),
    rcases mem_closure_iff.1 ht Œµ Œµpos with ‚ü®u, hu, Dtu‚ü©,
    -- u : closeds Œ±,  hu : u ‚àà {t : closeds Œ± | t.val ‚äÜ s},  hu' : edist t u < Œµ
    rcases exists_edist_lt_of_Hausdorff_edist_lt hx Dtu with ‚ü®y, hy, Dxy‚ü©,
    -- y : Œ±,  hy : y ‚àà u.val, Dxy : edist x y < Œµ
    exact ‚ü®y, hu hy, Dxy‚ü© },
  rwa closure_eq_of_is_closed hs at this,
end

/-- By definition, the edistance on `closeds Œ±` is given by the Hausdorff edistance -/
lemma closeds.edist_eq {s t : closeds Œ±} : edist s t = Hausdorff_edist s.val t.val := rfl

/-- In a complete space, the type of closed subsets is complete for the
Hausdorff edistance. -/
instance closeds.complete_space [complete_space Œ±] : complete_space (closeds Œ±) :=
begin
  /- We will show that, if a sequence of sets `s n` satisfies
  `edist (s n) (s (n+1)) < 2^{-n}`, then it converges. This is enough to guarantee
  completeness, by a standard completeness criterion.
  We use the shorthand `B n = 2^{-n}` in ennreal. -/
  let B : ‚Ñï ‚Üí ennreal := Œª n, (2‚Åª¬π)^n,
  have B_pos : ‚àÄ n, (0:ennreal) < B n,
    by simp [B, ennreal.pow_pos],
  have B_ne_top : ‚àÄ n, B n ‚â† ‚ä§,
    by simp [B, ennreal.div_def, ennreal.pow_ne_top],
  /- Consider a sequence of closed sets `s n` with `edist (s n) (s (n+1)) < B n`.
  We will show that it converges. The limit set is t0 = ‚ãÇn, closure (‚ãÉm‚â•n, s m).
  We will have to show that a point in `s n` is close to a point in `t0`, and a point
  in `t0` is close to a point in `s n`. The completeness then follows from a
  standard criterion. -/
  refine complete_of_convergent_controlled_sequences B B_pos (Œªs hs, _),
  let t0 := ‚ãÇn, closure (‚ãÉm‚â•n, (s m).val),
  let t : closeds Œ± := ‚ü®t0, is_closed_Inter (Œª_, is_closed_closure)‚ü©,
  use t,
  -- The inequality is written this way to agree with `edist_le_of_edist_le_geometric_of_tendsto‚ÇÄ`
  have I1 : ‚àÄn:‚Ñï, ‚àÄx ‚àà (s n).val, ‚àÉy ‚àà t0, edist x y ‚â§ 2 * B n,
  { /- This is the main difficulty of the proof. Starting from `x ‚àà s n`, we want
       to find a point in `t0` which is close to `x`. Define inductively a sequence of
       points `z m` with `z n = x` and `z m ‚àà s m` and `edist (z m) (z (m+1)) ‚â§ B m`. This is
       possible since the Hausdorff distance between `s m` and `s (m+1)` is at most `B m`.
       This sequence is a Cauchy sequence, therefore converging as the space is complete, to
       a limit which satisfies the required properties. -/
    assume n x hx,
    obtain ‚ü®z, hz‚ÇÄ, hz‚ü© : ‚àÉ z : Œ† l, (s (n+l)).val, (z 0:Œ±) = x ‚àß
      ‚àÄ k, edist (z k:Œ±) (z (k+1):Œ±) ‚â§ B n / 2^k,
    { -- We prove existence of the sequence by induction.
      have : ‚àÄ (l : ‚Ñï) (z : (s (n+l)).val), ‚àÉ z' : (s (n+l+1)).val, edist (z:Œ±) z' ‚â§ B n / 2^l,
      { assume l z,
        obtain ‚ü®z', z'_mem, hz'‚ü© : ‚àÉ z' ‚àà (s (n+l+1)).val, edist (z:Œ±) z' < B n / 2^l,
        { apply exists_edist_lt_of_Hausdorff_edist_lt z.2,
          simp only [B, ennreal.div_def, ennreal.inv_pow],
          rw [‚Üê pow_add],
          apply hs; simp },
        exact ‚ü®‚ü®z', z'_mem‚ü©, le_of_lt hz'‚ü© },
      use [Œª k, nat.rec_on k ‚ü®x, hx‚ü© (Œªl z, some (this l z)), rfl],
      exact Œª k, some_spec (this k _) },
    -- it follows from the previous bound that `z` is a Cauchy sequence
    have : cauchy_seq (Œª k, ((z k):Œ±)),
      from cauchy_seq_of_edist_le_geometric_two (B n) (B_ne_top n) hz,
    -- therefore, it converges
    rcases cauchy_seq_tendsto_of_complete this with ‚ü®y, y_lim‚ü©,
    use y,
    -- the limit point `y` will be the desired point, in `t0` and close to our initial point `x`.
    -- First, we check it belongs to `t0`.
    have : y ‚àà t0 := mem_Inter.2 (Œªk, mem_closure_of_tendsto (by simp) y_lim
    begin
      simp only [exists_prop, set.mem_Union, filter.eventually_at_top, set.mem_preimage, set.preimage_Union],
      exact ‚ü®k, Œª m hm, ‚ü®n+m, zero_add k ‚ñ∏ add_le_add (zero_le n) hm, (z m).2‚ü©‚ü©
    end),
    use this,
    -- Then, we check that `y` is close to `x = z n`. This follows from the fact that `y`
    -- is the limit of `z k`, and the distance between `z n` and `z k` has already been estimated.
    rw [‚Üê hz‚ÇÄ],
    exact edist_le_of_edist_le_geometric_two_of_tendsto‚ÇÄ (B n) hz y_lim },
  have I2 : ‚àÄn:‚Ñï, ‚àÄx ‚àà t0, ‚àÉy ‚àà (s n).val, edist x y ‚â§ 2 * B n,
  { /- For the (much easier) reverse inequality, we start from a point `x ‚àà t0` and we want
        to find a point `y ‚àà s n` which is close to `x`.
        `x` belongs to `t0`, the intersection of the closures. In particular, it is well
        approximated by a point `z` in `‚ãÉm‚â•n, s m`, say in `s m`. Since `s m` and
        `s n` are close, this point is itself well approximated by a point `y` in `s n`,
        as required. -/
    assume n x xt0,
    have : x ‚àà closure (‚ãÉm‚â•n, (s m).val), by apply mem_Inter.1 xt0 n,
    rcases mem_closure_iff.1 this (B n) (B_pos n) with ‚ü®z, hz, Dxz‚ü©,
    -- z : Œ±,  Dxz : edist x z < B n,
    simp only [exists_prop, set.mem_Union] at hz,
    rcases hz with ‚ü®m, ‚ü®m_ge_n, hm‚ü©‚ü©,
    -- m : ‚Ñï, m_ge_n : m ‚â• n, hm : z ‚àà (s m).val
    have : Hausdorff_edist (s m).val (s n).val < B n := hs n m n m_ge_n (le_refl n),
    rcases exists_edist_lt_of_Hausdorff_edist_lt hm this with ‚ü®y, hy, Dzy‚ü©,
    -- y : Œ±,  hy : y ‚àà (s n).val,  Dzy : edist z y < B n
    exact ‚ü®y, hy, calc
      edist x y ‚â§ edist x z + edist z y : edist_triangle _ _ _
            ... ‚â§ B n + B n : add_le_add (le_of_lt Dxz) (le_of_lt Dzy)
            ... = 2 * B n : (two_mul _).symm ‚ü© },
  -- Deduce from the above inequalities that the distance between `s n` and `t0` is at most `2 B n`.
  have main : ‚àÄn:‚Ñï, edist (s n) t ‚â§ 2 * B n := Œªn, Hausdorff_edist_le_of_mem_edist (I1 n) (I2 n),
  -- from this, the convergence of `s n` to `t0` follows.
  refine (tendsto_at_top _).2 (ŒªŒµ Œµpos, _),
  have : tendsto (Œªn, 2 * B n) at_top (ùìù (2 * 0)),
    from ennreal.tendsto.const_mul
      (ennreal.tendsto_pow_at_top_nhds_0_of_lt_1 $ by simp [ennreal.one_lt_two])
      (or.inr $ by simp),
  rw mul_zero at this,
  obtain ‚ü®N, hN‚ü© : ‚àÉ N, ‚àÄ b ‚â• N, Œµ > 2 * B b,
    from ((tendsto_order.1 this).2 Œµ Œµpos).exists_forall_of_at_top,
  exact ‚ü®N, Œªn hn, lt_of_le_of_lt (main n) (hN n hn)‚ü©
end

/-- In a compact space, the type of closed subsets is compact. -/
instance closeds.compact_space [compact_space Œ±] : compact_space (closeds Œ±) :=
‚ü®begin
  /- by completeness, it suffices to show that it is totally bounded,
    i.e., for all Œµ>0, there is a finite set which is Œµ-dense.
    start from a set `s` which is Œµ-dense in Œ±. Then the subsets of `s`
    are finitely many, and Œµ-dense for the Hausdorff distance. -/
  refine compact_of_totally_bounded_is_closed (emetric.totally_bounded_iff.2 (ŒªŒµ Œµpos, _)) is_closed_univ,
  rcases dense Œµpos with ‚ü®Œ¥, Œ¥pos, Œ¥lt‚ü©,
  rcases emetric.totally_bounded_iff.1 (compact_iff_totally_bounded_complete.1 (@compact_univ Œ± _ _)).1 Œ¥ Œ¥pos
    with ‚ü®s, fs, hs‚ü©,
  -- s : set Œ±,  fs : finite s,  hs : univ ‚äÜ ‚ãÉ (y : Œ±) (H : y ‚àà s), eball y Œ¥
  -- we first show that any set is well approximated by a subset of `s`.
  have main : ‚àÄ u : set Œ±, ‚àÉv ‚äÜ s, Hausdorff_edist u v ‚â§ Œ¥,
  { assume u,
    let v := {x : Œ± | x ‚àà s ‚àß ‚àÉy‚ààu, edist x y < Œ¥},
    existsi [v, ((Œªx hx, hx.1) : v ‚äÜ s)],
    refine Hausdorff_edist_le_of_mem_edist _ _,
    { assume x hx,
      have : x ‚àà ‚ãÉy ‚àà s, ball y Œ¥ := hs (by simp),
      rcases mem_bUnion_iff.1 this with ‚ü®y, ys, dy‚ü©,
      have : edist y x < Œ¥ := by simp at dy; rwa [edist_comm] at dy,
      exact ‚ü®y, ‚ü®ys, ‚ü®x, hx, this‚ü©‚ü©, le_of_lt dy‚ü© },
    { rintros x ‚ü®hx1, ‚ü®y, yu, hy‚ü©‚ü©,
      exact ‚ü®y, yu, le_of_lt hy‚ü© }},
  -- introduce the set F of all subsets of `s` (seen as members of `closeds Œ±`).
  let F := {f : closeds Œ± | f.val ‚äÜ s},
  use F,
  split,
  -- `F` is finite
  { apply @finite_of_finite_image _ _ F (Œªf, f.val),
    { exact subtype.val_injective.inj_on F },
    { refine fs.finite_subsets.subset (Œªb, _),
      simp only [and_imp, set.mem_image, set.mem_set_of_eq, exists_imp_distrib],
      assume x hx hx',
      rwa hx' at hx }},
  -- `F` is Œµ-dense
  { assume u _,
    rcases main u.val with ‚ü®t0, t0s, Dut0‚ü©,
    have : is_closed t0 := closed_of_compact _ (fs.subset t0s).compact,
    let t : closeds Œ± := ‚ü®t0, this‚ü©,
    have : t ‚àà F := t0s,
    have : edist u t < Œµ := lt_of_le_of_lt Dut0 Œ¥lt,
    apply mem_bUnion_iff.2,
    exact ‚ü®t, ‚Äπt ‚àà F‚Ä∫, this‚ü© }
end‚ü©

/-- In an emetric space, the type of non-empty compact subsets is an emetric space,
where the edistance is the Hausdorff edistance -/
instance nonempty_compacts.emetric_space : emetric_space (nonempty_compacts Œ±) :=
{ edist               := Œªs t, Hausdorff_edist s.val t.val,
  edist_self          := Œªs, Hausdorff_edist_self,
  edist_comm          := Œªs t, Hausdorff_edist_comm,
  edist_triangle      := Œªs t u, Hausdorff_edist_triangle,
  eq_of_edist_eq_zero := Œªs t h, subtype.eq $ begin
    have : closure (s.val) = closure (t.val) := Hausdorff_edist_zero_iff_closure_eq_closure.1 h,
    rwa [closure_eq_iff_is_closed.2 (closed_of_compact _ s.property.2),
              closure_eq_iff_is_closed.2 (closed_of_compact _ t.property.2)] at this,
  end }

/-- `nonempty_compacts.to_closeds` is a uniform embedding (as it is an isometry) -/
lemma nonempty_compacts.to_closeds.uniform_embedding :
  uniform_embedding (@nonempty_compacts.to_closeds Œ± _ _) :=
isometry.uniform_embedding $ Œªx y, rfl

/-- The range of `nonempty_compacts.to_closeds` is closed in a complete space -/
lemma nonempty_compacts.is_closed_in_closeds [complete_space Œ±] :
  is_closed (range $ @nonempty_compacts.to_closeds Œ± _ _) :=
begin
  have : range nonempty_compacts.to_closeds = {s : closeds Œ± | s.val.nonempty ‚àß compact s.val},
    from range_inclusion _,
  rw this,
  refine is_closed_of_closure_subset (Œªs hs, ‚ü®_, _‚ü©),
  { -- take a set set t which is nonempty and at a finite distance of s
    rcases mem_closure_iff.1 hs ‚ä§ ennreal.coe_lt_top with ‚ü®t, ht, Dst‚ü©,
    rw edist_comm at Dst,
    -- since `t` is nonempty, so is `s`
    exact nonempty_of_Hausdorff_edist_ne_top ht.1 (ne_of_lt Dst) },
  { refine compact_iff_totally_bounded_complete.2 ‚ü®_, is_complete_of_is_closed s.property‚ü©,
    refine totally_bounded_iff.2 (ŒªŒµ Œµpos, _),
    -- we have to show that s is covered by finitely many eballs of radius Œµ
    -- pick a nonempty compact set t at distance at most Œµ/2 of s
    rcases mem_closure_iff.1 hs (Œµ/2) (ennreal.half_pos Œµpos) with ‚ü®t, ht, Dst‚ü©,
    -- cover this space with finitely many balls of radius Œµ/2
    rcases totally_bounded_iff.1 (compact_iff_totally_bounded_complete.1 ht.2).1 (Œµ/2) (ennreal.half_pos Œµpos)
      with ‚ü®u, fu, ut‚ü©,
    refine ‚ü®u, ‚ü®fu, Œªx hx, _‚ü©‚ü©,
    -- u : set Œ±,  fu : finite u,  ut : t.val ‚äÜ ‚ãÉ (y : Œ±) (H : y ‚àà u), eball y (Œµ / 2)
    -- then s is covered by the union of the balls centered at u of radius Œµ
    rcases exists_edist_lt_of_Hausdorff_edist_lt hx Dst with ‚ü®z, hz, Dxz‚ü©,
    rcases mem_bUnion_iff.1 (ut hz) with ‚ü®y, hy, Dzy‚ü©,
    have : edist x y < Œµ := calc
      edist x y ‚â§ edist x z + edist z y : edist_triangle _ _ _
      ... < Œµ/2 + Œµ/2 : ennreal.add_lt_add Dxz Dzy
      ... = Œµ : ennreal.add_halves _,
    exact mem_bUnion hy this },
end

/-- In a complete space, the type of nonempty compact subsets is complete. This follows
from the same statement for closed subsets -/
instance nonempty_compacts.complete_space [complete_space Œ±] :
  complete_space (nonempty_compacts Œ±) :=
(complete_space_iff_is_complete_range nonempty_compacts.to_closeds.uniform_embedding).2 $
  is_complete_of_is_closed nonempty_compacts.is_closed_in_closeds

/-- In a compact space, the type of nonempty compact subsets is compact. This follows from
the same statement for closed subsets -/
instance nonempty_compacts.compact_space [compact_space Œ±] : compact_space (nonempty_compacts Œ±) :=
‚ü®begin
  rw embedding.compact_iff_compact_image nonempty_compacts.to_closeds.uniform_embedding.embedding,
  rw [image_univ],
  exact nonempty_compacts.is_closed_in_closeds.compact
end‚ü©

/-- In a second countable space, the type of nonempty compact subsets is second countable -/
instance nonempty_compacts.second_countable_topology [second_countable_topology Œ±] :
  second_countable_topology (nonempty_compacts Œ±) :=
begin
  haveI : separable_space (nonempty_compacts Œ±) :=
  begin
    /- To obtain a countable dense subset of `nonempty_compacts Œ±`, start from
    a countable dense subset `s` of Œ±, and then consider all its finite nonempty subsets.
    This set is countable and made of nonempty compact sets. It turns out to be dense:
    by total boundedness, any compact set `t` can be covered by finitely many small balls, and
    approximations in `s` of the centers of these balls give the required finite approximation
    of `t`. -/
    have : separable_space Œ± := by apply_instance,
    rcases this.exists_countable_closure_eq_univ with ‚ü®s, cs, s_dense‚ü©,
    let v0 := {t : set Œ± | finite t ‚àß t ‚äÜ s},
    let v : set (nonempty_compacts Œ±) := {t : nonempty_compacts Œ± | t.val ‚àà v0},
    refine  ‚ü®‚ü®v, ‚ü®_, _‚ü©‚ü©‚ü©,
    { have : countable (subtype.val '' v),
      { refine (countable_set_of_finite_subset cs).mono (Œªx hx, _),
        rcases (mem_image _ _ _).1 hx with ‚ü®y, ‚ü®hy, yx‚ü©‚ü©,
        rw ‚Üê yx,
        exact hy },
      apply countable_of_injective_of_countable_image _ this,
      apply subtype.val_injective.inj_on },
    { refine subset.antisymm (subset_univ _) (Œªt ht, mem_closure_iff.2 (ŒªŒµ Œµpos, _)),
      -- t is a compact nonempty set, that we have to approximate uniformly by a a set in `v`.
      rcases dense Œµpos with ‚ü®Œ¥, Œ¥pos, Œ¥lt‚ü©,
      -- construct a map F associating to a point in Œ± an approximating point in s, up to Œ¥/2.
      have Exy : ‚àÄx, ‚àÉy, y ‚àà s ‚àß edist x y < Œ¥/2,
      { assume x,
        have : x ‚àà closure s := by rw s_dense; exact mem_univ _,
        rcases mem_closure_iff.1 this (Œ¥/2) (ennreal.half_pos Œ¥pos) with ‚ü®y, ys, hy‚ü©,
        exact ‚ü®y, ‚ü®ys, hy‚ü©‚ü© },
      let F := Œªx, some (Exy x),
      have Fspec : ‚àÄx, F x ‚àà s ‚àß edist x (F x) < Œ¥/2 := Œªx, some_spec (Exy x),

      -- cover `t` with finitely many balls. Their centers form a set `a`
      have : totally_bounded t.val := (compact_iff_totally_bounded_complete.1 t.property.2).1,
      rcases totally_bounded_iff.1 this (Œ¥/2) (ennreal.half_pos Œ¥pos) with ‚ü®a, af, ta‚ü©,
      -- a : set Œ±,  af : finite a,  ta : t.val ‚äÜ ‚ãÉ (y : Œ±) (H : y ‚àà a), eball y (Œ¥ / 2)
      -- replace each center by a nearby approximation in `s`, giving a new set `b`
      let b := F '' a,
      have : finite b := af.image _,
      have tb : ‚àÄx ‚àà t.val, ‚àÉy ‚àà b, edist x y < Œ¥,
      { assume x hx,
        rcases mem_bUnion_iff.1 (ta hx) with ‚ü®z, za, Dxz‚ü©,
        existsi [F z, mem_image_of_mem _ za],
        calc edist x (F z) ‚â§ edist x z + edist z (F z) : edist_triangle _ _ _
             ... < Œ¥/2 + Œ¥/2 : ennreal.add_lt_add Dxz (Fspec z).2
             ... = Œ¥ : ennreal.add_halves _ },
      -- keep only the points in `b` that are close to point in `t`, yielding a new set `c`
      let c := {y ‚àà b | ‚àÉx‚ààt.val, edist x y < Œ¥},
      have : finite c := ‚Äπfinite b‚Ä∫.subset (Œªx hx, hx.1),
      -- points in `t` are well approximated by points in `c`
      have tc : ‚àÄx ‚àà t.val, ‚àÉy ‚àà c, edist x y ‚â§ Œ¥,
      { assume x hx,
        rcases tb x hx with ‚ü®y, yv, Dxy‚ü©,
        have : y ‚àà c := by simp [c, -mem_image]; exact ‚ü®yv, ‚ü®x, hx, Dxy‚ü©‚ü©,
        exact ‚ü®y, this, le_of_lt Dxy‚ü© },
      -- points in `c` are well approximated by points in `t`
      have ct : ‚àÄy ‚àà c, ‚àÉx ‚àà t.val, edist y x ‚â§ Œ¥,
      { rintros y ‚ü®hy1, ‚ü®x, xt, Dyx‚ü©‚ü©,
        have : edist y x ‚â§ Œ¥ := calc
          edist y x = edist x y : edist_comm _ _
          ... ‚â§ Œ¥ : le_of_lt Dyx,
        exact ‚ü®x, xt, this‚ü© },
      -- it follows that their Hausdorff distance is small
      have : Hausdorff_edist t.val c ‚â§ Œ¥ :=
        Hausdorff_edist_le_of_mem_edist tc ct,
      have Dtc : Hausdorff_edist t.val c < Œµ := lt_of_le_of_lt this Œ¥lt,
      -- the set `c` is not empty, as it is well approximated by a nonempty set
      have hc : c.nonempty,
        from nonempty_of_Hausdorff_edist_ne_top t.property.1 (ne_top_of_lt Dtc),
      -- let `d` be the version of `c` in the type `nonempty_compacts Œ±`
      let d : nonempty_compacts Œ± := ‚ü®c, ‚ü®hc, ‚Äπfinite c‚Ä∫.compact‚ü©‚ü©,
      have : c ‚äÜ s,
      { assume x hx,
        rcases (mem_image _ _ _).1 hx.1 with ‚ü®y, ‚ü®ya, yx‚ü©‚ü©,
        rw ‚Üê yx,
        exact (Fspec y).1 },
      have : d ‚àà v := ‚ü®‚Äπfinite c‚Ä∫, this‚ü©,
      -- we have proved that `d` is a good approximation of `t` as requested
      exact ‚ü®d, ‚Äπd ‚àà v‚Ä∫, Dtc‚ü© },
  end,
  apply second_countable_of_separable,
end

end --section
end emetric --namespace

namespace metric
section

variables {Œ± : Type u} [metric_space Œ±]

/-- `nonempty_compacts Œ±` inherits a metric space structure, as the Hausdorff
edistance between two such sets is finite. -/
instance nonempty_compacts.metric_space : metric_space (nonempty_compacts Œ±) :=
emetric_space.to_metric_space $ Œªx y, Hausdorff_edist_ne_top_of_nonempty_of_bounded x.2.1 y.2.1
  (bounded_of_compact x.2.2) (bounded_of_compact y.2.2)

/-- The distance on `nonempty_compacts Œ±` is the Hausdorff distance, by construction -/
lemma nonempty_compacts.dist_eq {x y : nonempty_compacts Œ±} :
  dist x y = Hausdorff_dist x.val y.val := rfl

lemma lipschitz_inf_dist_set (x : Œ±) :
  lipschitz_with 1 (Œª s : nonempty_compacts Œ±, inf_dist x s.val) :=
lipschitz_with.of_le_add $ assume s t,
by { rw dist_comm,
  exact inf_dist_le_inf_dist_add_Hausdorff_dist (edist_ne_top t s) }

lemma lipschitz_inf_dist :
  lipschitz_with 2 (Œª p : Œ± √ó (nonempty_compacts Œ±), inf_dist p.1 p.2.val) :=
@lipschitz_with.uncurry _ _ _ _ _ _ (Œª (x : Œ±) (s : nonempty_compacts Œ±), inf_dist x s.val) 1 1
  (Œª s, lipschitz_inf_dist_pt s.val) lipschitz_inf_dist_set

lemma uniform_continuous_inf_dist_Hausdorff_dist :
  uniform_continuous (Œªp : Œ± √ó (nonempty_compacts Œ±), inf_dist p.1 (p.2).val) :=
lipschitz_inf_dist.uniform_continuous

end --section
end metric --namespace
