/-
Copyright (c) 2017 Mario Carneiro. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro

Computational realization of topological spaces (experimental).
-/
import topology.bases
import data.analysis.filter
open set
open filter (hiding realizer)
open_locale topological_space

/-- A `ctop Œ± œÉ` is a realization of a topology (basis) on `Œ±`,
  represented by a type `œÉ` together with operations for the top element and
  the intersection operation. -/
structure ctop (Œ± œÉ : Type*) :=
(f : œÉ ‚Üí set Œ±)
(top : Œ± ‚Üí œÉ)
(top_mem : ‚àÄ x : Œ±, x ‚àà f (top x))
(inter : Œ† a b (x : Œ±), x ‚àà f a ‚à© f b ‚Üí œÉ)
(inter_mem : ‚àÄ a b x h, x ‚àà f (inter a b x h))
(inter_sub : ‚àÄ a b x h, f (inter a b x h) ‚äÜ f a ‚à© f b)

variables {Œ± : Type*} {Œ≤ : Type*} {œÉ : Type*} {œÑ : Type*}

namespace ctop
section
variables (F : ctop Œ± œÉ)

instance : has_coe_to_fun (ctop Œ± œÉ) := ‚ü®_, ctop.f‚ü©

@[simp] theorem coe_mk (f T h‚ÇÅ I h‚ÇÇ h‚ÇÉ a) : (@ctop.mk Œ± œÉ f T h‚ÇÅ I h‚ÇÇ h‚ÇÉ) a = f a := rfl

/-- Map a ctop to an equivalent representation type. -/
def of_equiv (E : œÉ ‚âÉ œÑ) : ctop Œ± œÉ ‚Üí ctop Œ± œÑ
| ‚ü®f, T, h‚ÇÅ, I, h‚ÇÇ, h‚ÇÉ‚ü© :=
  { f         := Œª a, f (E.symm a),
    top       := Œª x, E (T x),
    top_mem   := Œª x, by simpa using h‚ÇÅ x,
    inter     := Œª a b x h, E (I (E.symm a) (E.symm b) x h),
    inter_mem := Œª a b x h, by simpa using h‚ÇÇ (E.symm a) (E.symm b) x h,
    inter_sub := Œª a b x h, by simpa using h‚ÇÉ (E.symm a) (E.symm b) x h }

@[simp] theorem of_equiv_val (E : œÉ ‚âÉ œÑ) (F : ctop Œ± œÉ) (a : œÑ) :
  F.of_equiv E a = F (E.symm a) := by cases F; refl

end

/-- Every `ctop` is a topological space. -/
def to_topsp (F : ctop Œ± œÉ) : topological_space Œ± :=
topological_space.generate_from (set.range F.f)

theorem to_topsp_is_topological_basis (F : ctop Œ± œÉ) :
  @topological_space.is_topological_basis _ F.to_topsp (set.range F.f) :=
‚ü®Œª u ‚ü®a, e‚ÇÅ‚ü© v ‚ü®b, e‚ÇÇ‚ü©, e‚ÇÅ ‚ñ∏ e‚ÇÇ ‚ñ∏
   Œª x h, ‚ü®_, ‚ü®_, rfl‚ü©, F.inter_mem a b x h, F.inter_sub a b x h‚ü©,
eq_univ_iff_forall.2 $ Œª x, ‚ü®_, ‚ü®_, rfl‚ü©, F.top_mem x‚ü©, rfl‚ü©

@[simp] theorem mem_nhds_to_topsp (F : ctop Œ± œÉ) {s : set Œ±} {a : Œ±} :
  s ‚àà @nhds _ F.to_topsp a ‚Üî ‚àÉ b, a ‚àà F b ‚àß F b ‚äÜ s :=
(@topological_space.mem_nhds_of_is_topological_basis
  _ F.to_topsp _ _ _ F.to_topsp_is_topological_basis).trans $
‚ü®Œª ‚ü®_, ‚ü®x, rfl‚ü©, h‚ü©, ‚ü®x, h‚ü©, Œª ‚ü®x, h‚ü©, ‚ü®_, ‚ü®x, rfl‚ü©, h‚ü©‚ü©

end ctop

/-- A `ctop` realizer for the topological space `T` is a `ctop`
  which generates `T`. -/
structure ctop.realizer (Œ±) [T : topological_space Œ±] :=
(œÉ : Type*)
(F : ctop Œ± œÉ)
(eq : F.to_topsp = T)
open ctop

protected def ctop.to_realizer (F : ctop Œ± œÉ) : @ctop.realizer _ F.to_topsp :=
@ctop.realizer.mk _ F.to_topsp œÉ F rfl

namespace ctop.realizer

protected theorem is_basis [T : topological_space Œ±] (F : realizer Œ±) :
  topological_space.is_topological_basis (set.range F.F.f) :=
by have := to_topsp_is_topological_basis F.F; rwa F.eq at this

protected theorem mem_nhds [T : topological_space Œ±] (F : realizer Œ±) {s : set Œ±} {a : Œ±} :
  s ‚àà ùìù a ‚Üî ‚àÉ b, a ‚àà F.F b ‚àß F.F b ‚äÜ s :=
by have := mem_nhds_to_topsp F.F; rwa F.eq at this

theorem is_open_iff [topological_space Œ±] (F : realizer Œ±) {s : set Œ±} :
  is_open s ‚Üî ‚àÄ a ‚àà s, ‚àÉ b, a ‚àà F.F b ‚àß F.F b ‚äÜ s :=
is_open_iff_mem_nhds.trans $ ball_congr $ Œª a h, F.mem_nhds

theorem is_closed_iff [topological_space Œ±] (F : realizer Œ±) {s : set Œ±} :
  is_closed s ‚Üî ‚àÄ a, (‚àÄ b, a ‚àà F.F b ‚Üí ‚àÉ z, z ‚àà F.F b ‚à© s) ‚Üí a ‚àà s :=
F.is_open_iff.trans $ forall_congr $ Œª a,
show (a ‚àâ s ‚Üí (‚àÉ (b : F.œÉ), a ‚àà F.F b ‚àß ‚àÄ z ‚àà F.F b, z ‚àâ s)) ‚Üî _,
by haveI := classical.prop_decidable; rw [not_imp_comm];
   simp [not_exists, not_and, not_forall, and_comm]

theorem mem_interior_iff [topological_space Œ±] (F : realizer Œ±) {s : set Œ±} {a : Œ±} :
  a ‚àà interior s ‚Üî ‚àÉ b, a ‚àà F.F b ‚àß F.F b ‚äÜ s :=
mem_interior_iff_mem_nhds.trans F.mem_nhds

protected theorem is_open [topological_space Œ±] (F : realizer Œ±) (s : F.œÉ) : is_open (F.F s) :=
is_open_iff_nhds.2 $ Œª a m, by simpa using F.mem_nhds.2 ‚ü®s, m, subset.refl _‚ü©

theorem ext' [T : topological_space Œ±] {œÉ : Type*} {F : ctop Œ± œÉ}
  (H : ‚àÄ a s, s ‚àà ùìù a ‚Üî ‚àÉ b, a ‚àà F b ‚àß F b ‚äÜ s) :
  F.to_topsp = T :=
topological_space_eq $ funext $ Œª s, begin
  have : ‚àÄ T s, @topological_space.is_open _ T s ‚Üî _ := @is_open_iff_mem_nhds Œ±,
  rw [this, this],
  apply congr_arg (Œª f : Œ± ‚Üí filter Œ±, ‚àÄ a ‚àà s, s ‚àà f a),
  funext a, apply filter_eq, apply set.ext, intro x,
  rw [mem_nhds_to_topsp, H]
end

theorem ext [T : topological_space Œ±] {œÉ : Type*} {F : ctop Œ± œÉ}
  (H‚ÇÅ : ‚àÄ a, is_open (F a))
  (H‚ÇÇ : ‚àÄ a s, s ‚àà ùìù a ‚Üí ‚àÉ b, a ‚àà F b ‚àß F b ‚äÜ s) :
  F.to_topsp = T :=
ext' $ Œª a s, ‚ü®H‚ÇÇ a s, Œª ‚ü®b, h‚ÇÅ, h‚ÇÇ‚ü©, mem_nhds_sets_iff.2 ‚ü®_, h‚ÇÇ, H‚ÇÅ _, h‚ÇÅ‚ü©‚ü©

variable [topological_space Œ±]

protected def id : realizer Œ± := ‚ü®{x:set Œ± // is_open x},
{ f            := subtype.val,
  top          := Œª _, ‚ü®univ, is_open_univ‚ü©,
  top_mem      := mem_univ,
  inter        := Œª ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü© a h‚ÇÉ, ‚ü®_, is_open_inter h‚ÇÅ h‚ÇÇ‚ü©,
  inter_mem    := Œª ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü© a, id,
  inter_sub    := Œª ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü© a h‚ÇÉ, subset.refl _ },
ext subtype.property $ Œª x s h,
  let ‚ü®t, h, o, m‚ü© := mem_nhds_sets_iff.1 h in ‚ü®‚ü®t, o‚ü©, m, h‚ü©‚ü©

def of_equiv (F : realizer Œ±) (E : F.œÉ ‚âÉ œÑ) : realizer Œ± :=
‚ü®œÑ, F.F.of_equiv E, ext' (Œª a s, F.mem_nhds.trans $
 ‚ü®Œª ‚ü®s, h‚ü©, ‚ü®E s, by simpa using h‚ü©, Œª ‚ü®t, h‚ü©, ‚ü®E.symm t, by simpa using h‚ü©‚ü©)‚ü©

@[simp] theorem of_equiv_œÉ (F : realizer Œ±) (E : F.œÉ ‚âÉ œÑ) : (F.of_equiv E).œÉ = œÑ := rfl
@[simp] theorem of_equiv_F (F : realizer Œ±) (E : F.œÉ ‚âÉ œÑ) (s : œÑ) :
  (F.of_equiv E).F s = F.F (E.symm s) := by delta of_equiv; simp

protected def nhds (F : realizer Œ±) (a : Œ±) : (ùìù a).realizer :=
‚ü®{s : F.œÉ // a ‚àà F.F s},
{ f            := Œª s, F.F s.1,
  pt           := ‚ü®_, F.F.top_mem a‚ü©,
  inf          := Œª ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü©, ‚ü®_, F.F.inter_mem x y a ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©,
  inf_le_left  := Œª ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü© z h, (F.F.inter_sub x y a ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© h).1,
  inf_le_right := Œª ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü© z h, (F.F.inter_sub x y a ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© h).2 },
filter_eq $ set.ext $ Œª x,
‚ü®Œª ‚ü®‚ü®s, as‚ü©, h‚ü©, mem_nhds_sets_iff.2 ‚ü®_, h, F.is_open _, as‚ü©,
 Œª h, let ‚ü®s, h, as‚ü© := F.mem_nhds.1 h in ‚ü®‚ü®s, h‚ü©, as‚ü©‚ü©‚ü©

@[simp] theorem nhds_œÉ (m : Œ± ‚Üí Œ≤) (F : realizer Œ±) (a : Œ±) :
  (F.nhds a).œÉ = {s : F.œÉ // a ‚àà F.F s} := rfl
@[simp] theorem nhds_F (m : Œ± ‚Üí Œ≤) (F : realizer Œ±) (a : Œ±) (s) :
  (F.nhds a).F s = F.F s.1 := rfl

theorem tendsto_nhds_iff {m : Œ≤ ‚Üí Œ±} {f : filter Œ≤} (F : f.realizer) (R : realizer Œ±) {a : Œ±} :
  tendsto m f (ùìù a) ‚Üî ‚àÄ t, a ‚àà R.F t ‚Üí ‚àÉ s, ‚àÄ x ‚àà F.F s, m x ‚àà R.F t :=
(F.tendsto_iff _ (R.nhds a)).trans subtype.forall

end ctop.realizer

structure locally_finite.realizer [topological_space Œ±] (F : realizer Œ±) (f : Œ≤ ‚Üí set Œ±) :=
(bas : ‚àÄ a, {s // a ‚àà F.F s})
(sets : ‚àÄ x:Œ±, fintype {i | (f i ‚à© F.F (bas x)).nonempty})

theorem locally_finite.realizer.to_locally_finite [topological_space Œ±]
  {F : realizer Œ±} {f : Œ≤ ‚Üí set Œ±} (R : locally_finite.realizer F f) :
  locally_finite f :=
Œª a, ‚ü®_, F.mem_nhds.2
  ‚ü®(R.bas a).1, (R.bas a).2, subset.refl _‚ü©, ‚ü®R.sets a‚ü©‚ü©

theorem locally_finite_iff_exists_realizer [topological_space Œ±]
  (F : realizer Œ±) {f : Œ≤ ‚Üí set Œ±} : locally_finite f ‚Üî nonempty (locally_finite.realizer F f) :=
‚ü®Œª h, let ‚ü®g, h‚ÇÅ‚ü© := classical.axiom_of_choice h,
    ‚ü®g‚ÇÇ, h‚ÇÇ‚ü© := classical.axiom_of_choice (Œª x,
       show ‚àÉ (b : F.œÉ), x ‚àà (F.F) b ‚àß (F.F) b ‚äÜ g x, from
       let ‚ü®h, h'‚ü© := h‚ÇÅ x in F.mem_nhds.1 h) in
  ‚ü®‚ü®Œª x, ‚ü®g‚ÇÇ x, (h‚ÇÇ x).1‚ü©, Œª x, finite.fintype $
    let ‚ü®h, h'‚ü© := h‚ÇÅ x in h'.subset $ Œª i hi,
    hi.mono (inter_subset_inter_right _ (h‚ÇÇ x).2)‚ü©‚ü©,
 Œª ‚ü®R‚ü©, R.to_locally_finite‚ü©

def compact.realizer [topological_space Œ±] (R : realizer Œ±) (s : set Œ±) :=
‚àÄ {f : filter Œ±} (F : f.realizer) (x : F.œÉ), f ‚â† ‚ä• ‚Üí
  F.F x ‚äÜ s ‚Üí {a // a‚ààs ‚àß ùìù a ‚äì f ‚â† ‚ä•}
