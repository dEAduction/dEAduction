/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison
-/
import category_theory.eq_to_hom

namespace category_theory

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ -- declare the `v`'s first; see `category_theory.category` for an explanation

section
variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]

/--
`prod C D` gives the cartesian product of two categories.
-/
instance prod : category.{max v‚ÇÅ v‚ÇÇ} (C √ó D) :=
{ hom     := Œª X Y, ((X.1) ‚ü∂ (Y.1)) √ó ((X.2) ‚ü∂ (Y.2)),
  id      := Œª X, ‚ü® ùüô (X.1), ùüô (X.2) ‚ü©,
  comp    := Œª _ _ _ f g, (f.1 ‚â´ g.1, f.2 ‚â´ g.2) }

-- rfl lemmas for category.prod
@[simp] lemma prod_id (X : C) (Y : D) : ùüô (X, Y) = (ùüô X, ùüô Y) := rfl
@[simp] lemma prod_comp {P Q R : C} {S T U : D} (f : (P, S) ‚ü∂ (Q, T)) (g : (Q, T) ‚ü∂ (R, U)) :
  f ‚â´ g = (f.1 ‚â´ g.1, f.2 ‚â´ g.2) := rfl
@[simp] lemma prod_id_fst (X : prod C D) : prod.fst (ùüô X) = ùüô X.fst := rfl
@[simp] lemma prod_id_snd (X : prod C D) : prod.snd (ùüô X) = ùüô X.snd := rfl
@[simp] lemma prod_comp_fst {X Y Z : prod C D} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  (f ‚â´ g).1 = f.1 ‚â´ g.1 := rfl
@[simp] lemma prod_comp_snd {X Y Z : prod C D} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  (f ‚â´ g).2 = f.2 ‚â´ g.2 := rfl
end

section
variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÅ) [category.{v‚ÇÅ} D]
/--
`prod.category.uniform C D` is an additional instance specialised so both factors have the same
universe levels. This helps typeclass resolution.
-/
instance uniform_prod : category (C √ó D) := category_theory.prod C D
end

-- Next we define the natural functors into and out of product categories. For now this doesn't
-- address the universal properties.
namespace prod

/-- `sectl C Z` is the functor `C ‚•§ C √ó D` given by `X ‚Ü¶ (X, Z)`. -/
-- Here and below we specify explicitly the projections to generate `@[simp]` lemmas for,
-- as the default behaviour of `@[simps]` will generate projections all the way down to components
-- of pairs.
@[simps obj map] def sectl
  (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] (Z : D) : C ‚•§ C √ó D :=
{ obj := Œª X, (X, Z),
  map := Œª X Y f, (f, ùüô Z) }

/-- `sectr Z D` is the functor `D ‚•§ C √ó D` given by `Y ‚Ü¶ (Z, Y)` . -/
@[simps obj map] def sectr
  {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] (Z : C) (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D] : D ‚•§ C √ó D :=
{ obj := Œª X, (Z, X),
  map := Œª X Y f, (ùüô Z, f) }

variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]

/-- `fst` is the functor `(X, Y) ‚Ü¶ X`. -/
@[simps obj map] def fst : C √ó D ‚•§ C :=
{ obj := Œª X, X.1,
  map := Œª X Y f, f.1 }

/-- `snd` is the functor `(X, Y) ‚Ü¶ Y`. -/
@[simps obj map] def snd : C √ó D ‚•§ D :=
{ obj := Œª X, X.2,
  map := Œª X Y f, f.2 }

@[simps obj map] def swap : C √ó D ‚•§ D √ó C :=
{ obj := Œª X, (X.2, X.1),
  map := Œª _ _ f, (f.2, f.1) }

@[simps hom_app inv_app] def symmetry : swap C D ‚ãô swap D C ‚âÖ ùü≠ (C √ó D) :=
{ hom := { app := Œª X, ùüô X },
  inv := { app := Œª X, ùüô X } }

def braiding : C √ó D ‚âå D √ó C :=
equivalence.mk (swap C D) (swap D C)
  (nat_iso.of_components (Œª X, eq_to_iso (by simp)) (by tidy))
  (nat_iso.of_components (Œª X, eq_to_iso (by simp)) (by tidy))

instance swap_is_equivalence : is_equivalence (swap C D) :=
(by apply_instance : is_equivalence (braiding C D).functor)

end prod

section
variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]

@[simps] def evaluation : C ‚•§ (C ‚•§ D) ‚•§ D :=
{ obj := Œª X,
  { obj := Œª F, F.obj X,
    map := Œª F G Œ±, Œ±.app X, },
  map := Œª X Y f,
  { app := Œª F, F.map f,
    naturality' := Œª F G Œ±, eq.symm (Œ±.naturality f) } }

@[simps obj map] def evaluation_uncurried : C √ó (C ‚•§ D) ‚•§ D :=
{ obj := Œª p, p.2.obj p.1,
  map := Œª x y f, (x.2.map f.1) ‚â´ (f.2.app y.1),
  map_comp' := Œª X Y Z f g,
  begin
    cases g, cases f, cases Z, cases Y, cases X,
    simp only [prod_comp, nat_trans.comp_app, functor.map_comp, category.assoc],
    rw [‚Üênat_trans.comp_app, nat_trans.naturality, nat_trans.comp_app,
        category.assoc, nat_trans.naturality],
  end }

end

variables {A : Type u‚ÇÅ} [category.{v‚ÇÅ} A]
          {B : Type u‚ÇÇ} [category.{v‚ÇÇ} B]
          {C : Type u‚ÇÉ} [category.{v‚ÇÉ} C]
          {D : Type u‚ÇÑ} [category.{v‚ÇÑ} D]

namespace functor
/-- The cartesian product of two functors. -/
@[simps obj map] def prod (F : A ‚•§ B) (G : C ‚•§ D) : A √ó C ‚•§ B √ó D :=
{ obj := Œª X, (F.obj X.1, G.obj X.2),
  map := Œª _ _ f, (F.map f.1, G.map f.2) }

/- Because of limitations in Lean 3's handling of notations, we do not setup a notation `F √ó G`.
   You can use `F.prod G` as a "poor man's infix", or just write `functor.prod F G`. -/

end functor

namespace nat_trans

/-- The cartesian product of two natural transformations. -/
@[simps app] def prod {F G : A ‚•§ B} {H I : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) :
  F.prod H ‚ü∂ G.prod I :=
{ app         := Œª X, (Œ±.app X.1, Œ≤.app X.2),
  naturality' := Œª X Y f,
  begin
    cases X, cases Y,
    simp only [functor.prod_map, prod.mk.inj_iff, prod_comp],
    split; rw naturality
  end }

/- Again, it is inadvisable in Lean 3 to setup a notation `Œ± √ó Œ≤`;
   use instead `Œ±.prod Œ≤` or `nat_trans.prod Œ± Œ≤`. -/

end nat_trans

end category_theory
