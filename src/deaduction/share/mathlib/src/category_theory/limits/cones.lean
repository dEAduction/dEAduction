/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison, Floris van Doorn
-/
import category_theory.const
import category_theory.yoneda

universes v u u' -- declare the `v`'s first; see `category_theory.category` for an explanation

open category_theory

-- There is an awkward difficulty with universes here.
-- If we allowed `J` to be a small category in `Prop`, we'd run into trouble
-- because `yoneda.obj (F : (J ‚•§ C)·µí·µñ)` will be a functor into `Sort (max v 1)`,
-- not into `Sort v`.
-- So we don't allow this case; it's not particularly useful anyway.
variables {J : Type v} [small_category J]
variables {C : Type u} [category.{v} C]

open category_theory
open category_theory.category
open category_theory.functor
open opposite

namespace category_theory

namespace functor
variables {J C} (F : J ‚•§ C)

/--
`F.cones` is the functor assigning to an object `X` the type of
natural transformations from the constant functor with value `X` to `F`.
An object representing this functor is a limit of `F`.
-/
def cones : C·µí·µñ ‚•§ Type v := (const J).op ‚ãô (yoneda.obj F)

lemma cones_obj (X : C·µí·µñ) : F.cones.obj X = ((const J).obj (unop X) ‚ü∂ F) := rfl

@[simp] lemma cones_map_app {X‚ÇÅ X‚ÇÇ : C·µí·µñ} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (t : F.cones.obj X‚ÇÅ) (j : J) :
  (F.cones.map f t).app j = f.unop ‚â´ t.app j := rfl

/--
`F.cocones` is the functor assigning to an object `X` the type of
natural transformations from `F` to the constant functor with value `X`.
An object corepresenting this functor is a colimit of `F`.
-/
def cocones : C ‚•§ Type v := const J ‚ãô coyoneda.obj (op F)

lemma cocones_obj (X : C) : F.cocones.obj X = (F ‚ü∂ (const J).obj X) := rfl

@[simp] lemma cocones_map_app {X‚ÇÅ X‚ÇÇ : C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) (t : F.cocones.obj X‚ÇÅ) (j : J) :
  (F.cocones.map f t).app j = t.app j ‚â´ f := rfl

end functor

section
variables (J C)

/--
Functorially associated to each functor `J ‚•§ C`, we have the `C`-presheaf consisting of
cones with a given cone point.
-/
@[simps] def cones : (J ‚•§ C) ‚•§ (C·µí·µñ ‚•§ Type v) :=
{ obj := functor.cones,
  map := Œª F G f, whisker_left (const J).op (yoneda.map f) }

/--
Contravariantly associated to each functor `J ‚•§ C`, we have the `C`-copresheaf consisting of
cocones with a given cocone point.
-/
@[simps] def cocones : (J ‚•§ C)·µí·µñ ‚•§ (C ‚•§ Type v) :=
{ obj := Œª F, functor.cocones (unop F),
  map := Œª F G f, whisker_left (const J) (coyoneda.map f) }

end

namespace limits

/--
A `c : cone F` is:
* an object `c.X` and
* a natural transformation `c.œÄ : c.X ‚ü∂ F` from the constant `c.X` functor to `F`.

`cone F` is equivalent, via `cone.equiv` below, to `Œ£ X, F.cones.obj X`.
-/
structure cone (F : J ‚•§ C) :=
(X : C)
(œÄ : (const J).obj X ‚ü∂ F)

@[simp] lemma cone.w {F : J ‚•§ C} (c : cone F) {j j' : J} (f : j ‚ü∂ j') :
  c.œÄ.app j ‚â´ F.map f = c.œÄ.app j' :=
by convert ‚Üê(c.œÄ.naturality f).symm; apply id_comp

/--
A `c : cocone F` is
* an object `c.X` and
* a natural transformation `c.Œπ : F ‚ü∂ c.X` from `F` to the constant `c.X` functor.

`cocone F` is equivalent, via `cone.equiv` below, to `Œ£ X, F.cocones.obj X`.
-/
structure cocone (F : J ‚•§ C) :=
(X : C)
(Œπ : F ‚ü∂ (const J).obj X)

@[simp] lemma cocone.w {F : J ‚•§ C} (c : cocone F) {j j' : J} (f : j ‚ü∂ j') :
  F.map f ‚â´ c.Œπ.app j' = c.Œπ.app j :=
by convert ‚Üê(c.Œπ.naturality f); apply comp_id


variables {F : J ‚•§ C}

namespace cone

def equiv (F : J ‚•§ C) : cone F ‚âÖ Œ£ X, F.cones.obj X :=
{ hom := Œª c, ‚ü®op c.X, c.œÄ‚ü©,
  inv := Œª c, { X := unop c.1, œÄ := c.2 },
  hom_inv_id' := begin ext, cases x, refl, end,
  inv_hom_id' := begin ext, cases x, refl, end }

@[simp] def extensions (c : cone F) : yoneda.obj c.X ‚ü∂ F.cones :=
{ app := Œª X f, ((const J).map f) ‚â´ c.œÄ }

/-- A map to the vertex of a cone induces a cone by composition. -/
@[simp] def extend (c : cone F) {X : C} (f : X ‚ü∂ c.X) : cone F :=
{ X := X,
  œÄ := c.extensions.app (op X) f }

@[simp] lemma extend_œÄ  (c : cone F) {X : C·µí·µñ} (f : unop X ‚ü∂ c.X) :
  (extend c f).œÄ = c.extensions.app X f :=
rfl

@[simps] def whisker {K : Type v} [small_category K] (E : K ‚•§ J) (c : cone F) : cone (E ‚ãô F) :=
{ X := c.X,
  œÄ := whisker_left E c.œÄ }

end cone

namespace cocone

def equiv (F : J ‚•§ C) : cocone F ‚âÖ Œ£ X, F.cocones.obj X :=
{ hom := Œª c, ‚ü®c.X, c.Œπ‚ü©,
  inv := Œª c, { X := c.1, Œπ := c.2 },
  hom_inv_id' := begin ext, cases x, refl, end,
  inv_hom_id' := begin ext, cases x, refl, end }

@[simp] def extensions (c : cocone F) : coyoneda.obj (op c.X) ‚ü∂ F.cocones :=
{ app := Œª X f, c.Œπ ‚â´ (const J).map f }

/-- A map from the vertex of a cocone induces a cocone by composition. -/
@[simp] def extend (c : cocone F) {X : C} (f : c.X ‚ü∂ X) : cocone F :=
{ X := X,
  Œπ := c.extensions.app X f }

@[simp] lemma extend_Œπ  (c : cocone F) {X : C} (f : c.X ‚ü∂ X) :
  (extend c f).Œπ = c.extensions.app X f :=
rfl

@[simps] def whisker {K : Type v} [small_category K] (E : K ‚•§ J) (c : cocone F) : cocone (E ‚ãô F) :=
{ X := c.X,
  Œπ := whisker_left E c.Œπ }

end cocone

@[ext] structure cone_morphism (A B : cone F) :=
(hom : A.X ‚ü∂ B.X)
(w'  : ‚àÄ j : J, hom ‚â´ B.œÄ.app j = A.œÄ.app j . obviously)

restate_axiom cone_morphism.w'
attribute [simp] cone_morphism.w

@[simps] instance cone.category : category.{v} (cone F) :=
{ hom  := Œª A B, cone_morphism A B,
  comp := Œª X Y Z f g,
  { hom := f.hom ‚â´ g.hom,
    w' := by intro j; rw [assoc, g.w, f.w] },
  id   := Œª B, { hom := ùüô B.X } }

namespace cones
/-- To give an isomorphism between cones, it suffices to give an
  isomorphism between their vertices which commutes with the cone
  maps. -/
@[ext, simps] def ext {c c' : cone F}
  (œÜ : c.X ‚âÖ c'.X) (w : ‚àÄ j, c.œÄ.app j = œÜ.hom ‚â´ c'.œÄ.app j) : c ‚âÖ c' :=
{ hom := { hom := œÜ.hom },
  inv := { hom := œÜ.inv, w' := Œª j, œÜ.inv_comp_eq.mpr (w j) } }

@[simps] def postcompose {G : J ‚•§ C} (Œ± : F ‚ü∂ G) : cone F ‚•§ cone G :=
{ obj := Œª c, { X := c.X, œÄ := c.œÄ ‚â´ Œ± },
  map := Œª c‚ÇÅ c‚ÇÇ f, { hom := f.hom, w' :=
  by intro; erw ‚Üê category.assoc; simp [-category.assoc] } }

def postcompose_comp {G H : J ‚•§ C} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
  postcompose (Œ± ‚â´ Œ≤) ‚âÖ postcompose Œ± ‚ãô postcompose Œ≤ :=
nat_iso.of_components (Œª s, cones.ext (iso.refl _) (by tidy)) (by tidy)

def postcompose_id : postcompose (ùüô F) ‚âÖ ùü≠ (cone F) :=
nat_iso.of_components (Œª s, cones.ext (iso.refl _) (by tidy)) (by tidy)

@[simps]
def postcompose_equivalence {G : J ‚•§ C} (Œ± : F ‚âÖ G) : cone F ‚âå cone G :=
{ functor := postcompose Œ±.hom,
  inverse := postcompose Œ±.inv,
  unit_iso := nat_iso.of_components (Œª s, cones.ext (iso.refl _) (by tidy)) (by tidy),
  counit_iso := nat_iso.of_components (Œª s, cones.ext (iso.refl _) (by tidy)) (by tidy) }

section
variable (F)

@[simps]
def forget : cone F ‚•§ C :=
{ obj := Œª t, t.X, map := Œª s t f, f.hom }

variables {D : Type u'} [category.{v} D]

@[simps] def functoriality (G : C ‚•§ D) : cone F ‚•§ cone (F ‚ãô G) :=
{ obj := Œª A,
  { X := G.obj A.X,
    œÄ := { app := Œª j, G.map (A.œÄ.app j), naturality' := by intros; erw ‚ÜêG.map_comp; tidy } },
  map := Œª X Y f,
  { hom := G.map f.hom,
    w'  := by intros; rw [‚Üêfunctor.map_comp, f.w] } }
end
end cones

@[ext] structure cocone_morphism (A B : cocone F) :=
(hom : A.X ‚ü∂ B.X)
(w'  : ‚àÄ j : J, A.Œπ.app j ‚â´ hom = B.Œπ.app j . obviously)

restate_axiom cocone_morphism.w'
attribute [simp] cocone_morphism.w

@[simps] instance cocone.category : category.{v} (cocone F) :=
{ hom  := Œª A B, cocone_morphism A B,
  comp := Œª _ _ _ f g,
  { hom := f.hom ‚â´ g.hom,
    w' := by intro j; rw [‚Üêassoc, f.w, g.w] },
  id   := Œª B, { hom := ùüô B.X } }

namespace cocones
/-- To give an isomorphism between cocones, it suffices to give an
  isomorphism between their vertices which commutes with the cocone
  maps. -/
@[ext, simps] def ext {c c' : cocone F}
  (œÜ : c.X ‚âÖ c'.X) (w : ‚àÄ j, c.Œπ.app j ‚â´ œÜ.hom = c'.Œπ.app j) : c ‚âÖ c' :=
{ hom := { hom := œÜ.hom },
  inv := { hom := œÜ.inv, w' := Œª j, œÜ.comp_inv_eq.mpr (w j).symm } }

@[simps] def precompose {G : J ‚•§ C} (Œ± : G ‚ü∂ F) : cocone F ‚•§ cocone G :=
{ obj := Œª c, { X := c.X, Œπ := Œ± ‚â´ c.Œπ },
  map := Œª c‚ÇÅ c‚ÇÇ f, { hom := f.hom } }

def precompose_comp {G H : J ‚•§ C} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
  precompose (Œ± ‚â´ Œ≤) ‚âÖ precompose Œ≤ ‚ãô precompose Œ± :=
by { fapply nat_iso.of_components, { intro s, fapply ext, refl, obviously }, obviously }

def precompose_id : precompose (ùüô F) ‚âÖ ùü≠ (cocone F) :=
by { fapply nat_iso.of_components, { intro s, fapply ext, refl, obviously }, obviously }

@[simps]
def precompose_equivalence {G : J ‚•§ C} (Œ± : G ‚âÖ F) : cocone F ‚âå cocone G :=
{ functor := precompose Œ±.hom,
  inverse := precompose Œ±.inv,
  unit_iso := nat_iso.of_components (Œª s, cocones.ext (iso.refl _) (by tidy)) (by tidy),
  counit_iso := nat_iso.of_components (Œª s, cocones.ext (iso.refl _) (by tidy)) (by tidy) }

section
variable (F)

@[simps]
def forget : cocone F ‚•§ C :=
{ obj := Œª t, t.X, map := Œª s t f, f.hom }

variables {D : Type u'} [category.{v} D]

@[simps] def functoriality (G : C ‚•§ D) : cocone F ‚•§ cocone (F ‚ãô G) :=
{ obj := Œª A,
  { X := G.obj A.X,
    Œπ := { app := Œª j, G.map (A.Œπ.app j), naturality' := by intros; erw ‚ÜêG.map_comp; tidy } },
  map := Œª _ _ f,
  { hom := G.map f.hom,
    w'  := by intros; rw [‚Üêfunctor.map_comp, cocone_morphism.w] } }
end
end cocones

end limits

namespace functor

variables {D : Type u'} [category.{v} D]
variables {F : J ‚•§ C} {G : J ‚•§ C} (H : C ‚•§ D)

open category_theory.limits

/-- The image of a cone in C under a functor G : C ‚•§ D is a cone in D. -/
def map_cone   (c : cone F)   : cone (F ‚ãô H)   := (cones.functoriality F H).obj c
/-- The image of a cocone in C under a functor G : C ‚•§ D is a cocone in D. -/
def map_cocone (c : cocone F) : cocone (F ‚ãô H) := (cocones.functoriality F H).obj c

@[simp] lemma map_cone_X (c : cone F) : (H.map_cone c).X = H.obj c.X := rfl
@[simp] lemma map_cocone_X (c : cocone F) : (H.map_cocone c).X = H.obj c.X := rfl

@[simps]
def map_cone_inv [is_equivalence H]
  (c : cone (F ‚ãô H)) : cone F :=
let t := (inv H).map_cone c in
let Œ± : (F ‚ãô H) ‚ãô inv H ‚ü∂ F :=
  ((whisker_left F is_equivalence.unit_iso.inv) : F ‚ãô (H ‚ãô inv H) ‚ü∂ _) ‚â´ (functor.right_unitor _).hom in
{ X := t.X,
  œÄ := ((category_theory.cones J C).map Œ±).app (op t.X) t.œÄ }

def map_cone_morphism   {c c' : cone F}   (f : c ‚ü∂ c')   :
  (H.map_cone c) ‚ü∂ (H.map_cone c') := (cones.functoriality F H).map f
def map_cocone_morphism {c c' : cocone F} (f : c ‚ü∂ c') :
  (H.map_cocone c) ‚ü∂ (H.map_cocone c') := (cocones.functoriality F H).map f

@[simp] lemma map_cone_œÄ (c : cone F) (j : J) :
  (map_cone H c).œÄ.app j = H.map (c.œÄ.app j) := rfl
@[simp] lemma map_cocone_Œπ (c : cocone F) (j : J) :
  (map_cocone H c).Œπ.app j = H.map (c.Œπ.app j) := rfl

/-- `map_cone` is the left inverse to `map_cone_inv`. -/
def map_cone_map_cone_inv {F : J ‚•§ D} (H : D ‚•§ C) [is_equivalence H] (c : cone (F ‚ãô H)) :
  map_cone H (map_cone_inv H c) ‚âÖ c :=
begin
  apply cones.ext _ (Œª j, _),
  { exact H.inv_fun_id.app c.X },
  { dsimp,
    erw [comp_id, ‚Üê H.inv_fun_id.hom.naturality (c.œÄ.app j), comp_map, H.map_comp],
    congr' 1,
    erw [‚Üê cancel_epi (H.inv_fun_id.inv.app (H.obj (F.obj j))), nat_iso.inv_hom_id_app,
         ‚Üê (functor.as_equivalence H).functor_unit _, ‚Üê H.map_comp, nat_iso.hom_inv_id_app,
         H.map_id],
    refl }
end

end functor

end category_theory

namespace category_theory.limits

variables {F : J ‚•§ C·µí·µñ}

-- Here and below we only automatically generate the `@[simp]` lemma for the `X` field,
-- as we can be a simpler `rfl` lemma for the components of the natural transformation by hand.
@[simps X] def cone_of_cocone_left_op (c : cocone F.left_op) : cone F :=
{ X := op c.X,
  œÄ := nat_trans.right_op (c.Œπ ‚â´ (const.op_obj_unop (op c.X)).hom) }

@[simp] lemma cone_of_cocone_left_op_œÄ_app (c : cocone F.left_op) (j) :
  (cone_of_cocone_left_op c).œÄ.app j = (c.Œπ.app (op j)).op :=
by { dsimp [cone_of_cocone_left_op], simp }

@[simps X] def cocone_left_op_of_cone (c : cone F) : cocone (F.left_op) :=
{ X := unop c.X,
  Œπ := nat_trans.left_op c.œÄ }

@[simp] lemma cocone_left_op_of_cone_Œπ_app (c : cone F) (j) :
  (cocone_left_op_of_cone c).Œπ.app j = (c.œÄ.app (unop j)).unop :=
by { dsimp [cocone_left_op_of_cone], simp }

@[simps X] def cocone_of_cone_left_op (c : cone F.left_op) : cocone F :=
{ X := op c.X,
  Œπ := nat_trans.right_op ((const.op_obj_unop (op c.X)).hom ‚â´ c.œÄ) }

@[simp] lemma cocone_of_cone_left_op_Œπ_app (c : cone F.left_op) (j) :
  (cocone_of_cone_left_op c).Œπ.app j = (c.œÄ.app (op j)).op :=
by { dsimp [cocone_of_cone_left_op], simp }

@[simps X] def cone_left_op_of_cocone (c : cocone F) : cone (F.left_op) :=
{ X := unop c.X,
  œÄ := nat_trans.left_op c.Œπ }

@[simp] lemma cone_left_op_of_cocone_œÄ_app (c : cocone F) (j) :
  (cone_left_op_of_cocone c).œÄ.app j = (c.Œπ.app (unop j)).unop :=
by { dsimp [cone_left_op_of_cocone], simp }
end category_theory.limits
