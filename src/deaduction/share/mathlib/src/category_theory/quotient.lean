/-
Copyright (c) 2020 David W√§rn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David W√§rn
-/
import category_theory.natural_isomorphism

/-!
# Quotient category

Constructs the quotient of a category by an arbitrary family of relations on its hom-sets,
by introducing a type synonym for the objects, and identifying homs as necessary.

This is analogous to 'the quotient of a group by the normal closure of a subset', rather
than 'the quotient of a group by a normal subgroup'.
-/

universes v v‚ÇÅ u u‚ÇÅ

namespace category_theory

variables {C : Type u} [category.{v} C]
          (r : Œ† ‚¶Éa b : C‚¶Ñ, (a ‚ü∂ b) ‚Üí (a ‚ü∂ b) ‚Üí Prop)
include r

/-- A type synonom for `C`, thought of as the objects of the quotient category. -/
structure quotient := (as : C)

instance [inhabited C] : inhabited (quotient r) := ‚ü® { as := default C } ‚ü©

namespace quotient

/-- Generates the closure of a family of relations w.r.t. composition from left and right. -/
inductive comp_closure ‚¶És t : C‚¶Ñ : (s ‚ü∂ t) ‚Üí (s ‚ü∂ t) ‚Üí Prop
| intro {a b} (f : s ‚ü∂ a) (m‚ÇÅ m‚ÇÇ : a ‚ü∂ b) (g : b ‚ü∂ t) (h : r m‚ÇÅ m‚ÇÇ) :
  comp_closure (f ‚â´ m‚ÇÅ ‚â´ g) (f ‚â´ m‚ÇÇ ‚â´ g)

lemma comp_left {a b c : C} (f : a ‚ü∂ b) : Œ† (g‚ÇÅ g‚ÇÇ : b ‚ü∂ c) (h : comp_closure r g‚ÇÅ g‚ÇÇ),
  comp_closure r (f ‚â´ g‚ÇÅ) (f ‚â´ g‚ÇÇ)
| _ _ ‚ü®x, m‚ÇÅ, m‚ÇÇ, y, h‚ü© := by simpa using comp_closure.intro (f ‚â´ x) m‚ÇÅ m‚ÇÇ y h

lemma comp_right {a b c : C} (g : b ‚ü∂ c) : Œ† (f‚ÇÅ f‚ÇÇ : a ‚ü∂ b) (h : comp_closure r f‚ÇÅ f‚ÇÇ),
  comp_closure r (f‚ÇÅ ‚â´ g) (f‚ÇÇ ‚â´ g)
| _ _ ‚ü®x, m‚ÇÅ, m‚ÇÇ, y, h‚ü© := by simpa using comp_closure.intro x m‚ÇÅ m‚ÇÇ (y ‚â´ g) h

/-- Hom-sets of the quotient category. -/
def hom (s t : quotient r) := quot $ @comp_closure C _ r s.as t.as

instance (a : quotient r) : inhabited (hom r a a) := ‚ü®quot.mk _ (ùüô a.as)‚ü©

/-- Composition in the quotient category. -/
def comp ‚¶Éa b c : quotient r‚¶Ñ : hom r a b ‚Üí hom r b c ‚Üí hom r a c :=
Œª hf hg, quot.lift_on hf ( Œª f, quot.lift_on hg (Œª g, quot.mk _ (f ‚â´ g))
  (Œª g‚ÇÅ g‚ÇÇ h, quot.sound $ comp_left r f g‚ÇÅ g‚ÇÇ h) )
  (Œª f‚ÇÅ f‚ÇÇ h, quot.induction_on hg $ Œª g, quot.sound $ comp_right r g f‚ÇÅ f‚ÇÇ h)

@[simp]
lemma comp_mk {a b c : quotient r} (f : a.as ‚ü∂ b.as) (g : b.as ‚ü∂ c.as) :
  comp r (quot.mk _ f) (quot.mk _ g) = quot.mk _ (f ‚â´ g) := rfl

instance category : category (quotient r) :=
{ hom := hom r,
  id := Œª a, quot.mk _ (ùüô a.as),
  comp := comp r }

/-- The functor from a category to its quotient. -/
@[simps]
def functor : C ‚•§ quotient r :=
{ obj := Œª a, { as := a },
  map := Œª _ _ f, quot.mk _ f }

protected lemma induction {P : Œ† {a b : quotient r}, (a ‚ü∂ b) ‚Üí Prop}
  (h : ‚àÄ {x y : C} (f : x ‚ü∂ y), P ((functor r).map f)) :
  ‚àÄ {a b : quotient r} (f : a ‚ü∂ b), P f :=
by { rintros ‚ü®x‚ü© ‚ü®y‚ü© ‚ü®f‚ü©, exact h f, }

protected lemma sound {a b : C} {f‚ÇÅ f‚ÇÇ : a ‚ü∂ b} (h : r f‚ÇÅ f‚ÇÇ) :
  (functor r).map f‚ÇÅ = (functor r).map f‚ÇÇ :=
by simpa using quot.sound (comp_closure.intro (ùüô a) f‚ÇÅ f‚ÇÇ (ùüô b) h)

variables {D : Type*} [category D]
  (F : C ‚•§ D)
  (H : ‚àÄ (x y : C) (f‚ÇÅ f‚ÇÇ : x ‚ü∂ y), r f‚ÇÅ f‚ÇÇ ‚Üí F.map f‚ÇÅ = F.map f‚ÇÇ)
include H

/-- The induced functor on the quotient category. -/
@[simps]
def lift : quotient r ‚•§ D :=
{ obj := Œª a, F.obj a.as,
  map := Œª a b hf, quot.lift_on hf (Œª f, F.map f)
    (by { rintros _ _ ‚ü®_, _, _, _, _, _, h‚ü©, simp [H _ _ _ _ h], }),
  map_id' := Œª a, F.map_id a.as,
  map_comp' := by { rintros a b c ‚ü®f‚ü© ‚ü®g‚ü©, exact F.map_comp f g, } }

/-- The original functor factors through the induced functor. -/
def lift.is_lift : (functor r) ‚ãô lift r F H ‚âÖ F :=
nat_iso.of_components (Œª X, iso.refl _) (by tidy)

@[simp]
lemma lift.is_lift_hom (X : C) : (lift.is_lift r F H).hom.app X = ùüô (F.obj X) :=
rfl
@[simp]
lemma lift.is_lift_inv (X : C) : (lift.is_lift r F H).inv.app X = ùüô (F.obj X) :=
rfl

end quotient

end category_theory
