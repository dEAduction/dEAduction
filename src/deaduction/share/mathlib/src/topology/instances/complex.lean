/-
Copyright (c) 2018 Mario Carneiro. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Mario Carneiro

Topology of the complex numbers.
-/
import data.complex.basic
import topology.instances.real

noncomputable theory
open filter metric
open_locale topological_space

namespace complex

-- TODO(Mario): these proofs are all copied from analysis/real. Generalize
-- to normed fields
instance : metric_space ‚ÑÇ :=
{ dist               := Œªx y, (x - y).abs,
  dist_self          := by simp [abs_zero],
  eq_of_dist_eq_zero := by simp [sub_eq_zero],
  dist_comm          := assume x y, complex.abs_sub _ _,
  dist_triangle      := assume x y z, complex.abs_sub_le _ _ _ }

theorem dist_eq (x y : ‚ÑÇ) : dist x y = (x - y).abs := rfl

theorem uniform_continuous_add : uniform_continuous (Œªp : ‚ÑÇ √ó ‚ÑÇ, p.1 + p.2) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0,
let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_add_continuous_lemma abs Œµ0 in
‚ü®Œ¥, Œ¥0, Œª a b h, let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h in HŒ¥ h‚ÇÅ h‚ÇÇ‚ü©

theorem uniform_continuous_neg : uniform_continuous (@has_neg.neg ‚ÑÇ _) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0, ‚ü®_, Œµ0, Œª a b h,
  by rw dist_comm at h; simpa [dist_eq] using h‚ü©

instance : uniform_add_group ‚ÑÇ :=
uniform_add_group.mk' uniform_continuous_add uniform_continuous_neg

instance : topological_add_group ‚ÑÇ := by apply_instance -- short-circuit type class inference

lemma uniform_continuous_inv (s : set ‚ÑÇ) {r : ‚Ñù} (r0 : 0 < r) (H : ‚àÄ x ‚àà s, r ‚â§ abs x) :
  uniform_continuous (Œªp:s, p.1‚Åª¬π) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0,
let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_inv_continuous_lemma abs Œµ0 r0 in
‚ü®Œ¥, Œ¥0, Œª a b h, HŒ¥ (H _ a.2) (H _ b.2) h‚ü©

lemma uniform_continuous_abs : uniform_continuous (abs : ‚ÑÇ ‚Üí ‚Ñù) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0,
  ‚ü®Œµ, Œµ0, Œª a b, lt_of_le_of_lt (abs_abs_sub_le_abs_sub _ _)‚ü©

lemma continuous_abs : continuous (abs : ‚ÑÇ ‚Üí ‚Ñù) :=
uniform_continuous_abs.continuous

lemma tendsto_inv {r : ‚ÑÇ} (r0 : r ‚â† 0) : tendsto (Œªq, q‚Åª¬π) (ùìù r) (ùìù r‚Åª¬π) :=
by rw ‚Üê abs_pos at r0; exact
tendsto_of_uniform_continuous_subtype
  (uniform_continuous_inv {x | abs r / 2 < abs x} (half_pos r0) (Œª x h, le_of_lt h))
  (mem_nhds_sets (continuous_abs _ $ is_open_lt' (abs r / 2)) (half_lt_self r0))

lemma continuous_inv : continuous (Œªa:{r:‚ÑÇ // r ‚â† 0}, a.val‚Åª¬π) :=
continuous_iff_continuous_at.mpr $ assume ‚ü®r, hr‚ü©,
  tendsto.comp (tendsto_inv hr) (continuous_iff_continuous_at.mp continuous_subtype_val _)

lemma continuous.inv {Œ±} [topological_space Œ±] {f : Œ± ‚Üí ‚ÑÇ} (h : ‚àÄa, f a ‚â† 0) (hf : continuous f) :
  continuous (Œªa, (f a)‚Åª¬π) :=
show continuous ((has_inv.inv ‚àò @subtype.val ‚ÑÇ (Œªr, r ‚â† 0)) ‚àò Œªa, ‚ü®f a, h a‚ü©),
  from continuous_inv.comp (continuous_subtype_mk _ hf)

lemma uniform_continuous_mul_const {x : ‚ÑÇ} : uniform_continuous ((*) x) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0, begin
  cases no_top (abs x) with y xy,
  have y0 := lt_of_le_of_lt (abs_nonneg _) xy,
  refine ‚ü®_, div_pos Œµ0 y0, Œª a b h, _‚ü©,
  rw [dist_eq, ‚Üê mul_sub, abs_mul, ‚Üê mul_div_cancel' Œµ (ne_of_gt y0)],
  exact mul_lt_mul' (le_of_lt xy) h (abs_nonneg _) y0
end

lemma uniform_continuous_mul (s : set (‚ÑÇ √ó ‚ÑÇ))
  {r‚ÇÅ r‚ÇÇ : ‚Ñù} (H : ‚àÄ x ‚àà s, abs (x : ‚ÑÇ √ó ‚ÑÇ).1 < r‚ÇÅ ‚àß abs x.2 < r‚ÇÇ) :
  uniform_continuous (Œªp:s, p.1.1 * p.1.2) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0,
let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_mul_continuous_lemma abs Œµ0 in
‚ü®Œ¥, Œ¥0, Œª a b h,
  let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h in HŒ¥ (H _ a.2).1 (H _ b.2).2 h‚ÇÅ h‚ÇÇ‚ü©

protected lemma continuous_mul : continuous (Œªp : ‚ÑÇ √ó ‚ÑÇ, p.1 * p.2) :=
continuous_iff_continuous_at.2 $ Œª ‚ü®a‚ÇÅ, a‚ÇÇ‚ü©,
tendsto_of_uniform_continuous_subtype
  (uniform_continuous_mul
    ({x | abs x < abs a‚ÇÅ + 1}.prod {x | abs x < abs a‚ÇÇ + 1})
    (Œª x, id))
  (mem_nhds_sets
    (is_open_prod
      (continuous_abs _ $ is_open_gt' (abs a‚ÇÅ + 1))
      (continuous_abs _ $ is_open_gt' (abs a‚ÇÇ + 1)))
    ‚ü®lt_add_one (abs a‚ÇÅ), lt_add_one (abs a‚ÇÇ)‚ü©)

local attribute [semireducible] real.le

lemma uniform_continuous_re : uniform_continuous re :=
metric.uniform_continuous_iff.2 (Œª Œµ Œµ0, ‚ü®Œµ, Œµ0, Œª _ _, lt_of_le_of_lt (abs_re_le_abs _)‚ü©)

lemma continuous_re : continuous re := uniform_continuous_re.continuous

lemma uniform_continuous_im : uniform_continuous im :=
metric.uniform_continuous_iff.2 (Œª Œµ Œµ0, ‚ü®Œµ, Œµ0, Œª _ _, lt_of_le_of_lt (abs_im_le_abs _)‚ü©)

lemma continuous_im : continuous im := uniform_continuous_im.continuous

lemma uniform_continuous_of_real : uniform_continuous of_real :=
metric.uniform_continuous_iff.2 (Œª Œµ Œµ0, ‚ü®Œµ, Œµ0, Œª _ _,
  by rw [real.dist_eq, complex.dist_eq, of_real_eq_coe, of_real_eq_coe, ‚Üê of_real_sub, abs_of_real];
    exact id‚ü©)

lemma continuous_of_real : continuous of_real := uniform_continuous_of_real.continuous

instance : topological_ring ‚ÑÇ :=
{ continuous_mul := complex.continuous_mul, ..complex.topological_add_group }

instance : topological_semiring ‚ÑÇ := by apply_instance -- short-circuit type class inference

/-- `‚ÑÇ` is homeomorphic to the real plane with `max` norm. -/
def real_prod_homeo : ‚ÑÇ ‚âÉ‚Çú (‚Ñù √ó ‚Ñù) :=
{ to_equiv := equiv_real_prod,
  continuous_to_fun := continuous_re.prod_mk continuous_im,
  continuous_inv_fun := show continuous (Œª p : ‚Ñù √ó ‚Ñù, complex.mk p.1 p.2),
    by simp only [mk_eq_add_mul_I]; exact
      (continuous_of_real.comp continuous_fst).add
      ((continuous_of_real.comp continuous_snd).mul continuous_const) }

instance : proper_space ‚ÑÇ :=
‚ü®Œªx r, begin
  refine real_prod_homeo.symm.compact_preimage.1
    (compact_of_is_closed_subset
      ((proper_space.compact_ball x.re r).prod (proper_space.compact_ball x.im r))
      (continuous_iff_is_closed.1 real_prod_homeo.symm.continuous _ is_closed_ball) _),
  exact Œª p h, ‚ü®
    le_trans (abs_re_le_abs (‚ü®p.1, p.2‚ü© - x)) h,
    le_trans (abs_im_le_abs (‚ü®p.1, p.2‚ü© - x)) h‚ü©
end‚ü©

end complex
