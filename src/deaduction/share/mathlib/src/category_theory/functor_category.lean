/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Tim Baumann, Stephen Morgan, Scott Morrison, Floris van Doorn
-/
import category_theory.natural_transformation

namespace category_theory

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ -- declare the `v`'s first; see `category_theory.category` for an explanation

open nat_trans category category_theory.functor

variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]

local attribute [simp] vcomp_app
/--
`functor.category C D` gives the category structure on functors and natural transformations
between categories `C` and `D`.

Notice that if `C` and `D` are both small categories at the same universe level,
this is another small category at that level.
However if `C` and `D` are both large categories at the same universe level,
this is a small category at the next higher level.
-/
instance functor.category : category.{(max u‚ÇÅ v‚ÇÇ)} (C ‚•§ D) :=
{ hom     := Œª F G, nat_trans F G,
  id      := Œª F, nat_trans.id F,
  comp    := Œª _ _ _ Œ± Œ≤, vcomp Œ± Œ≤ }

variables {C D} {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E]
variables {F G H I : C ‚•§ D}

namespace nat_trans

@[simp] lemma vcomp_eq_comp (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) : vcomp Œ± Œ≤ = Œ± ‚â´ Œ≤ := rfl

lemma vcomp_app' (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (X : C) :
  (Œ± ‚â´ Œ≤).app X = (Œ±.app X) ‚â´ (Œ≤.app X) := rfl

lemma congr_app {Œ± Œ≤ : F ‚ü∂ G} (h : Œ± = Œ≤) (X : C) : Œ±.app X = Œ≤.app X := by rw h
@[simp] lemma id_app (F : C ‚•§ D) (X : C) : (ùüô F : F ‚ü∂ F).app X = ùüô (F.obj X) := rfl
@[simp] lemma comp_app {F G H : C ‚•§ D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (X : C) :
  (Œ± ‚â´ Œ≤).app X = Œ±.app X ‚â´ Œ≤.app X := rfl

lemma app_naturality {F G : C ‚•§ (D ‚•§ E)} (T : F ‚ü∂ G) (X : C) {Y Z : D} (f : Y ‚ü∂ Z) :
  ((F.obj X).map f) ‚â´ ((T.app X).app Z) = ((T.app X).app Y) ‚â´ ((G.obj X).map f) :=
(T.app X).naturality f

lemma naturality_app {F G : C ‚•§ (D ‚•§ E)} (T : F ‚ü∂ G) (Z : D) {X Y : C} (f : X ‚ü∂ Y) :
  ((F.map f).app Z) ‚â´ ((T.app Y).app Z) = ((T.app X).app Z) ‚â´ ((G.map f).app Z) :=
congr_fun (congr_arg app (T.naturality f)) Z

/-- `hcomp Œ± Œ≤` is the horizontal composition of natural transformations. -/
def hcomp {H I : D ‚•§ E} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) : (F ‚ãô H) ‚ü∂ (G ‚ãô I) :=
{ app         := Œª X : C, (Œ≤.app (F.obj X)) ‚â´ (I.map (Œ±.app X)),
  naturality' := Œª X Y f,
  begin
    rw [functor.comp_map, functor.comp_map, ‚Üêassoc, naturality, assoc,
        ‚Üêmap_comp I, naturality, map_comp, assoc]
  end }

infix ` ‚ó´ `:80 := hcomp

@[simp] lemma hcomp_app {H I : D ‚•§ E} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) (X : C) :
  (Œ± ‚ó´ Œ≤).app X = (Œ≤.app (F.obj X)) ‚â´ (I.map (Œ±.app X)) := rfl

-- Note that we don't yet prove a `hcomp_assoc` lemma here: even stating it is painful, because we
-- need to use associativity of functor composition. (It's true without the explicit associator,
-- because functor composition is definitionally associative, but relying on the definitional equality
-- causes bad problems with elaboration later.)

lemma exchange {I J K : D ‚•§ E} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H)
  (Œ≥ : I ‚ü∂ J) (Œ¥ : J ‚ü∂ K) : (Œ± ‚â´ Œ≤) ‚ó´ (Œ≥ ‚â´ Œ¥) = (Œ± ‚ó´ Œ≥) ‚â´ (Œ≤ ‚ó´ Œ¥) :=
by ext; simp

end nat_trans
open nat_trans
namespace functor

protected def flip (F : C ‚•§ (D ‚•§ E)) : D ‚•§ (C ‚•§ E) :=
{ obj := Œª k,
  { obj := Œª j, (F.obj j).obj k,
    map := Œª j j' f, (F.map f).app k,
    map_id' := Œª X, begin rw category_theory.functor.map_id, refl end,
    map_comp' := Œª X Y Z f g, by rw [map_comp, ‚Üêcomp_app] },
  map := Œª c c' f,
  { app := Œª j, (F.obj j).map f } }.

@[simp] lemma flip_obj_obj (F : C ‚•§ (D ‚•§ E)) (c) (d) : (F.flip.obj d).obj c = (F.obj c).obj d := rfl
@[simp] lemma flip_obj_map (F : C ‚•§ (D ‚•§ E)) {c c' : C} (f : c ‚ü∂ c') (d : D) :
  (F.flip.obj d).map f = (F.map f).app d := rfl
@[simp] lemma flip_map_app (F : C ‚•§ (D ‚•§ E)) {d d' : D} (f : d ‚ü∂ d') (c : C) :
  (F.flip.map f).app c = (F.obj c).map f := rfl

end functor

end category_theory
