/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro

Theory of topological monoids.

TODO: generalize `topological_monoid` and `topological_add_monoid` to semigroups, or add a type class
`topological_operator Œ± (*)`.
-/
import topology.continuous_on
import algebra.pi_instances

open classical set filter topological_space
open_locale classical topological_space big_operators

universes u v w
variables {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

section topological_monoid

/-- A topological monoid is a monoid in which the multiplication is continuous as a function
`Œ± √ó Œ± ‚Üí Œ±`. -/
class topological_monoid (Œ± : Type u) [topological_space Œ±] [monoid Œ±] : Prop :=
(continuous_mul : continuous (Œªp:Œ±√óŒ±, p.1 * p.2))

/-- A topological (additive) monoid is a monoid in which the addition is
  continuous as a function `Œ± √ó Œ± ‚Üí Œ±`. -/
class topological_add_monoid (Œ± : Type u) [topological_space Œ±] [add_monoid Œ±] : Prop :=
(continuous_add : continuous (Œªp:Œ±√óŒ±, p.1 + p.2))

attribute [to_additive topological_add_monoid] topological_monoid

section
variables [topological_space Œ±] [monoid Œ±] [topological_monoid Œ±]

@[to_additive]
lemma continuous_mul : continuous (Œªp:Œ±√óŒ±, p.1 * p.2) :=
topological_monoid.continuous_mul

@[to_additive]
lemma continuous.mul [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) :
  continuous (Œªx, f x * g x) :=
continuous_mul.comp (hf.prod_mk hg)

@[to_additive]
lemma continuous_mul_left (a : Œ±) : continuous (Œª b:Œ±, a * b) :=
continuous_const.mul continuous_id

@[to_additive]
lemma continuous_mul_right (a : Œ±) : continuous (Œª b:Œ±, b * a) :=
continuous_id.mul continuous_const

@[to_additive]
lemma continuous_on.mul [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {s : set Œ≤}
  (hf : continuous_on f s) (hg : continuous_on g s) :
  continuous_on (Œªx, f x * g x) s :=
(continuous_mul.comp_continuous_on (hf.prod hg) : _)

-- @[to_additive continuous_smul]
lemma continuous_pow : ‚àÄ n : ‚Ñï, continuous (Œª a : Œ±, a ^ n)
| 0 := by simpa using continuous_const
| (k+1) := show continuous (Œª (a : Œ±), a * a ^ k), from continuous_id.mul (continuous_pow _)

@[to_additive]
lemma tendsto_mul {a b : Œ±} : tendsto (Œªp:Œ±√óŒ±, p.fst * p.snd) (ùìù (a, b)) (ùìù (a * b)) :=
continuous_iff_continuous_at.mp topological_monoid.continuous_mul (a, b)

@[to_additive]
lemma filter.tendsto.mul {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {x : filter Œ≤} {a b : Œ±}
  (hf : tendsto f x (ùìù a)) (hg : tendsto g x (ùìù b)) :
  tendsto (Œªx, f x * g x) x (ùìù (a * b)) :=
tendsto_mul.comp (hf.prod_mk_nhds hg)

@[to_additive]
lemma continuous_at.mul [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {x : Œ≤}
  (hf : continuous_at f x) (hg : continuous_at g x) :
  continuous_at (Œªx, f x * g x) x :=
hf.mul hg

@[to_additive]
lemma continuous_within_at.mul [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {g : Œ≤ ‚Üí Œ±} {s : set Œ≤} {x : Œ≤}
  (hf : continuous_within_at f s x) (hg : continuous_within_at g s x) :
  continuous_within_at (Œªx, f x * g x) s x :=
hf.mul hg

@[to_additive]
lemma tendsto_list_prod {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} {x : filter Œ≤} {a : Œ≥ ‚Üí Œ±} :
  ‚àÄl:list Œ≥, (‚àÄc‚ààl, tendsto (f c) x (ùìù (a c))) ‚Üí
    tendsto (Œªb, (l.map (Œªc, f c b)).prod) x (ùìù ((l.map a).prod))
| []       _ := by simp [tendsto_const_nhds]
| (f :: l) h :=
  begin
    simp only [list.map_cons, list.prod_cons],
    exact (h f (list.mem_cons_self _ _)).mul
      (tendsto_list_prod l (assume c hc, h c (list.mem_cons_of_mem _ hc)))
  end

@[to_additive]
lemma continuous_list_prod [topological_space Œ≤] {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} (l : list Œ≥)
  (h : ‚àÄc‚ààl, continuous (f c)) :
  continuous (Œªa, (l.map (Œªc, f c a)).prod) :=
continuous_iff_continuous_at.2 $ assume x, tendsto_list_prod l $ assume c hc,
  continuous_iff_continuous_at.1 (h c hc) x

@[to_additive topological_add_monoid]
instance [topological_space Œ≤] [monoid Œ≤] [topological_monoid Œ≤] : topological_monoid (Œ± √ó Œ≤) :=
‚ü®((continuous_fst.comp continuous_fst).mul (continuous_fst.comp continuous_snd)).prod_mk
 ((continuous_snd.comp continuous_fst).mul (continuous_snd.comp continuous_snd))‚ü©

attribute [instance] prod.topological_add_monoid

end

section
variables [topological_space Œ±] [comm_monoid Œ±]

@[to_additive]
lemma is_submonoid.mem_nhds_one (Œ≤ : set Œ±) [is_submonoid Œ≤] (oŒ≤ : is_open Œ≤) :
  Œ≤ ‚àà ùìù (1 : Œ±) :=
mem_nhds_sets_iff.2 ‚ü®Œ≤, (by refl), oŒ≤, is_submonoid.one_mem‚ü©

variable [topological_monoid Œ±]

@[to_additive]
lemma tendsto_multiset_prod {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} {x : filter Œ≤} {a : Œ≥ ‚Üí Œ±} (s : multiset Œ≥) :
  (‚àÄc‚ààs, tendsto (f c) x (ùìù (a c))) ‚Üí
    tendsto (Œªb, (s.map (Œªc, f c b)).prod) x (ùìù ((s.map a).prod)) :=
by { rcases s with ‚ü®l‚ü©, simp, exact tendsto_list_prod l }

@[to_additive]
lemma tendsto_finset_prod {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} {x : filter Œ≤} {a : Œ≥ ‚Üí Œ±} (s : finset Œ≥) :
  (‚àÄc‚ààs, tendsto (f c) x (ùìù (a c))) ‚Üí tendsto (Œªb, ‚àè c in s, f c b) x (ùìù (‚àè c in s, a c)) :=
tendsto_multiset_prod _

@[to_additive]
lemma continuous_multiset_prod [topological_space Œ≤] {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} (s : multiset Œ≥) :
  (‚àÄc‚ààs, continuous (f c)) ‚Üí continuous (Œªa, (s.map (Œªc, f c a)).prod) :=
by { rcases s with ‚ü®l‚ü©, simp, exact continuous_list_prod l }

@[to_additive]
lemma continuous_finset_prod [topological_space Œ≤] {f : Œ≥ ‚Üí Œ≤ ‚Üí Œ±} (s : finset Œ≥) :
  (‚àÄc‚ààs, continuous (f c)) ‚Üí continuous (Œªa, ‚àè c in s, f c a) :=
continuous_multiset_prod _

end

end topological_monoid
