/-
Copyright (c) 2019 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad

Extends `tendsto` to relations and partial functions.
-/
import order.filter.basic

universes u v w
namespace filter
variables {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

open_locale filter

/-
Relations.
-/

def rmap (r : rel Œ± Œ≤) (f : filter Œ±) : filter Œ≤ :=
{ sets             := r.core ‚Åª¬π' f.sets,
  univ_sets        := by { simp [rel.core], apply univ_mem_sets },
  sets_of_superset := assume s t hs st, mem_sets_of_superset hs $ rel.core_mono _ st,
  inter_sets       := by { simp [set.preimage, rel.core_inter], exact Œª s t, inter_mem_sets } }

theorem rmap_sets (r : rel Œ± Œ≤) (f : filter Œ±) : (rmap r f).sets = r.core ‚Åª¬π' f.sets := rfl

@[simp]
theorem mem_rmap (r : rel Œ± Œ≤) (l : filter Œ±) (s : set Œ≤) :
  s ‚àà l.rmap r ‚Üî r.core s ‚àà l :=
iff.rfl

@[simp]
theorem rmap_rmap (r : rel Œ± Œ≤) (s : rel Œ≤ Œ≥) (l : filter Œ±) :
  rmap s (rmap r l) = rmap (r.comp s) l :=
filter_eq $
by simp [rmap_sets, set.preimage, rel.core_comp]

@[simp]
lemma rmap_compose (r : rel Œ± Œ≤) (s : rel Œ≤ Œ≥) : rmap s ‚àò rmap r = rmap (r.comp s) :=
funext $ rmap_rmap _ _

def rtendsto (r : rel Œ± Œ≤) (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) := l‚ÇÅ.rmap r ‚â§ l‚ÇÇ

theorem rtendsto_def (r : rel Œ± Œ≤) (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) :
  rtendsto r l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, r.core s ‚àà l‚ÇÅ :=
iff.rfl

def rcomap (r : rel Œ± Œ≤) (f : filter Œ≤) : filter Œ± :=
{ sets             := rel.image (Œª s t, r.core s ‚äÜ t) f.sets,
  univ_sets        := ‚ü®set.univ, univ_mem_sets, set.subset_univ _‚ü©,
  sets_of_superset := assume a b ‚ü®a', ha', ma'a‚ü© ab, ‚ü®a', ha', set.subset.trans ma'a ab‚ü©,
  inter_sets       := assume a b ‚ü®a', ha‚ÇÅ, ha‚ÇÇ‚ü© ‚ü®b', hb‚ÇÅ, hb‚ÇÇ‚ü©,
                        ‚ü®a' ‚à© b', inter_mem_sets ha‚ÇÅ hb‚ÇÅ,
                          set.subset.trans (by rw rel.core_inter)
                                           (set.inter_subset_inter ha‚ÇÇ hb‚ÇÇ)‚ü© }

theorem rcomap_sets (r : rel Œ± Œ≤) (f : filter Œ≤) :
  (rcomap r f).sets = rel.image (Œª s t, r.core s ‚äÜ t) f.sets := rfl

@[simp]
theorem rcomap_rcomap (r : rel Œ± Œ≤) (s : rel Œ≤ Œ≥) (l : filter Œ≥) :
  rcomap r (rcomap s l) = rcomap (r.comp s) l :=
filter_eq $
begin
  ext t, simp [rcomap_sets, rel.image, rel.core_comp], split,
  { rintros ‚ü®u, ‚ü®v, vsets, hv‚ü©, h‚ü©,
    exact ‚ü®v, vsets, set.subset.trans (rel.core_mono _ hv) h‚ü© },
  rintros ‚ü®t, tsets, ht‚ü©,
  exact ‚ü®rel.core s t, ‚ü®t, tsets, set.subset.refl _‚ü©, ht‚ü©
end

@[simp]
lemma rcomap_compose (r : rel Œ± Œ≤) (s : rel Œ≤ Œ≥) : rcomap r ‚àò rcomap s = rcomap (r.comp s) :=
funext $ rcomap_rcomap _ _

theorem rtendsto_iff_le_comap (r : rel Œ± Œ≤) (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) :
  rtendsto r l‚ÇÅ l‚ÇÇ ‚Üî l‚ÇÅ ‚â§ l‚ÇÇ.rcomap r :=
begin
  rw rtendsto_def,
  change (‚àÄ (s : set Œ≤), s ‚àà l‚ÇÇ.sets ‚Üí rel.core r s ‚àà l‚ÇÅ) ‚Üî l‚ÇÅ ‚â§ rcomap r l‚ÇÇ,
  simp [filter.le_def, rcomap, rel.mem_image], split,
  intros h s t tl‚ÇÇ h',
  { exact mem_sets_of_superset (h t tl‚ÇÇ) h' },
  intros h t tl‚ÇÇ,
  apply h _ t tl‚ÇÇ (set.subset.refl _),
end

-- Interestingly, there does not seem to be a way to express this relation using a forward map.
-- Given a filter `f` on `Œ±`, we want a filter `f'` on `Œ≤` such that `r.preimage s ‚àà f` if
-- and only if `s ‚àà f'`. But the intersection of two sets satsifying the lhs may be empty.

def rcomap' (r : rel Œ± Œ≤) (f : filter Œ≤) : filter Œ± :=
{ sets             := rel.image (Œª s t, r.preimage s ‚äÜ t) f.sets,
  univ_sets        := ‚ü®set.univ, univ_mem_sets, set.subset_univ _‚ü©,
  sets_of_superset := assume a b ‚ü®a', ha', ma'a‚ü© ab, ‚ü®a', ha', set.subset.trans ma'a ab‚ü©,
  inter_sets       := assume a b ‚ü®a', ha‚ÇÅ, ha‚ÇÇ‚ü© ‚ü®b', hb‚ÇÅ, hb‚ÇÇ‚ü©,
                        ‚ü®a' ‚à© b', inter_mem_sets ha‚ÇÅ hb‚ÇÅ,
                          set.subset.trans (@rel.preimage_inter _ _ r _ _)
                                           (set.inter_subset_inter ha‚ÇÇ hb‚ÇÇ)‚ü© }

@[simp]
lemma mem_rcomap' (r : rel Œ± Œ≤) (l : filter Œ≤) (s : set Œ±) :
  s ‚àà l.rcomap' r ‚Üî ‚àÉ t ‚àà l, rel.preimage r t ‚äÜ s :=
iff.rfl

theorem rcomap'_sets (r : rel Œ± Œ≤) (f : filter Œ≤) :
  (rcomap' r f).sets = rel.image (Œª s t, r.preimage s ‚äÜ t) f.sets := rfl

@[simp]
theorem rcomap'_rcomap' (r : rel Œ± Œ≤) (s : rel Œ≤ Œ≥) (l : filter Œ≥) :
  rcomap' r (rcomap' s l) = rcomap' (r.comp s) l :=
filter_eq $
begin
  ext t, simp [rcomap'_sets, rel.image, rel.preimage_comp], split,
  { rintros ‚ü®u, ‚ü®v, vsets, hv‚ü©, h‚ü©,
    exact ‚ü®v, vsets, set.subset.trans (rel.preimage_mono _ hv) h‚ü© },
  rintros ‚ü®t, tsets, ht‚ü©,
  exact ‚ü®rel.preimage s t, ‚ü®t, tsets, set.subset.refl _‚ü©, ht‚ü©
end

@[simp]
lemma rcomap'_compose (r : rel Œ± Œ≤) (s : rel Œ≤ Œ≥) : rcomap' r ‚àò rcomap' s = rcomap' (r.comp s) :=
funext $ rcomap'_rcomap' _ _

def rtendsto' (r : rel Œ± Œ≤) (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) := l‚ÇÅ ‚â§ l‚ÇÇ.rcomap' r

theorem rtendsto'_def (r : rel Œ± Œ≤) (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) :
  rtendsto' r l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, r.preimage s ‚àà l‚ÇÅ :=
begin
  unfold rtendsto', unfold rcomap', simp [le_def, rel.mem_image], split,
  { intros h s hs, apply (h _ _ hs (set.subset.refl _)) },
  intros h s t ht h', apply mem_sets_of_superset (h t ht) h'
end

theorem tendsto_iff_rtendsto (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) (f : Œ± ‚Üí Œ≤) :
  tendsto f l‚ÇÅ l‚ÇÇ ‚Üî rtendsto (function.graph f) l‚ÇÅ l‚ÇÇ :=
by { simp [tendsto_def, function.graph, rtendsto_def, rel.core, set.preimage] }

theorem tendsto_iff_rtendsto' (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) (f : Œ± ‚Üí Œ≤) :
  tendsto f l‚ÇÅ l‚ÇÇ ‚Üî rtendsto' (function.graph f) l‚ÇÅ l‚ÇÇ :=
by { simp [tendsto_def, function.graph, rtendsto'_def, rel.preimage_def, set.preimage] }

/-
Partial functions.
-/

def pmap (f : Œ± ‚Üí. Œ≤) (l : filter Œ±) : filter Œ≤ :=
filter.rmap f.graph' l

@[simp]
lemma mem_pmap (f : Œ± ‚Üí. Œ≤) (l : filter Œ±) (s : set Œ≤) : s ‚àà l.pmap f ‚Üî f.core s ‚àà l :=
iff.rfl

def ptendsto (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) := l‚ÇÅ.pmap f ‚â§ l‚ÇÇ

theorem ptendsto_def (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) :
  ptendsto f l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, f.core s ‚àà l‚ÇÅ :=
iff.rfl

theorem ptendsto_iff_rtendsto (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) (f : Œ± ‚Üí. Œ≤) :
  ptendsto f l‚ÇÅ l‚ÇÇ ‚Üî rtendsto f.graph' l‚ÇÅ l‚ÇÇ :=
iff.rfl

theorem pmap_res (l : filter Œ±) (s : set Œ±) (f : Œ± ‚Üí Œ≤) :
  pmap (pfun.res f s) l = map f (l ‚äì ùìü s) :=
filter_eq $
begin
  apply set.ext, intro t, simp [pfun.core_res], split,
  { intro h, constructor, split, { exact h },
    constructor, split, { reflexivity },
    simp [set.inter_distrib_right], apply set.inter_subset_left },
  rintro ‚ü®t‚ÇÅ, h‚ÇÅ, t‚ÇÇ, h‚ÇÇ, h‚ÇÉ‚ü©, apply mem_sets_of_superset h‚ÇÅ, rw ‚Üê set.inter_subset,
  exact set.subset.trans (set.inter_subset_inter_right _ h‚ÇÇ) h‚ÇÉ
end

theorem tendsto_iff_ptendsto (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) (s : set Œ±) (f : Œ± ‚Üí Œ≤) :
  tendsto f (l‚ÇÅ ‚äì ùìü s) l‚ÇÇ ‚Üî ptendsto (pfun.res f s) l‚ÇÅ l‚ÇÇ :=
by simp only [tendsto, ptendsto, pmap_res]

theorem tendsto_iff_ptendsto_univ (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) (f : Œ± ‚Üí Œ≤) :
  tendsto f l‚ÇÅ l‚ÇÇ ‚Üî ptendsto (pfun.res f set.univ) l‚ÇÅ l‚ÇÇ :=
by { rw ‚Üê tendsto_iff_ptendsto, simp [principal_univ] }

def pcomap' (f : Œ± ‚Üí. Œ≤) (l : filter Œ≤) : filter Œ± :=
filter.rcomap' f.graph' l

def ptendsto' (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) := l‚ÇÅ ‚â§ l‚ÇÇ.rcomap' f.graph'

theorem ptendsto'_def (f : Œ± ‚Üí. Œ≤) (l‚ÇÅ : filter Œ±) (l‚ÇÇ : filter Œ≤) :
  ptendsto' f l‚ÇÅ l‚ÇÇ ‚Üî ‚àÄ s ‚àà l‚ÇÇ, f.preimage s ‚àà l‚ÇÅ :=
rtendsto'_def _ _ _

theorem ptendsto_of_ptendsto' {f : Œ± ‚Üí. Œ≤} {l‚ÇÅ : filter Œ±} {l‚ÇÇ : filter Œ≤} :
  ptendsto' f l‚ÇÅ l‚ÇÇ ‚Üí ptendsto f l‚ÇÅ l‚ÇÇ :=
begin
  rw [ptendsto_def, ptendsto'_def],
  assume h s sl‚ÇÇ,
  exacts mem_sets_of_superset (h s sl‚ÇÇ) (pfun.preimage_subset_core _ _),
end

theorem ptendsto'_of_ptendsto {f : Œ± ‚Üí. Œ≤} {l‚ÇÅ : filter Œ±} {l‚ÇÇ : filter Œ≤} (h : f.dom ‚àà l‚ÇÅ) :
  ptendsto f l‚ÇÅ l‚ÇÇ ‚Üí ptendsto' f l‚ÇÅ l‚ÇÇ :=
begin
  rw [ptendsto_def, ptendsto'_def],
  assume h' s sl‚ÇÇ,
  rw pfun.preimage_eq,
  show pfun.core f s ‚à© pfun.dom f ‚àà l‚ÇÅ,
  exact inter_mem_sets (h' s sl‚ÇÇ) h
end

end filter
